
exoboat-bootloader-testapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  080101c4  080101c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080169e8  080169e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a00  08016a00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08016a00  08016a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a08  08016a08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a08  08016a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a0c  08016a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08016a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  2000000c  08016a1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08016a1c  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cf7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f5  00000000  00000000  00035d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00038e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00039f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024363  00000000  00000000  0003af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148ea  00000000  00000000  0005f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1f5d  00000000  00000000  00073b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046cc  00000000  00000000  00145afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101c4 <__do_global_dtors_aux>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4c05      	ldr	r4, [pc, #20]	; (80101dc <__do_global_dtors_aux+0x18>)
 80101c8:	7823      	ldrb	r3, [r4, #0]
 80101ca:	b933      	cbnz	r3, 80101da <__do_global_dtors_aux+0x16>
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x1c>)
 80101ce:	b113      	cbz	r3, 80101d6 <__do_global_dtors_aux+0x12>
 80101d0:	4804      	ldr	r0, [pc, #16]	; (80101e4 <__do_global_dtors_aux+0x20>)
 80101d2:	f3af 8000 	nop.w
 80101d6:	2301      	movs	r3, #1
 80101d8:	7023      	strb	r3, [r4, #0]
 80101da:	bd10      	pop	{r4, pc}
 80101dc:	2000000c 	.word	0x2000000c
 80101e0:	00000000 	.word	0x00000000
 80101e4:	080169d0 	.word	0x080169d0

080101e8 <frame_dummy>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <frame_dummy+0x10>)
 80101ec:	b11b      	cbz	r3, 80101f6 <frame_dummy+0xe>
 80101ee:	4903      	ldr	r1, [pc, #12]	; (80101fc <frame_dummy+0x14>)
 80101f0:	4803      	ldr	r0, [pc, #12]	; (8010200 <frame_dummy+0x18>)
 80101f2:	f3af 8000 	nop.w
 80101f6:	bd08      	pop	{r3, pc}
 80101f8:	00000000 	.word	0x00000000
 80101fc:	20000010 	.word	0x20000010
 8010200:	080169d0 	.word	0x080169d0

08010204 <__aeabi_uldivmod>:
 8010204:	b953      	cbnz	r3, 801021c <__aeabi_uldivmod+0x18>
 8010206:	b94a      	cbnz	r2, 801021c <__aeabi_uldivmod+0x18>
 8010208:	2900      	cmp	r1, #0
 801020a:	bf08      	it	eq
 801020c:	2800      	cmpeq	r0, #0
 801020e:	bf1c      	itt	ne
 8010210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8010214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010218:	f000 b974 	b.w	8010504 <__aeabi_idiv0>
 801021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010224:	f000 f806 	bl	8010234 <__udivmoddi4>
 8010228:	f8dd e004 	ldr.w	lr, [sp, #4]
 801022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010230:	b004      	add	sp, #16
 8010232:	4770      	bx	lr

08010234 <__udivmoddi4>:
 8010234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010238:	9d08      	ldr	r5, [sp, #32]
 801023a:	4604      	mov	r4, r0
 801023c:	468e      	mov	lr, r1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d14d      	bne.n	80102de <__udivmoddi4+0xaa>
 8010242:	428a      	cmp	r2, r1
 8010244:	4694      	mov	ip, r2
 8010246:	d969      	bls.n	801031c <__udivmoddi4+0xe8>
 8010248:	fab2 f282 	clz	r2, r2
 801024c:	b152      	cbz	r2, 8010264 <__udivmoddi4+0x30>
 801024e:	fa01 f302 	lsl.w	r3, r1, r2
 8010252:	f1c2 0120 	rsb	r1, r2, #32
 8010256:	fa20 f101 	lsr.w	r1, r0, r1
 801025a:	fa0c fc02 	lsl.w	ip, ip, r2
 801025e:	ea41 0e03 	orr.w	lr, r1, r3
 8010262:	4094      	lsls	r4, r2
 8010264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010268:	0c21      	lsrs	r1, r4, #16
 801026a:	fbbe f6f8 	udiv	r6, lr, r8
 801026e:	fa1f f78c 	uxth.w	r7, ip
 8010272:	fb08 e316 	mls	r3, r8, r6, lr
 8010276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801027a:	fb06 f107 	mul.w	r1, r6, r7
 801027e:	4299      	cmp	r1, r3
 8010280:	d90a      	bls.n	8010298 <__udivmoddi4+0x64>
 8010282:	eb1c 0303 	adds.w	r3, ip, r3
 8010286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 801028a:	f080 811f 	bcs.w	80104cc <__udivmoddi4+0x298>
 801028e:	4299      	cmp	r1, r3
 8010290:	f240 811c 	bls.w	80104cc <__udivmoddi4+0x298>
 8010294:	3e02      	subs	r6, #2
 8010296:	4463      	add	r3, ip
 8010298:	1a5b      	subs	r3, r3, r1
 801029a:	b2a4      	uxth	r4, r4
 801029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80102a0:	fb08 3310 	mls	r3, r8, r0, r3
 80102a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80102a8:	fb00 f707 	mul.w	r7, r0, r7
 80102ac:	42a7      	cmp	r7, r4
 80102ae:	d90a      	bls.n	80102c6 <__udivmoddi4+0x92>
 80102b0:	eb1c 0404 	adds.w	r4, ip, r4
 80102b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80102b8:	f080 810a 	bcs.w	80104d0 <__udivmoddi4+0x29c>
 80102bc:	42a7      	cmp	r7, r4
 80102be:	f240 8107 	bls.w	80104d0 <__udivmoddi4+0x29c>
 80102c2:	4464      	add	r4, ip
 80102c4:	3802      	subs	r0, #2
 80102c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80102ca:	1be4      	subs	r4, r4, r7
 80102cc:	2600      	movs	r6, #0
 80102ce:	b11d      	cbz	r5, 80102d8 <__udivmoddi4+0xa4>
 80102d0:	40d4      	lsrs	r4, r2
 80102d2:	2300      	movs	r3, #0
 80102d4:	e9c5 4300 	strd	r4, r3, [r5]
 80102d8:	4631      	mov	r1, r6
 80102da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102de:	428b      	cmp	r3, r1
 80102e0:	d909      	bls.n	80102f6 <__udivmoddi4+0xc2>
 80102e2:	2d00      	cmp	r5, #0
 80102e4:	f000 80ef 	beq.w	80104c6 <__udivmoddi4+0x292>
 80102e8:	2600      	movs	r6, #0
 80102ea:	e9c5 0100 	strd	r0, r1, [r5]
 80102ee:	4630      	mov	r0, r6
 80102f0:	4631      	mov	r1, r6
 80102f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f6:	fab3 f683 	clz	r6, r3
 80102fa:	2e00      	cmp	r6, #0
 80102fc:	d14a      	bne.n	8010394 <__udivmoddi4+0x160>
 80102fe:	428b      	cmp	r3, r1
 8010300:	d302      	bcc.n	8010308 <__udivmoddi4+0xd4>
 8010302:	4282      	cmp	r2, r0
 8010304:	f200 80f9 	bhi.w	80104fa <__udivmoddi4+0x2c6>
 8010308:	1a84      	subs	r4, r0, r2
 801030a:	eb61 0303 	sbc.w	r3, r1, r3
 801030e:	2001      	movs	r0, #1
 8010310:	469e      	mov	lr, r3
 8010312:	2d00      	cmp	r5, #0
 8010314:	d0e0      	beq.n	80102d8 <__udivmoddi4+0xa4>
 8010316:	e9c5 4e00 	strd	r4, lr, [r5]
 801031a:	e7dd      	b.n	80102d8 <__udivmoddi4+0xa4>
 801031c:	b902      	cbnz	r2, 8010320 <__udivmoddi4+0xec>
 801031e:	deff      	udf	#255	; 0xff
 8010320:	fab2 f282 	clz	r2, r2
 8010324:	2a00      	cmp	r2, #0
 8010326:	f040 8092 	bne.w	801044e <__udivmoddi4+0x21a>
 801032a:	eba1 010c 	sub.w	r1, r1, ip
 801032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010332:	fa1f fe8c 	uxth.w	lr, ip
 8010336:	2601      	movs	r6, #1
 8010338:	0c20      	lsrs	r0, r4, #16
 801033a:	fbb1 f3f7 	udiv	r3, r1, r7
 801033e:	fb07 1113 	mls	r1, r7, r3, r1
 8010342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010346:	fb0e f003 	mul.w	r0, lr, r3
 801034a:	4288      	cmp	r0, r1
 801034c:	d908      	bls.n	8010360 <__udivmoddi4+0x12c>
 801034e:	eb1c 0101 	adds.w	r1, ip, r1
 8010352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8010356:	d202      	bcs.n	801035e <__udivmoddi4+0x12a>
 8010358:	4288      	cmp	r0, r1
 801035a:	f200 80cb 	bhi.w	80104f4 <__udivmoddi4+0x2c0>
 801035e:	4643      	mov	r3, r8
 8010360:	1a09      	subs	r1, r1, r0
 8010362:	b2a4      	uxth	r4, r4
 8010364:	fbb1 f0f7 	udiv	r0, r1, r7
 8010368:	fb07 1110 	mls	r1, r7, r0, r1
 801036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010370:	fb0e fe00 	mul.w	lr, lr, r0
 8010374:	45a6      	cmp	lr, r4
 8010376:	d908      	bls.n	801038a <__udivmoddi4+0x156>
 8010378:	eb1c 0404 	adds.w	r4, ip, r4
 801037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8010380:	d202      	bcs.n	8010388 <__udivmoddi4+0x154>
 8010382:	45a6      	cmp	lr, r4
 8010384:	f200 80bb 	bhi.w	80104fe <__udivmoddi4+0x2ca>
 8010388:	4608      	mov	r0, r1
 801038a:	eba4 040e 	sub.w	r4, r4, lr
 801038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8010392:	e79c      	b.n	80102ce <__udivmoddi4+0x9a>
 8010394:	f1c6 0720 	rsb	r7, r6, #32
 8010398:	40b3      	lsls	r3, r6
 801039a:	fa22 fc07 	lsr.w	ip, r2, r7
 801039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80103a2:	fa20 f407 	lsr.w	r4, r0, r7
 80103a6:	fa01 f306 	lsl.w	r3, r1, r6
 80103aa:	431c      	orrs	r4, r3
 80103ac:	40f9      	lsrs	r1, r7
 80103ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80103b2:	fa00 f306 	lsl.w	r3, r0, r6
 80103b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80103ba:	0c20      	lsrs	r0, r4, #16
 80103bc:	fa1f fe8c 	uxth.w	lr, ip
 80103c0:	fb09 1118 	mls	r1, r9, r8, r1
 80103c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80103c8:	fb08 f00e 	mul.w	r0, r8, lr
 80103cc:	4288      	cmp	r0, r1
 80103ce:	fa02 f206 	lsl.w	r2, r2, r6
 80103d2:	d90b      	bls.n	80103ec <__udivmoddi4+0x1b8>
 80103d4:	eb1c 0101 	adds.w	r1, ip, r1
 80103d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80103dc:	f080 8088 	bcs.w	80104f0 <__udivmoddi4+0x2bc>
 80103e0:	4288      	cmp	r0, r1
 80103e2:	f240 8085 	bls.w	80104f0 <__udivmoddi4+0x2bc>
 80103e6:	f1a8 0802 	sub.w	r8, r8, #2
 80103ea:	4461      	add	r1, ip
 80103ec:	1a09      	subs	r1, r1, r0
 80103ee:	b2a4      	uxth	r4, r4
 80103f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80103f4:	fb09 1110 	mls	r1, r9, r0, r1
 80103f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80103fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8010400:	458e      	cmp	lr, r1
 8010402:	d908      	bls.n	8010416 <__udivmoddi4+0x1e2>
 8010404:	eb1c 0101 	adds.w	r1, ip, r1
 8010408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 801040c:	d26c      	bcs.n	80104e8 <__udivmoddi4+0x2b4>
 801040e:	458e      	cmp	lr, r1
 8010410:	d96a      	bls.n	80104e8 <__udivmoddi4+0x2b4>
 8010412:	3802      	subs	r0, #2
 8010414:	4461      	add	r1, ip
 8010416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801041a:	fba0 9402 	umull	r9, r4, r0, r2
 801041e:	eba1 010e 	sub.w	r1, r1, lr
 8010422:	42a1      	cmp	r1, r4
 8010424:	46c8      	mov	r8, r9
 8010426:	46a6      	mov	lr, r4
 8010428:	d356      	bcc.n	80104d8 <__udivmoddi4+0x2a4>
 801042a:	d053      	beq.n	80104d4 <__udivmoddi4+0x2a0>
 801042c:	b15d      	cbz	r5, 8010446 <__udivmoddi4+0x212>
 801042e:	ebb3 0208 	subs.w	r2, r3, r8
 8010432:	eb61 010e 	sbc.w	r1, r1, lr
 8010436:	fa01 f707 	lsl.w	r7, r1, r7
 801043a:	fa22 f306 	lsr.w	r3, r2, r6
 801043e:	40f1      	lsrs	r1, r6
 8010440:	431f      	orrs	r7, r3
 8010442:	e9c5 7100 	strd	r7, r1, [r5]
 8010446:	2600      	movs	r6, #0
 8010448:	4631      	mov	r1, r6
 801044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801044e:	f1c2 0320 	rsb	r3, r2, #32
 8010452:	40d8      	lsrs	r0, r3
 8010454:	fa0c fc02 	lsl.w	ip, ip, r2
 8010458:	fa21 f303 	lsr.w	r3, r1, r3
 801045c:	4091      	lsls	r1, r2
 801045e:	4301      	orrs	r1, r0
 8010460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010464:	fa1f fe8c 	uxth.w	lr, ip
 8010468:	fbb3 f0f7 	udiv	r0, r3, r7
 801046c:	fb07 3610 	mls	r6, r7, r0, r3
 8010470:	0c0b      	lsrs	r3, r1, #16
 8010472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8010476:	fb00 f60e 	mul.w	r6, r0, lr
 801047a:	429e      	cmp	r6, r3
 801047c:	fa04 f402 	lsl.w	r4, r4, r2
 8010480:	d908      	bls.n	8010494 <__udivmoddi4+0x260>
 8010482:	eb1c 0303 	adds.w	r3, ip, r3
 8010486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801048a:	d22f      	bcs.n	80104ec <__udivmoddi4+0x2b8>
 801048c:	429e      	cmp	r6, r3
 801048e:	d92d      	bls.n	80104ec <__udivmoddi4+0x2b8>
 8010490:	3802      	subs	r0, #2
 8010492:	4463      	add	r3, ip
 8010494:	1b9b      	subs	r3, r3, r6
 8010496:	b289      	uxth	r1, r1
 8010498:	fbb3 f6f7 	udiv	r6, r3, r7
 801049c:	fb07 3316 	mls	r3, r7, r6, r3
 80104a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80104a4:	fb06 f30e 	mul.w	r3, r6, lr
 80104a8:	428b      	cmp	r3, r1
 80104aa:	d908      	bls.n	80104be <__udivmoddi4+0x28a>
 80104ac:	eb1c 0101 	adds.w	r1, ip, r1
 80104b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80104b4:	d216      	bcs.n	80104e4 <__udivmoddi4+0x2b0>
 80104b6:	428b      	cmp	r3, r1
 80104b8:	d914      	bls.n	80104e4 <__udivmoddi4+0x2b0>
 80104ba:	3e02      	subs	r6, #2
 80104bc:	4461      	add	r1, ip
 80104be:	1ac9      	subs	r1, r1, r3
 80104c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80104c4:	e738      	b.n	8010338 <__udivmoddi4+0x104>
 80104c6:	462e      	mov	r6, r5
 80104c8:	4628      	mov	r0, r5
 80104ca:	e705      	b.n	80102d8 <__udivmoddi4+0xa4>
 80104cc:	4606      	mov	r6, r0
 80104ce:	e6e3      	b.n	8010298 <__udivmoddi4+0x64>
 80104d0:	4618      	mov	r0, r3
 80104d2:	e6f8      	b.n	80102c6 <__udivmoddi4+0x92>
 80104d4:	454b      	cmp	r3, r9
 80104d6:	d2a9      	bcs.n	801042c <__udivmoddi4+0x1f8>
 80104d8:	ebb9 0802 	subs.w	r8, r9, r2
 80104dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80104e0:	3801      	subs	r0, #1
 80104e2:	e7a3      	b.n	801042c <__udivmoddi4+0x1f8>
 80104e4:	4646      	mov	r6, r8
 80104e6:	e7ea      	b.n	80104be <__udivmoddi4+0x28a>
 80104e8:	4620      	mov	r0, r4
 80104ea:	e794      	b.n	8010416 <__udivmoddi4+0x1e2>
 80104ec:	4640      	mov	r0, r8
 80104ee:	e7d1      	b.n	8010494 <__udivmoddi4+0x260>
 80104f0:	46d0      	mov	r8, sl
 80104f2:	e77b      	b.n	80103ec <__udivmoddi4+0x1b8>
 80104f4:	3b02      	subs	r3, #2
 80104f6:	4461      	add	r1, ip
 80104f8:	e732      	b.n	8010360 <__udivmoddi4+0x12c>
 80104fa:	4630      	mov	r0, r6
 80104fc:	e709      	b.n	8010312 <__udivmoddi4+0xde>
 80104fe:	4464      	add	r4, ip
 8010500:	3802      	subs	r0, #2
 8010502:	e742      	b.n	801038a <__udivmoddi4+0x156>

08010504 <__aeabi_idiv0>:
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <cpu_delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static inline void cpu_delay(unsigned long long ticks)
{
 8010508:	b4b0      	push	{r4, r5, r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	e9c7 0100 	strd	r0, r1, [r7]
    volatile unsigned long long t = ticks;
 8010512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010516:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while (t) t=t-1;
 801051a:	e006      	b.n	801052a <cpu_delay+0x22>
 801051c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010520:	1e54      	subs	r4, r2, #1
 8010522:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8010526:	e9c7 4502 	strd	r4, r5, [r7, #8]
 801052a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801052e:	4313      	orrs	r3, r2
 8010530:	d1f4      	bne.n	801051c <cpu_delay+0x14>
}
 8010532:	bf00      	nop
 8010534:	bf00      	nop
 8010536:	3714      	adds	r7, #20
 8010538:	46bd      	mov	sp, r7
 801053a:	bcb0      	pop	{r4, r5, r7}
 801053c:	4770      	bx	lr
	...

08010540 <main>:
  * @brief  The application entry point.
  * @retval int
  */
void Delay_ms(volatile int time_ms);
int main(void)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010544:	f000 fa7c 	bl	8010a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010548:	f000 f81e 	bl	8010588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = 0x08010000;
 801054c:	4b0a      	ldr	r3, [pc, #40]	; (8010578 <main+0x38>)
 801054e:	4a0b      	ldr	r2, [pc, #44]	; (801057c <main+0x3c>)
 8010550:	609a      	str	r2, [r3, #8]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010552:	f000 f8f7 	bl	8010744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8010556:	f000 f8a3 	bl	80106a0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 801055a:	f000 f8cb 	bl	80106f4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 801055e:	f000 f87f 	bl	8010660 <MX_SDIO_SD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1|GPIO_PIN_4);
 8010562:	2112      	movs	r1, #18
 8010564:	4806      	ldr	r0, [pc, #24]	; (8010580 <main+0x40>)
 8010566:	f000 ff48 	bl	80113fa <HAL_GPIO_TogglePin>
	  //HAL_Delay(500);
	  cpu_delay(2000000);
 801056a:	4806      	ldr	r0, [pc, #24]	; (8010584 <main+0x44>)
 801056c:	f04f 0100 	mov.w	r1, #0
 8010570:	f7ff ffca 	bl	8010508 <cpu_delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1|GPIO_PIN_4);
 8010574:	e7f5      	b.n	8010562 <main+0x22>
 8010576:	bf00      	nop
 8010578:	e000ed00 	.word	0xe000ed00
 801057c:	08010000 	.word	0x08010000
 8010580:	40020000 	.word	0x40020000
 8010584:	001e8480 	.word	0x001e8480

08010588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b094      	sub	sp, #80	; 0x50
 801058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801058e:	f107 031c 	add.w	r3, r7, #28
 8010592:	2234      	movs	r2, #52	; 0x34
 8010594:	2100      	movs	r1, #0
 8010596:	4618      	mov	r0, r3
 8010598:	f006 fa12 	bl	80169c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801059c:	f107 0308 	add.w	r3, r7, #8
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	605a      	str	r2, [r3, #4]
 80105a6:	609a      	str	r2, [r3, #8]
 80105a8:	60da      	str	r2, [r3, #12]
 80105aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80105ac:	2300      	movs	r3, #0
 80105ae:	607b      	str	r3, [r7, #4]
 80105b0:	4b29      	ldr	r3, [pc, #164]	; (8010658 <SystemClock_Config+0xd0>)
 80105b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b4:	4a28      	ldr	r2, [pc, #160]	; (8010658 <SystemClock_Config+0xd0>)
 80105b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105ba:	6413      	str	r3, [r2, #64]	; 0x40
 80105bc:	4b26      	ldr	r3, [pc, #152]	; (8010658 <SystemClock_Config+0xd0>)
 80105be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105c4:	607b      	str	r3, [r7, #4]
 80105c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80105c8:	2300      	movs	r3, #0
 80105ca:	603b      	str	r3, [r7, #0]
 80105cc:	4b23      	ldr	r3, [pc, #140]	; (801065c <SystemClock_Config+0xd4>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80105d4:	4a21      	ldr	r2, [pc, #132]	; (801065c <SystemClock_Config+0xd4>)
 80105d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80105da:	6013      	str	r3, [r2, #0]
 80105dc:	4b1f      	ldr	r3, [pc, #124]	; (801065c <SystemClock_Config+0xd4>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80105e4:	603b      	str	r3, [r7, #0]
 80105e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80105e8:	2301      	movs	r3, #1
 80105ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80105ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80105f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80105f2:	2302      	movs	r3, #2
 80105f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80105f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80105fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80105fc:	2304      	movs	r3, #4
 80105fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8010600:	2348      	movs	r3, #72	; 0x48
 8010602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010604:	2302      	movs	r3, #2
 8010606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8010608:	2303      	movs	r3, #3
 801060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 801060c:	2302      	movs	r3, #2
 801060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010610:	f107 031c 	add.w	r3, r7, #28
 8010614:	4618      	mov	r0, r3
 8010616:	f002 fae9 	bl	8012bec <HAL_RCC_OscConfig>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d001      	beq.n	8010624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8010620:	f000 f90a 	bl	8010838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010624:	230f      	movs	r3, #15
 8010626:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010628:	2302      	movs	r3, #2
 801062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801062c:	2300      	movs	r3, #0
 801062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8010630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010636:	2300      	movs	r3, #0
 8010638:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	2102      	movs	r1, #2
 8010640:	4618      	mov	r0, r3
 8010642:	f001 ff89 	bl	8012558 <HAL_RCC_ClockConfig>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 801064c:	f000 f8f4 	bl	8010838 <Error_Handler>
  }
}
 8010650:	bf00      	nop
 8010652:	3750      	adds	r7, #80	; 0x50
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	40023800 	.word	0x40023800
 801065c:	40007000 	.word	0x40007000

08010660 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8010660:	b480      	push	{r7}
 8010662:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8010664:	4b0c      	ldr	r3, [pc, #48]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 8010666:	4a0d      	ldr	r2, [pc, #52]	; (801069c <MX_SDIO_SD_Init+0x3c>)
 8010668:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 801066a:	4b0b      	ldr	r3, [pc, #44]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 801066c:	2200      	movs	r2, #0
 801066e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8010670:	4b09      	ldr	r3, [pc, #36]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 8010672:	2200      	movs	r2, #0
 8010674:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8010676:	4b08      	ldr	r3, [pc, #32]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 8010678:	2200      	movs	r2, #0
 801067a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 801067c:	4b06      	ldr	r3, [pc, #24]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 801067e:	2200      	movs	r2, #0
 8010680:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8010682:	4b05      	ldr	r3, [pc, #20]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 8010684:	2200      	movs	r2, #0
 8010686:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8010688:	4b03      	ldr	r3, [pc, #12]	; (8010698 <MX_SDIO_SD_Init+0x38>)
 801068a:	2200      	movs	r2, #0
 801068c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 801068e:	bf00      	nop
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr
 8010698:	20000028 	.word	0x20000028
 801069c:	40012c00 	.word	0x40012c00

080106a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80106a4:	4b11      	ldr	r3, [pc, #68]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106a6:	4a12      	ldr	r2, [pc, #72]	; (80106f0 <MX_USART2_UART_Init+0x50>)
 80106a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80106aa:	4b10      	ldr	r3, [pc, #64]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80106b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80106b2:	4b0e      	ldr	r3, [pc, #56]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80106b8:	4b0c      	ldr	r3, [pc, #48]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80106be:	4b0b      	ldr	r3, [pc, #44]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80106c4:	4b09      	ldr	r3, [pc, #36]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106c6:	220c      	movs	r2, #12
 80106c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80106ca:	4b08      	ldr	r3, [pc, #32]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80106d0:	4b06      	ldr	r3, [pc, #24]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80106d6:	4805      	ldr	r0, [pc, #20]	; (80106ec <MX_USART2_UART_Init+0x4c>)
 80106d8:	f003 f802 	bl	80136e0 <HAL_UART_Init>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80106e2:	f000 f8a9 	bl	8010838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80106e6:	bf00      	nop
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	2000016c 	.word	0x2000016c
 80106f0:	40004400 	.word	0x40004400

080106f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80106fa:	2300      	movs	r3, #0
 80106fc:	607b      	str	r3, [r7, #4]
 80106fe:	4b10      	ldr	r3, [pc, #64]	; (8010740 <MX_DMA_Init+0x4c>)
 8010700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010702:	4a0f      	ldr	r2, [pc, #60]	; (8010740 <MX_DMA_Init+0x4c>)
 8010704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010708:	6313      	str	r3, [r2, #48]	; 0x30
 801070a:	4b0d      	ldr	r3, [pc, #52]	; (8010740 <MX_DMA_Init+0x4c>)
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010712:	607b      	str	r3, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8010716:	2200      	movs	r2, #0
 8010718:	2100      	movs	r1, #0
 801071a:	203b      	movs	r0, #59	; 0x3b
 801071c:	f000 fadd 	bl	8010cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8010720:	203b      	movs	r0, #59	; 0x3b
 8010722:	f000 faf6 	bl	8010d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8010726:	2200      	movs	r2, #0
 8010728:	2100      	movs	r1, #0
 801072a:	2045      	movs	r0, #69	; 0x45
 801072c:	f000 fad5 	bl	8010cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8010730:	2045      	movs	r0, #69	; 0x45
 8010732:	f000 faee 	bl	8010d12 <HAL_NVIC_EnableIRQ>

}
 8010736:	bf00      	nop
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	40023800 	.word	0x40023800

08010744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08a      	sub	sp, #40	; 0x28
 8010748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801074a:	f107 0314 	add.w	r3, r7, #20
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	605a      	str	r2, [r3, #4]
 8010754:	609a      	str	r2, [r3, #8]
 8010756:	60da      	str	r2, [r3, #12]
 8010758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801075a:	2300      	movs	r3, #0
 801075c:	613b      	str	r3, [r7, #16]
 801075e:	4b34      	ldr	r3, [pc, #208]	; (8010830 <MX_GPIO_Init+0xec>)
 8010760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010762:	4a33      	ldr	r2, [pc, #204]	; (8010830 <MX_GPIO_Init+0xec>)
 8010764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010768:	6313      	str	r3, [r2, #48]	; 0x30
 801076a:	4b31      	ldr	r3, [pc, #196]	; (8010830 <MX_GPIO_Init+0xec>)
 801076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010772:	613b      	str	r3, [r7, #16]
 8010774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010776:	2300      	movs	r3, #0
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	4b2d      	ldr	r3, [pc, #180]	; (8010830 <MX_GPIO_Init+0xec>)
 801077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801077e:	4a2c      	ldr	r2, [pc, #176]	; (8010830 <MX_GPIO_Init+0xec>)
 8010780:	f043 0301 	orr.w	r3, r3, #1
 8010784:	6313      	str	r3, [r2, #48]	; 0x30
 8010786:	4b2a      	ldr	r3, [pc, #168]	; (8010830 <MX_GPIO_Init+0xec>)
 8010788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010792:	2300      	movs	r3, #0
 8010794:	60bb      	str	r3, [r7, #8]
 8010796:	4b26      	ldr	r3, [pc, #152]	; (8010830 <MX_GPIO_Init+0xec>)
 8010798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801079a:	4a25      	ldr	r2, [pc, #148]	; (8010830 <MX_GPIO_Init+0xec>)
 801079c:	f043 0302 	orr.w	r3, r3, #2
 80107a0:	6313      	str	r3, [r2, #48]	; 0x30
 80107a2:	4b23      	ldr	r3, [pc, #140]	; (8010830 <MX_GPIO_Init+0xec>)
 80107a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a6:	f003 0302 	and.w	r3, r3, #2
 80107aa:	60bb      	str	r3, [r7, #8]
 80107ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80107ae:	2300      	movs	r3, #0
 80107b0:	607b      	str	r3, [r7, #4]
 80107b2:	4b1f      	ldr	r3, [pc, #124]	; (8010830 <MX_GPIO_Init+0xec>)
 80107b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107b6:	4a1e      	ldr	r2, [pc, #120]	; (8010830 <MX_GPIO_Init+0xec>)
 80107b8:	f043 0304 	orr.w	r3, r3, #4
 80107bc:	6313      	str	r3, [r2, #48]	; 0x30
 80107be:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <MX_GPIO_Init+0xec>)
 80107c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c2:	f003 0304 	and.w	r3, r3, #4
 80107c6:	607b      	str	r3, [r7, #4]
 80107c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80107ca:	2300      	movs	r3, #0
 80107cc:	603b      	str	r3, [r7, #0]
 80107ce:	4b18      	ldr	r3, [pc, #96]	; (8010830 <MX_GPIO_Init+0xec>)
 80107d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d2:	4a17      	ldr	r2, [pc, #92]	; (8010830 <MX_GPIO_Init+0xec>)
 80107d4:	f043 0308 	orr.w	r3, r3, #8
 80107d8:	6313      	str	r3, [r2, #48]	; 0x30
 80107da:	4b15      	ldr	r3, [pc, #84]	; (8010830 <MX_GPIO_Init+0xec>)
 80107dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107de:	f003 0308 	and.w	r3, r3, #8
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RedLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 80107e6:	2200      	movs	r2, #0
 80107e8:	2112      	movs	r1, #18
 80107ea:	4812      	ldr	r0, [pc, #72]	; (8010834 <MX_GPIO_Init+0xf0>)
 80107ec:	f000 fdec 	bl	80113c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BootMode_Pin PA15 */
  GPIO_InitStruct.Pin = BootMode_Pin|GPIO_PIN_15;
 80107f0:	f248 0301 	movw	r3, #32769	; 0x8001
 80107f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80107f6:	2300      	movs	r3, #0
 80107f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107fe:	f107 0314 	add.w	r3, r7, #20
 8010802:	4619      	mov	r1, r3
 8010804:	480b      	ldr	r0, [pc, #44]	; (8010834 <MX_GPIO_Init+0xf0>)
 8010806:	f000 fc4b 	bl	80110a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RedLed_Pin BlueLed_Pin */
  GPIO_InitStruct.Pin = RedLed_Pin|BlueLed_Pin;
 801080a:	2312      	movs	r3, #18
 801080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801080e:	2301      	movs	r3, #1
 8010810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010812:	2300      	movs	r3, #0
 8010814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010816:	2300      	movs	r3, #0
 8010818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801081a:	f107 0314 	add.w	r3, r7, #20
 801081e:	4619      	mov	r1, r3
 8010820:	4804      	ldr	r0, [pc, #16]	; (8010834 <MX_GPIO_Init+0xf0>)
 8010822:	f000 fc3d 	bl	80110a0 <HAL_GPIO_Init>

}
 8010826:	bf00      	nop
 8010828:	3728      	adds	r7, #40	; 0x28
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	40023800 	.word	0x40023800
 8010834:	40020000 	.word	0x40020000

08010838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010838:	b480      	push	{r7}
 801083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801083c:	b672      	cpsid	i
}
 801083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010840:	e7fe      	b.n	8010840 <Error_Handler+0x8>
	...

08010844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801084a:	2300      	movs	r3, #0
 801084c:	607b      	str	r3, [r7, #4]
 801084e:	4b10      	ldr	r3, [pc, #64]	; (8010890 <HAL_MspInit+0x4c>)
 8010850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010852:	4a0f      	ldr	r2, [pc, #60]	; (8010890 <HAL_MspInit+0x4c>)
 8010854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010858:	6453      	str	r3, [r2, #68]	; 0x44
 801085a:	4b0d      	ldr	r3, [pc, #52]	; (8010890 <HAL_MspInit+0x4c>)
 801085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010862:	607b      	str	r3, [r7, #4]
 8010864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010866:	2300      	movs	r3, #0
 8010868:	603b      	str	r3, [r7, #0]
 801086a:	4b09      	ldr	r3, [pc, #36]	; (8010890 <HAL_MspInit+0x4c>)
 801086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086e:	4a08      	ldr	r2, [pc, #32]	; (8010890 <HAL_MspInit+0x4c>)
 8010870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010874:	6413      	str	r3, [r2, #64]	; 0x40
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <HAL_MspInit+0x4c>)
 8010878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801087e:	603b      	str	r3, [r7, #0]
 8010880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010882:	bf00      	nop
 8010884:	370c      	adds	r7, #12
 8010886:	46bd      	mov	sp, r7
 8010888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	40023800 	.word	0x40023800

08010894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b08a      	sub	sp, #40	; 0x28
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801089c:	f107 0314 	add.w	r3, r7, #20
 80108a0:	2200      	movs	r2, #0
 80108a2:	601a      	str	r2, [r3, #0]
 80108a4:	605a      	str	r2, [r3, #4]
 80108a6:	609a      	str	r2, [r3, #8]
 80108a8:	60da      	str	r2, [r3, #12]
 80108aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a19      	ldr	r2, [pc, #100]	; (8010918 <HAL_UART_MspInit+0x84>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d12b      	bne.n	801090e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80108b6:	2300      	movs	r3, #0
 80108b8:	613b      	str	r3, [r7, #16]
 80108ba:	4b18      	ldr	r3, [pc, #96]	; (801091c <HAL_UART_MspInit+0x88>)
 80108bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108be:	4a17      	ldr	r2, [pc, #92]	; (801091c <HAL_UART_MspInit+0x88>)
 80108c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80108c4:	6413      	str	r3, [r2, #64]	; 0x40
 80108c6:	4b15      	ldr	r3, [pc, #84]	; (801091c <HAL_UART_MspInit+0x88>)
 80108c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108ce:	613b      	str	r3, [r7, #16]
 80108d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108d2:	2300      	movs	r3, #0
 80108d4:	60fb      	str	r3, [r7, #12]
 80108d6:	4b11      	ldr	r3, [pc, #68]	; (801091c <HAL_UART_MspInit+0x88>)
 80108d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108da:	4a10      	ldr	r2, [pc, #64]	; (801091c <HAL_UART_MspInit+0x88>)
 80108dc:	f043 0301 	orr.w	r3, r3, #1
 80108e0:	6313      	str	r3, [r2, #48]	; 0x30
 80108e2:	4b0e      	ldr	r3, [pc, #56]	; (801091c <HAL_UART_MspInit+0x88>)
 80108e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e6:	f003 0301 	and.w	r3, r3, #1
 80108ea:	60fb      	str	r3, [r7, #12]
 80108ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80108ee:	230c      	movs	r3, #12
 80108f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108f2:	2302      	movs	r3, #2
 80108f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108fa:	2303      	movs	r3, #3
 80108fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80108fe:	2307      	movs	r3, #7
 8010900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010902:	f107 0314 	add.w	r3, r7, #20
 8010906:	4619      	mov	r1, r3
 8010908:	4805      	ldr	r0, [pc, #20]	; (8010920 <HAL_UART_MspInit+0x8c>)
 801090a:	f000 fbc9 	bl	80110a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801090e:	bf00      	nop
 8010910:	3728      	adds	r7, #40	; 0x28
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	40004400 	.word	0x40004400
 801091c:	40023800 	.word	0x40023800
 8010920:	40020000 	.word	0x40020000

08010924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010928:	e7fe      	b.n	8010928 <NMI_Handler+0x4>

0801092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801092a:	b480      	push	{r7}
 801092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801092e:	e7fe      	b.n	801092e <HardFault_Handler+0x4>

08010930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010934:	e7fe      	b.n	8010934 <MemManage_Handler+0x4>

08010936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010936:	b480      	push	{r7}
 8010938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801093a:	e7fe      	b.n	801093a <BusFault_Handler+0x4>

0801093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801093c:	b480      	push	{r7}
 801093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010940:	e7fe      	b.n	8010940 <UsageFault_Handler+0x4>

08010942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010942:	b480      	push	{r7}
 8010944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010946:	bf00      	nop
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010950:	b480      	push	{r7}
 8010952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010954:	bf00      	nop
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801095e:	b480      	push	{r7}
 8010960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010962:	bf00      	nop
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010970:	f000 f8b8 	bl	8010ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010974:	bf00      	nop
 8010976:	bd80      	pop	{r7, pc}

08010978 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 801097c:	4802      	ldr	r0, [pc, #8]	; (8010988 <SDIO_IRQHandler+0x10>)
 801097e:	f002 fbd3 	bl	8013128 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8010982:	bf00      	nop
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20000028 	.word	0x20000028

0801098c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8010990:	4802      	ldr	r0, [pc, #8]	; (801099c <DMA2_Stream3_IRQHandler+0x10>)
 8010992:	f000 f9fb 	bl	8010d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8010996:	bf00      	nop
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	200000ac 	.word	0x200000ac

080109a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80109a4:	4802      	ldr	r0, [pc, #8]	; (80109b0 <OTG_FS_IRQHandler+0x10>)
 80109a6:	f000 fd42 	bl	801142e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80109aa:	bf00      	nop
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	200001c0 	.word	0x200001c0

080109b4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80109b8:	4802      	ldr	r0, [pc, #8]	; (80109c4 <DMA2_Stream6_IRQHandler+0x10>)
 80109ba:	f000 f9e7 	bl	8010d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80109be:	bf00      	nop
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	2000010c 	.word	0x2000010c

080109c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80109c8:	b480      	push	{r7}
 80109ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80109cc:	4b06      	ldr	r3, [pc, #24]	; (80109e8 <SystemInit+0x20>)
 80109ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109d2:	4a05      	ldr	r2, [pc, #20]	; (80109e8 <SystemInit+0x20>)
 80109d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80109d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80109dc:	bf00      	nop
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	e000ed00 	.word	0xe000ed00

080109ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80109ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80109f0:	480d      	ldr	r0, [pc, #52]	; (8010a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80109f2:	490e      	ldr	r1, [pc, #56]	; (8010a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80109f4:	4a0e      	ldr	r2, [pc, #56]	; (8010a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80109f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80109f8:	e002      	b.n	8010a00 <LoopCopyDataInit>

080109fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80109fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80109fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80109fe:	3304      	adds	r3, #4

08010a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010a04:	d3f9      	bcc.n	80109fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010a06:	4a0b      	ldr	r2, [pc, #44]	; (8010a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010a08:	4c0b      	ldr	r4, [pc, #44]	; (8010a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010a0c:	e001      	b.n	8010a12 <LoopFillZerobss>

08010a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010a10:	3204      	adds	r2, #4

08010a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010a14:	d3fb      	bcc.n	8010a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010a16:	f7ff ffd7 	bl	80109c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010a1a:	f005 ffad 	bl	8016978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a1e:	f7ff fd8f 	bl	8010540 <main>
  bx  lr    
 8010a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8010a30:	08016a10 	.word	0x08016a10
  ldr r2, =_sbss
 8010a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010a38:	200006cc 	.word	0x200006cc

08010a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a3c:	e7fe      	b.n	8010a3c <ADC_IRQHandler>
	...

08010a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010a44:	4b0e      	ldr	r3, [pc, #56]	; (8010a80 <HAL_Init+0x40>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a0d      	ldr	r2, [pc, #52]	; (8010a80 <HAL_Init+0x40>)
 8010a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010a50:	4b0b      	ldr	r3, [pc, #44]	; (8010a80 <HAL_Init+0x40>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a0a      	ldr	r2, [pc, #40]	; (8010a80 <HAL_Init+0x40>)
 8010a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010a5c:	4b08      	ldr	r3, [pc, #32]	; (8010a80 <HAL_Init+0x40>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a07      	ldr	r2, [pc, #28]	; (8010a80 <HAL_Init+0x40>)
 8010a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010a68:	2003      	movs	r0, #3
 8010a6a:	f000 f92b 	bl	8010cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f000 f808 	bl	8010a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010a74:	f7ff fee6 	bl	8010844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	40023c00 	.word	0x40023c00

08010a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010a8c:	4b12      	ldr	r3, [pc, #72]	; (8010ad8 <HAL_InitTick+0x54>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	4b12      	ldr	r3, [pc, #72]	; (8010adc <HAL_InitTick+0x58>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	4619      	mov	r1, r3
 8010a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 f943 	bl	8010d2e <HAL_SYSTICK_Config>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d001      	beq.n	8010ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e00e      	b.n	8010ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2b0f      	cmp	r3, #15
 8010ab6:	d80a      	bhi.n	8010ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ab8:	2200      	movs	r2, #0
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ac0:	f000 f90b 	bl	8010cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010ac4:	4a06      	ldr	r2, [pc, #24]	; (8010ae0 <HAL_InitTick+0x5c>)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010aca:	2300      	movs	r3, #0
 8010acc:	e000      	b.n	8010ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010ace:	2301      	movs	r3, #1
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	20000000 	.word	0x20000000
 8010adc:	20000008 	.word	0x20000008
 8010ae0:	20000004 	.word	0x20000004

08010ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010ae8:	4b06      	ldr	r3, [pc, #24]	; (8010b04 <HAL_IncTick+0x20>)
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	461a      	mov	r2, r3
 8010aee:	4b06      	ldr	r3, [pc, #24]	; (8010b08 <HAL_IncTick+0x24>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4413      	add	r3, r2
 8010af4:	4a04      	ldr	r2, [pc, #16]	; (8010b08 <HAL_IncTick+0x24>)
 8010af6:	6013      	str	r3, [r2, #0]
}
 8010af8:	bf00      	nop
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	20000008 	.word	0x20000008
 8010b08:	200001b0 	.word	0x200001b0

08010b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8010b10:	4b03      	ldr	r3, [pc, #12]	; (8010b20 <HAL_GetTick+0x14>)
 8010b12:	681b      	ldr	r3, [r3, #0]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop
 8010b20:	200001b0 	.word	0x200001b0

08010b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f003 0307 	and.w	r3, r3, #7
 8010b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b34:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <__NVIC_SetPriorityGrouping+0x44>)
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b3a:	68ba      	ldr	r2, [r7, #8]
 8010b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b40:	4013      	ands	r3, r2
 8010b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b56:	4a04      	ldr	r2, [pc, #16]	; (8010b68 <__NVIC_SetPriorityGrouping+0x44>)
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	60d3      	str	r3, [r2, #12]
}
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr
 8010b68:	e000ed00 	.word	0xe000ed00

08010b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b70:	4b04      	ldr	r3, [pc, #16]	; (8010b84 <__NVIC_GetPriorityGrouping+0x18>)
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	0a1b      	lsrs	r3, r3, #8
 8010b76:	f003 0307 	and.w	r3, r3, #7
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr
 8010b84:	e000ed00 	.word	0xe000ed00

08010b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	db0b      	blt.n	8010bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	f003 021f 	and.w	r2, r3, #31
 8010ba0:	4907      	ldr	r1, [pc, #28]	; (8010bc0 <__NVIC_EnableIRQ+0x38>)
 8010ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ba6:	095b      	lsrs	r3, r3, #5
 8010ba8:	2001      	movs	r0, #1
 8010baa:	fa00 f202 	lsl.w	r2, r0, r2
 8010bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010bb2:	bf00      	nop
 8010bb4:	370c      	adds	r7, #12
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	e000e100 	.word	0xe000e100

08010bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	6039      	str	r1, [r7, #0]
 8010bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	db0a      	blt.n	8010bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	490c      	ldr	r1, [pc, #48]	; (8010c10 <__NVIC_SetPriority+0x4c>)
 8010bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010be2:	0112      	lsls	r2, r2, #4
 8010be4:	b2d2      	uxtb	r2, r2
 8010be6:	440b      	add	r3, r1
 8010be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010bec:	e00a      	b.n	8010c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	b2da      	uxtb	r2, r3
 8010bf2:	4908      	ldr	r1, [pc, #32]	; (8010c14 <__NVIC_SetPriority+0x50>)
 8010bf4:	79fb      	ldrb	r3, [r7, #7]
 8010bf6:	f003 030f 	and.w	r3, r3, #15
 8010bfa:	3b04      	subs	r3, #4
 8010bfc:	0112      	lsls	r2, r2, #4
 8010bfe:	b2d2      	uxtb	r2, r2
 8010c00:	440b      	add	r3, r1
 8010c02:	761a      	strb	r2, [r3, #24]
}
 8010c04:	bf00      	nop
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr
 8010c10:	e000e100 	.word	0xe000e100
 8010c14:	e000ed00 	.word	0xe000ed00

08010c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b089      	sub	sp, #36	; 0x24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f003 0307 	and.w	r3, r3, #7
 8010c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	f1c3 0307 	rsb	r3, r3, #7
 8010c32:	2b04      	cmp	r3, #4
 8010c34:	bf28      	it	cs
 8010c36:	2304      	movcs	r3, #4
 8010c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	2b06      	cmp	r3, #6
 8010c40:	d902      	bls.n	8010c48 <NVIC_EncodePriority+0x30>
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	3b03      	subs	r3, #3
 8010c46:	e000      	b.n	8010c4a <NVIC_EncodePriority+0x32>
 8010c48:	2300      	movs	r3, #0
 8010c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	fa02 f303 	lsl.w	r3, r2, r3
 8010c56:	43da      	mvns	r2, r3
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	401a      	ands	r2, r3
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	fa01 f303 	lsl.w	r3, r1, r3
 8010c6a:	43d9      	mvns	r1, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c70:	4313      	orrs	r3, r2
         );
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3724      	adds	r7, #36	; 0x24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
	...

08010c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c90:	d301      	bcc.n	8010c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c92:	2301      	movs	r3, #1
 8010c94:	e00f      	b.n	8010cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c96:	4a0a      	ldr	r2, [pc, #40]	; (8010cc0 <SysTick_Config+0x40>)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c9e:	210f      	movs	r1, #15
 8010ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ca4:	f7ff ff8e 	bl	8010bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010ca8:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <SysTick_Config+0x40>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010cae:	4b04      	ldr	r3, [pc, #16]	; (8010cc0 <SysTick_Config+0x40>)
 8010cb0:	2207      	movs	r2, #7
 8010cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	e000e010 	.word	0xe000e010

08010cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f7ff ff29 	bl	8010b24 <__NVIC_SetPriorityGrouping>
}
 8010cd2:	bf00      	nop
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b086      	sub	sp, #24
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	60b9      	str	r1, [r7, #8]
 8010ce4:	607a      	str	r2, [r7, #4]
 8010ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010cec:	f7ff ff3e 	bl	8010b6c <__NVIC_GetPriorityGrouping>
 8010cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	68b9      	ldr	r1, [r7, #8]
 8010cf6:	6978      	ldr	r0, [r7, #20]
 8010cf8:	f7ff ff8e 	bl	8010c18 <NVIC_EncodePriority>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d02:	4611      	mov	r1, r2
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff ff5d 	bl	8010bc4 <__NVIC_SetPriority>
}
 8010d0a:	bf00      	nop
 8010d0c:	3718      	adds	r7, #24
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	4603      	mov	r3, r0
 8010d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff ff31 	bl	8010b88 <__NVIC_EnableIRQ>
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7ff ffa2 	bl	8010c80 <SysTick_Config>
 8010d3c:	4603      	mov	r3, r0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010d46:	b480      	push	{r7}
 8010d48:	b083      	sub	sp, #12
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d004      	beq.n	8010d64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2280      	movs	r2, #128	; 0x80
 8010d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010d60:	2301      	movs	r3, #1
 8010d62:	e00c      	b.n	8010d7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2205      	movs	r2, #5
 8010d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f022 0201 	bic.w	r2, r2, #1
 8010d7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
	...

08010d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010d98:	4b8e      	ldr	r3, [pc, #568]	; (8010fd4 <HAL_DMA_IRQHandler+0x248>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a8e      	ldr	r2, [pc, #568]	; (8010fd8 <HAL_DMA_IRQHandler+0x24c>)
 8010d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010da2:	0a9b      	lsrs	r3, r3, #10
 8010da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010db6:	2208      	movs	r2, #8
 8010db8:	409a      	lsls	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	4013      	ands	r3, r2
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d01a      	beq.n	8010df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d013      	beq.n	8010df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f022 0204 	bic.w	r2, r2, #4
 8010dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010de4:	2208      	movs	r2, #8
 8010de6:	409a      	lsls	r2, r3
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010df0:	f043 0201 	orr.w	r2, r3, #1
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	409a      	lsls	r2, r3
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4013      	ands	r3, r2
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d012      	beq.n	8010e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	695b      	ldr	r3, [r3, #20]
 8010e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00b      	beq.n	8010e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	409a      	lsls	r2, r3
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e26:	f043 0202 	orr.w	r2, r3, #2
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e32:	2204      	movs	r2, #4
 8010e34:	409a      	lsls	r2, r3
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	4013      	ands	r3, r2
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d012      	beq.n	8010e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f003 0302 	and.w	r3, r3, #2
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e50:	2204      	movs	r2, #4
 8010e52:	409a      	lsls	r2, r3
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e5c:	f043 0204 	orr.w	r2, r3, #4
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e68:	2210      	movs	r2, #16
 8010e6a:	409a      	lsls	r2, r3
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	4013      	ands	r3, r2
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d043      	beq.n	8010efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f003 0308 	and.w	r3, r3, #8
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d03c      	beq.n	8010efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e86:	2210      	movs	r2, #16
 8010e88:	409a      	lsls	r2, r3
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d018      	beq.n	8010ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d108      	bne.n	8010ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d024      	beq.n	8010efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	4798      	blx	r3
 8010eba:	e01f      	b.n	8010efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d01b      	beq.n	8010efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	4798      	blx	r3
 8010ecc:	e016      	b.n	8010efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d107      	bne.n	8010eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f022 0208 	bic.w	r2, r2, #8
 8010eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d003      	beq.n	8010efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f00:	2220      	movs	r2, #32
 8010f02:	409a      	lsls	r2, r3
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	4013      	ands	r3, r2
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 808f 	beq.w	801102c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 0310 	and.w	r3, r3, #16
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 8087 	beq.w	801102c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f22:	2220      	movs	r2, #32
 8010f24:	409a      	lsls	r2, r3
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	2b05      	cmp	r3, #5
 8010f34:	d136      	bne.n	8010fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f022 0216 	bic.w	r2, r2, #22
 8010f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	695a      	ldr	r2, [r3, #20]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d103      	bne.n	8010f66 <HAL_DMA_IRQHandler+0x1da>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d007      	beq.n	8010f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f022 0208 	bic.w	r2, r2, #8
 8010f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f7a:	223f      	movs	r2, #63	; 0x3f
 8010f7c:	409a      	lsls	r2, r3
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2201      	movs	r2, #1
 8010f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d07e      	beq.n	8011098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	4798      	blx	r3
        }
        return;
 8010fa2:	e079      	b.n	8011098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d01d      	beq.n	8010fee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d10d      	bne.n	8010fdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d031      	beq.n	801102c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	4798      	blx	r3
 8010fd0:	e02c      	b.n	801102c <HAL_DMA_IRQHandler+0x2a0>
 8010fd2:	bf00      	nop
 8010fd4:	20000000 	.word	0x20000000
 8010fd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d023      	beq.n	801102c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	4798      	blx	r3
 8010fec:	e01e      	b.n	801102c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d10f      	bne.n	801101c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f022 0210 	bic.w	r2, r2, #16
 801100a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011030:	2b00      	cmp	r3, #0
 8011032:	d032      	beq.n	801109a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011038:	f003 0301 	and.w	r3, r3, #1
 801103c:	2b00      	cmp	r3, #0
 801103e:	d022      	beq.n	8011086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2205      	movs	r2, #5
 8011044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f022 0201 	bic.w	r2, r2, #1
 8011056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	3301      	adds	r3, #1
 801105c:	60bb      	str	r3, [r7, #8]
 801105e:	697a      	ldr	r2, [r7, #20]
 8011060:	429a      	cmp	r2, r3
 8011062:	d307      	bcc.n	8011074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f003 0301 	and.w	r3, r3, #1
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1f2      	bne.n	8011058 <HAL_DMA_IRQHandler+0x2cc>
 8011072:	e000      	b.n	8011076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8011074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2201      	movs	r2, #1
 801107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801108a:	2b00      	cmp	r3, #0
 801108c:	d005      	beq.n	801109a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	4798      	blx	r3
 8011096:	e000      	b.n	801109a <HAL_DMA_IRQHandler+0x30e>
        return;
 8011098:	bf00      	nop
    }
  }
}
 801109a:	3718      	adds	r7, #24
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b089      	sub	sp, #36	; 0x24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80110aa:	2300      	movs	r3, #0
 80110ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80110ae:	2300      	movs	r3, #0
 80110b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80110b2:	2300      	movs	r3, #0
 80110b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80110b6:	2300      	movs	r3, #0
 80110b8:	61fb      	str	r3, [r7, #28]
 80110ba:	e165      	b.n	8011388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80110bc:	2201      	movs	r2, #1
 80110be:	69fb      	ldr	r3, [r7, #28]
 80110c0:	fa02 f303 	lsl.w	r3, r2, r3
 80110c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	697a      	ldr	r2, [r7, #20]
 80110cc:	4013      	ands	r3, r2
 80110ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	f040 8154 	bne.w	8011382 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	f003 0303 	and.w	r3, r3, #3
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d005      	beq.n	80110f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	d130      	bne.n	8011154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	2203      	movs	r2, #3
 80110fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011102:	43db      	mvns	r3, r3
 8011104:	69ba      	ldr	r2, [r7, #24]
 8011106:	4013      	ands	r3, r2
 8011108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68da      	ldr	r2, [r3, #12]
 801110e:	69fb      	ldr	r3, [r7, #28]
 8011110:	005b      	lsls	r3, r3, #1
 8011112:	fa02 f303 	lsl.w	r3, r2, r3
 8011116:	69ba      	ldr	r2, [r7, #24]
 8011118:	4313      	orrs	r3, r2
 801111a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	69ba      	ldr	r2, [r7, #24]
 8011120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011128:	2201      	movs	r2, #1
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	fa02 f303 	lsl.w	r3, r2, r3
 8011130:	43db      	mvns	r3, r3
 8011132:	69ba      	ldr	r2, [r7, #24]
 8011134:	4013      	ands	r3, r2
 8011136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	091b      	lsrs	r3, r3, #4
 801113e:	f003 0201 	and.w	r2, r3, #1
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	fa02 f303 	lsl.w	r3, r2, r3
 8011148:	69ba      	ldr	r2, [r7, #24]
 801114a:	4313      	orrs	r3, r2
 801114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	69ba      	ldr	r2, [r7, #24]
 8011152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	f003 0303 	and.w	r3, r3, #3
 801115c:	2b03      	cmp	r3, #3
 801115e:	d017      	beq.n	8011190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	2203      	movs	r2, #3
 801116c:	fa02 f303 	lsl.w	r3, r2, r3
 8011170:	43db      	mvns	r3, r3
 8011172:	69ba      	ldr	r2, [r7, #24]
 8011174:	4013      	ands	r3, r2
 8011176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	689a      	ldr	r2, [r3, #8]
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	fa02 f303 	lsl.w	r3, r2, r3
 8011184:	69ba      	ldr	r2, [r7, #24]
 8011186:	4313      	orrs	r3, r2
 8011188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	69ba      	ldr	r2, [r7, #24]
 801118e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	f003 0303 	and.w	r3, r3, #3
 8011198:	2b02      	cmp	r3, #2
 801119a:	d123      	bne.n	80111e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	08da      	lsrs	r2, r3, #3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3208      	adds	r2, #8
 80111a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	f003 0307 	and.w	r3, r3, #7
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	220f      	movs	r2, #15
 80111b4:	fa02 f303 	lsl.w	r3, r2, r3
 80111b8:	43db      	mvns	r3, r3
 80111ba:	69ba      	ldr	r2, [r7, #24]
 80111bc:	4013      	ands	r3, r2
 80111be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	691a      	ldr	r2, [r3, #16]
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	f003 0307 	and.w	r3, r3, #7
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	fa02 f303 	lsl.w	r3, r2, r3
 80111d0:	69ba      	ldr	r2, [r7, #24]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	08da      	lsrs	r2, r3, #3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3208      	adds	r2, #8
 80111de:	69b9      	ldr	r1, [r7, #24]
 80111e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	2203      	movs	r2, #3
 80111f0:	fa02 f303 	lsl.w	r3, r2, r3
 80111f4:	43db      	mvns	r3, r3
 80111f6:	69ba      	ldr	r2, [r7, #24]
 80111f8:	4013      	ands	r3, r2
 80111fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	f003 0203 	and.w	r2, r3, #3
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	fa02 f303 	lsl.w	r3, r2, r3
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	4313      	orrs	r3, r2
 8011210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 80ae 	beq.w	8011382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011226:	2300      	movs	r3, #0
 8011228:	60fb      	str	r3, [r7, #12]
 801122a:	4b5d      	ldr	r3, [pc, #372]	; (80113a0 <HAL_GPIO_Init+0x300>)
 801122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801122e:	4a5c      	ldr	r2, [pc, #368]	; (80113a0 <HAL_GPIO_Init+0x300>)
 8011230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011234:	6453      	str	r3, [r2, #68]	; 0x44
 8011236:	4b5a      	ldr	r3, [pc, #360]	; (80113a0 <HAL_GPIO_Init+0x300>)
 8011238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801123e:	60fb      	str	r3, [r7, #12]
 8011240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011242:	4a58      	ldr	r2, [pc, #352]	; (80113a4 <HAL_GPIO_Init+0x304>)
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	089b      	lsrs	r3, r3, #2
 8011248:	3302      	adds	r3, #2
 801124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	f003 0303 	and.w	r3, r3, #3
 8011256:	009b      	lsls	r3, r3, #2
 8011258:	220f      	movs	r2, #15
 801125a:	fa02 f303 	lsl.w	r3, r2, r3
 801125e:	43db      	mvns	r3, r3
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	4013      	ands	r3, r2
 8011264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4a4f      	ldr	r2, [pc, #316]	; (80113a8 <HAL_GPIO_Init+0x308>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d025      	beq.n	80112ba <HAL_GPIO_Init+0x21a>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4a4e      	ldr	r2, [pc, #312]	; (80113ac <HAL_GPIO_Init+0x30c>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d01f      	beq.n	80112b6 <HAL_GPIO_Init+0x216>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4a4d      	ldr	r2, [pc, #308]	; (80113b0 <HAL_GPIO_Init+0x310>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d019      	beq.n	80112b2 <HAL_GPIO_Init+0x212>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4a4c      	ldr	r2, [pc, #304]	; (80113b4 <HAL_GPIO_Init+0x314>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d013      	beq.n	80112ae <HAL_GPIO_Init+0x20e>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4a4b      	ldr	r2, [pc, #300]	; (80113b8 <HAL_GPIO_Init+0x318>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d00d      	beq.n	80112aa <HAL_GPIO_Init+0x20a>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4a4a      	ldr	r2, [pc, #296]	; (80113bc <HAL_GPIO_Init+0x31c>)
 8011292:	4293      	cmp	r3, r2
 8011294:	d007      	beq.n	80112a6 <HAL_GPIO_Init+0x206>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	4a49      	ldr	r2, [pc, #292]	; (80113c0 <HAL_GPIO_Init+0x320>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d101      	bne.n	80112a2 <HAL_GPIO_Init+0x202>
 801129e:	2306      	movs	r3, #6
 80112a0:	e00c      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112a2:	2307      	movs	r3, #7
 80112a4:	e00a      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112a6:	2305      	movs	r3, #5
 80112a8:	e008      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112aa:	2304      	movs	r3, #4
 80112ac:	e006      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112ae:	2303      	movs	r3, #3
 80112b0:	e004      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112b2:	2302      	movs	r3, #2
 80112b4:	e002      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112b6:	2301      	movs	r3, #1
 80112b8:	e000      	b.n	80112bc <HAL_GPIO_Init+0x21c>
 80112ba:	2300      	movs	r3, #0
 80112bc:	69fa      	ldr	r2, [r7, #28]
 80112be:	f002 0203 	and.w	r2, r2, #3
 80112c2:	0092      	lsls	r2, r2, #2
 80112c4:	4093      	lsls	r3, r2
 80112c6:	69ba      	ldr	r2, [r7, #24]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80112cc:	4935      	ldr	r1, [pc, #212]	; (80113a4 <HAL_GPIO_Init+0x304>)
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	089b      	lsrs	r3, r3, #2
 80112d2:	3302      	adds	r3, #2
 80112d4:	69ba      	ldr	r2, [r7, #24]
 80112d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80112da:	4b3a      	ldr	r3, [pc, #232]	; (80113c4 <HAL_GPIO_Init+0x324>)
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	43db      	mvns	r3, r3
 80112e4:	69ba      	ldr	r2, [r7, #24]
 80112e6:	4013      	ands	r3, r2
 80112e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d003      	beq.n	80112fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80112f6:	69ba      	ldr	r2, [r7, #24]
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80112fe:	4a31      	ldr	r2, [pc, #196]	; (80113c4 <HAL_GPIO_Init+0x324>)
 8011300:	69bb      	ldr	r3, [r7, #24]
 8011302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011304:	4b2f      	ldr	r3, [pc, #188]	; (80113c4 <HAL_GPIO_Init+0x324>)
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	43db      	mvns	r3, r3
 801130e:	69ba      	ldr	r2, [r7, #24]
 8011310:	4013      	ands	r3, r2
 8011312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801131c:	2b00      	cmp	r3, #0
 801131e:	d003      	beq.n	8011328 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	4313      	orrs	r3, r2
 8011326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011328:	4a26      	ldr	r2, [pc, #152]	; (80113c4 <HAL_GPIO_Init+0x324>)
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801132e:	4b25      	ldr	r3, [pc, #148]	; (80113c4 <HAL_GPIO_Init+0x324>)
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	43db      	mvns	r3, r3
 8011338:	69ba      	ldr	r2, [r7, #24]
 801133a:	4013      	ands	r3, r2
 801133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011346:	2b00      	cmp	r3, #0
 8011348:	d003      	beq.n	8011352 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 801134a:	69ba      	ldr	r2, [r7, #24]
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	4313      	orrs	r3, r2
 8011350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011352:	4a1c      	ldr	r2, [pc, #112]	; (80113c4 <HAL_GPIO_Init+0x324>)
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011358:	4b1a      	ldr	r3, [pc, #104]	; (80113c4 <HAL_GPIO_Init+0x324>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	43db      	mvns	r3, r3
 8011362:	69ba      	ldr	r2, [r7, #24]
 8011364:	4013      	ands	r3, r2
 8011366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011370:	2b00      	cmp	r3, #0
 8011372:	d003      	beq.n	801137c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8011374:	69ba      	ldr	r2, [r7, #24]
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	4313      	orrs	r3, r2
 801137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801137c:	4a11      	ldr	r2, [pc, #68]	; (80113c4 <HAL_GPIO_Init+0x324>)
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	3301      	adds	r3, #1
 8011386:	61fb      	str	r3, [r7, #28]
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	2b0f      	cmp	r3, #15
 801138c:	f67f ae96 	bls.w	80110bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011390:	bf00      	nop
 8011392:	bf00      	nop
 8011394:	3724      	adds	r7, #36	; 0x24
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	40023800 	.word	0x40023800
 80113a4:	40013800 	.word	0x40013800
 80113a8:	40020000 	.word	0x40020000
 80113ac:	40020400 	.word	0x40020400
 80113b0:	40020800 	.word	0x40020800
 80113b4:	40020c00 	.word	0x40020c00
 80113b8:	40021000 	.word	0x40021000
 80113bc:	40021400 	.word	0x40021400
 80113c0:	40021800 	.word	0x40021800
 80113c4:	40013c00 	.word	0x40013c00

080113c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	460b      	mov	r3, r1
 80113d2:	807b      	strh	r3, [r7, #2]
 80113d4:	4613      	mov	r3, r2
 80113d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80113d8:	787b      	ldrb	r3, [r7, #1]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80113de:	887a      	ldrh	r2, [r7, #2]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80113e4:	e003      	b.n	80113ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80113e6:	887b      	ldrh	r3, [r7, #2]
 80113e8:	041a      	lsls	r2, r3, #16
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	619a      	str	r2, [r3, #24]
}
 80113ee:	bf00      	nop
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80113fa:	b480      	push	{r7}
 80113fc:	b085      	sub	sp, #20
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	460b      	mov	r3, r1
 8011404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801140c:	887a      	ldrh	r2, [r7, #2]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	4013      	ands	r3, r2
 8011412:	041a      	lsls	r2, r3, #16
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	43d9      	mvns	r1, r3
 8011418:	887b      	ldrh	r3, [r7, #2]
 801141a:	400b      	ands	r3, r1
 801141c:	431a      	orrs	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	619a      	str	r2, [r3, #24]
}
 8011422:	bf00      	nop
 8011424:	3714      	adds	r7, #20
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr

0801142e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801142e:	b590      	push	{r4, r7, lr}
 8011430:	b08d      	sub	sp, #52	; 0x34
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4618      	mov	r0, r3
 8011446:	f003 fd96 	bl	8014f76 <USB_GetMode>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	f040 84b7 	bne.w	8011dc0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4618      	mov	r0, r3
 8011458:	f003 fcfa 	bl	8014e50 <USB_ReadInterrupts>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 84ad 	beq.w	8011dbe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	0a1b      	lsrs	r3, r3, #8
 801146e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4618      	mov	r0, r3
 801147e:	f003 fce7 	bl	8014e50 <USB_ReadInterrupts>
 8011482:	4603      	mov	r3, r0
 8011484:	f003 0302 	and.w	r3, r3, #2
 8011488:	2b02      	cmp	r3, #2
 801148a:	d107      	bne.n	801149c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	695a      	ldr	r2, [r3, #20]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f002 0202 	and.w	r2, r2, #2
 801149a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f003 fcd5 	bl	8014e50 <USB_ReadInterrupts>
 80114a6:	4603      	mov	r3, r0
 80114a8:	f003 0310 	and.w	r3, r3, #16
 80114ac:	2b10      	cmp	r3, #16
 80114ae:	d161      	bne.n	8011574 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	699a      	ldr	r2, [r3, #24]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f022 0210 	bic.w	r2, r2, #16
 80114be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	6a1b      	ldr	r3, [r3, #32]
 80114c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	f003 020f 	and.w	r2, r3, #15
 80114cc:	4613      	mov	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	4413      	add	r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	4413      	add	r3, r2
 80114dc:	3304      	adds	r3, #4
 80114de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	0c5b      	lsrs	r3, r3, #17
 80114e4:	f003 030f 	and.w	r3, r3, #15
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d124      	bne.n	8011536 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80114f2:	4013      	ands	r3, r2
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d035      	beq.n	8011564 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	091b      	lsrs	r3, r3, #4
 8011500:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011506:	b29b      	uxth	r3, r3
 8011508:	461a      	mov	r2, r3
 801150a:	6a38      	ldr	r0, [r7, #32]
 801150c:	f003 fb4e 	bl	8014bac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	691a      	ldr	r2, [r3, #16]
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	091b      	lsrs	r3, r3, #4
 8011518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801151c:	441a      	add	r2, r3
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	6a1a      	ldr	r2, [r3, #32]
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	091b      	lsrs	r3, r3, #4
 801152a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801152e:	441a      	add	r2, r3
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	621a      	str	r2, [r3, #32]
 8011534:	e016      	b.n	8011564 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	0c5b      	lsrs	r3, r3, #17
 801153a:	f003 030f 	and.w	r3, r3, #15
 801153e:	2b06      	cmp	r3, #6
 8011540:	d110      	bne.n	8011564 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011548:	2208      	movs	r2, #8
 801154a:	4619      	mov	r1, r3
 801154c:	6a38      	ldr	r0, [r7, #32]
 801154e:	f003 fb2d 	bl	8014bac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	6a1a      	ldr	r2, [r3, #32]
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	091b      	lsrs	r3, r3, #4
 801155a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801155e:	441a      	add	r2, r3
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	699a      	ldr	r2, [r3, #24]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f042 0210 	orr.w	r2, r2, #16
 8011572:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	f003 fc69 	bl	8014e50 <USB_ReadInterrupts>
 801157e:	4603      	mov	r3, r0
 8011580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011584:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011588:	f040 80a7 	bne.w	80116da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 801158c:	2300      	movs	r3, #0
 801158e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4618      	mov	r0, r3
 8011596:	f003 fc6e 	bl	8014e76 <USB_ReadDevAllOutEpInterrupt>
 801159a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801159c:	e099      	b.n	80116d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	f003 0301 	and.w	r3, r3, #1
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 808e 	beq.w	80116c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115b0:	b2d2      	uxtb	r2, r2
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f003 fc92 	bl	8014ede <USB_ReadDevOutEPInterrupt>
 80115ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f003 0301 	and.w	r3, r3, #1
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00c      	beq.n	80115e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80115c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c8:	015a      	lsls	r2, r3, #5
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	4413      	add	r3, r2
 80115ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115d2:	461a      	mov	r2, r3
 80115d4:	2301      	movs	r3, #1
 80115d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80115d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fe8e 	bl	80122fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f003 0308 	and.w	r3, r3, #8
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00c      	beq.n	8011604 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	015a      	lsls	r2, r3, #5
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	4413      	add	r3, r2
 80115f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115f6:	461a      	mov	r2, r3
 80115f8:	2308      	movs	r3, #8
 80115fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80115fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 ff64 	bl	80124cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	f003 0310 	and.w	r3, r3, #16
 801160a:	2b00      	cmp	r3, #0
 801160c:	d008      	beq.n	8011620 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011610:	015a      	lsls	r2, r3, #5
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	4413      	add	r3, r2
 8011616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801161a:	461a      	mov	r2, r3
 801161c:	2310      	movs	r3, #16
 801161e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	f003 0302 	and.w	r3, r3, #2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d030      	beq.n	801168c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011632:	2b80      	cmp	r3, #128	; 0x80
 8011634:	d109      	bne.n	801164a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	69fa      	ldr	r2, [r7, #28]
 8011640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011648:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 801164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801164c:	4613      	mov	r3, r2
 801164e:	00db      	lsls	r3, r3, #3
 8011650:	4413      	add	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	4413      	add	r3, r2
 801165c:	3304      	adds	r3, #4
 801165e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	78db      	ldrb	r3, [r3, #3]
 8011664:	2b01      	cmp	r3, #1
 8011666:	d108      	bne.n	801167a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	2200      	movs	r2, #0
 801166c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011670:	b2db      	uxtb	r3, r3
 8011672:	4619      	mov	r1, r3
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f004 ffd3 	bl	8016620 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 801167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	4413      	add	r3, r2
 8011682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011686:	461a      	mov	r2, r3
 8011688:	2302      	movs	r3, #2
 801168a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	d008      	beq.n	80116a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011698:	015a      	lsls	r2, r3, #5
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	4413      	add	r3, r2
 801169e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116a2:	461a      	mov	r2, r3
 80116a4:	2320      	movs	r3, #32
 80116a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d009      	beq.n	80116c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80116b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b4:	015a      	lsls	r2, r3, #5
 80116b6:	69fb      	ldr	r3, [r7, #28]
 80116b8:	4413      	add	r3, r2
 80116ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116be:	461a      	mov	r2, r3
 80116c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80116c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80116c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c8:	3301      	adds	r3, #1
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	085b      	lsrs	r3, r3, #1
 80116d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80116d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f47f af62 	bne.w	801159e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4618      	mov	r0, r3
 80116e0:	f003 fbb6 	bl	8014e50 <USB_ReadInterrupts>
 80116e4:	4603      	mov	r3, r0
 80116e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80116ee:	f040 80db 	bne.w	80118a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f003 fbd7 	bl	8014eaa <USB_ReadDevAllInEpInterrupt>
 80116fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80116fe:	2300      	movs	r3, #0
 8011700:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8011702:	e0cd      	b.n	80118a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8011704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011706:	f003 0301 	and.w	r3, r3, #1
 801170a:	2b00      	cmp	r3, #0
 801170c:	f000 80c2 	beq.w	8011894 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011716:	b2d2      	uxtb	r2, r2
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f003 fbfd 	bl	8014f1a <USB_ReadDevInEPInterrupt>
 8011720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	f003 0301 	and.w	r3, r3, #1
 8011728:	2b00      	cmp	r3, #0
 801172a:	d057      	beq.n	80117dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172e:	f003 030f 	and.w	r3, r3, #15
 8011732:	2201      	movs	r2, #1
 8011734:	fa02 f303 	lsl.w	r3, r2, r3
 8011738:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	43db      	mvns	r3, r3
 8011746:	69f9      	ldr	r1, [r7, #28]
 8011748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801174c:	4013      	ands	r3, r2
 801174e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	015a      	lsls	r2, r3, #5
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	4413      	add	r3, r2
 8011758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801175c:	461a      	mov	r2, r3
 801175e:	2301      	movs	r3, #1
 8011760:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	691b      	ldr	r3, [r3, #16]
 8011766:	2b01      	cmp	r3, #1
 8011768:	d132      	bne.n	80117d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801176a:	6879      	ldr	r1, [r7, #4]
 801176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176e:	4613      	mov	r3, r2
 8011770:	00db      	lsls	r3, r3, #3
 8011772:	4413      	add	r3, r2
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	440b      	add	r3, r1
 8011778:	334c      	adds	r3, #76	; 0x4c
 801177a:	6819      	ldr	r1, [r3, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011780:	4613      	mov	r3, r2
 8011782:	00db      	lsls	r3, r3, #3
 8011784:	4413      	add	r3, r2
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4403      	add	r3, r0
 801178a:	3348      	adds	r3, #72	; 0x48
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4419      	add	r1, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011794:	4613      	mov	r3, r2
 8011796:	00db      	lsls	r3, r3, #3
 8011798:	4413      	add	r3, r2
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	4403      	add	r3, r0
 801179e:	334c      	adds	r3, #76	; 0x4c
 80117a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d113      	bne.n	80117d0 <HAL_PCD_IRQHandler+0x3a2>
 80117a8:	6879      	ldr	r1, [r7, #4]
 80117aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117ac:	4613      	mov	r3, r2
 80117ae:	00db      	lsls	r3, r3, #3
 80117b0:	4413      	add	r3, r2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	440b      	add	r3, r1
 80117b6:	3354      	adds	r3, #84	; 0x54
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d108      	bne.n	80117d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6818      	ldr	r0, [r3, #0]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80117c8:	461a      	mov	r2, r3
 80117ca:	2101      	movs	r1, #1
 80117cc:	f003 fc04 	bl	8014fd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	4619      	mov	r1, r3
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f004 fe9e 	bl	8016518 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	f003 0308 	and.w	r3, r3, #8
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d008      	beq.n	80117f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e8:	015a      	lsls	r2, r3, #5
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	4413      	add	r3, r2
 80117ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f2:	461a      	mov	r2, r3
 80117f4:	2308      	movs	r3, #8
 80117f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	f003 0310 	and.w	r3, r3, #16
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d008      	beq.n	8011814 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8011802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011804:	015a      	lsls	r2, r3, #5
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	4413      	add	r3, r2
 801180a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801180e:	461a      	mov	r2, r3
 8011810:	2310      	movs	r3, #16
 8011812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801181a:	2b00      	cmp	r3, #0
 801181c:	d008      	beq.n	8011830 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	015a      	lsls	r2, r3, #5
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	4413      	add	r3, r2
 8011826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801182a:	461a      	mov	r2, r3
 801182c:	2340      	movs	r3, #64	; 0x40
 801182e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	f003 0302 	and.w	r3, r3, #2
 8011836:	2b00      	cmp	r3, #0
 8011838:	d023      	beq.n	8011882 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 801183a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801183c:	6a38      	ldr	r0, [r7, #32]
 801183e:	f002 fc4d 	bl	80140dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8011842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011844:	4613      	mov	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4413      	add	r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	3338      	adds	r3, #56	; 0x38
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	4413      	add	r3, r2
 8011852:	3304      	adds	r3, #4
 8011854:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	78db      	ldrb	r3, [r3, #3]
 801185a:	2b01      	cmp	r3, #1
 801185c:	d108      	bne.n	8011870 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	2200      	movs	r2, #0
 8011862:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	b2db      	uxtb	r3, r3
 8011868:	4619      	mov	r1, r3
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f004 feea 	bl	8016644 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8011870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011872:	015a      	lsls	r2, r3, #5
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	4413      	add	r3, r2
 8011878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801187c:	461a      	mov	r2, r3
 801187e:	2302      	movs	r3, #2
 8011880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011888:	2b00      	cmp	r3, #0
 801188a:	d003      	beq.n	8011894 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801188c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f000 fca6 	bl	80121e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	3301      	adds	r3, #1
 8011898:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189c:	085b      	lsrs	r3, r3, #1
 801189e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80118a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f47f af2e 	bne.w	8011704 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f003 facf 	bl	8014e50 <USB_ReadInterrupts>
 80118b2:	4603      	mov	r3, r0
 80118b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80118b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118bc:	d122      	bne.n	8011904 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	69fa      	ldr	r2, [r7, #28]
 80118c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80118cc:	f023 0301 	bic.w	r3, r3, #1
 80118d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d108      	bne.n	80118ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80118e4:	2100      	movs	r1, #0
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f004 ffcc 	bl	8016884 <HAL_PCDEx_LPM_Callback>
 80118ec:	e002      	b.n	80118f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f004 fe88 	bl	8016604 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	695a      	ldr	r2, [r3, #20]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8011902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4618      	mov	r0, r3
 801190a:	f003 faa1 	bl	8014e50 <USB_ReadInterrupts>
 801190e:	4603      	mov	r3, r0
 8011910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011918:	d112      	bne.n	8011940 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	f003 0301 	and.w	r3, r3, #1
 8011926:	2b01      	cmp	r3, #1
 8011928:	d102      	bne.n	8011930 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f004 fe44 	bl	80165b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	695a      	ldr	r2, [r3, #20]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801193e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4618      	mov	r0, r3
 8011946:	f003 fa83 	bl	8014e50 <USB_ReadInterrupts>
 801194a:	4603      	mov	r3, r0
 801194c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011954:	d121      	bne.n	801199a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	695a      	ldr	r2, [r3, #20]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8011964:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801196c:	2b00      	cmp	r3, #0
 801196e:	d111      	bne.n	8011994 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801197e:	089b      	lsrs	r3, r3, #2
 8011980:	f003 020f 	and.w	r2, r3, #15
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801198a:	2101      	movs	r1, #1
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f004 ff79 	bl	8016884 <HAL_PCDEx_LPM_Callback>
 8011992:	e002      	b.n	801199a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f004 fe0f 	bl	80165b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4618      	mov	r0, r3
 80119a0:	f003 fa56 	bl	8014e50 <USB_ReadInterrupts>
 80119a4:	4603      	mov	r3, r0
 80119a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80119aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119ae:	f040 80b7 	bne.w	8011b20 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	69fa      	ldr	r2, [r7, #28]
 80119bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80119c0:	f023 0301 	bic.w	r3, r3, #1
 80119c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	2110      	movs	r1, #16
 80119cc:	4618      	mov	r0, r3
 80119ce:	f002 fb85 	bl	80140dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80119d2:	2300      	movs	r3, #0
 80119d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d6:	e046      	b.n	8011a66 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80119d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119da:	015a      	lsls	r2, r3, #5
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	4413      	add	r3, r2
 80119e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e4:	461a      	mov	r2, r3
 80119e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80119ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	015a      	lsls	r2, r3, #5
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	4413      	add	r3, r2
 80119f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119fc:	0151      	lsls	r1, r2, #5
 80119fe:	69fa      	ldr	r2, [r7, #28]
 8011a00:	440a      	add	r2, r1
 8011a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	015a      	lsls	r2, r3, #5
 8011a10:	69fb      	ldr	r3, [r7, #28]
 8011a12:	4413      	add	r3, r2
 8011a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a22:	015a      	lsls	r2, r3, #5
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	4413      	add	r3, r2
 8011a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a30:	0151      	lsls	r1, r2, #5
 8011a32:	69fa      	ldr	r2, [r7, #28]
 8011a34:	440a      	add	r2, r1
 8011a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a42:	015a      	lsls	r2, r3, #5
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	4413      	add	r3, r2
 8011a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a50:	0151      	lsls	r1, r2, #5
 8011a52:	69fa      	ldr	r2, [r7, #28]
 8011a54:	440a      	add	r2, r1
 8011a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011a5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	3301      	adds	r3, #1
 8011a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d3b3      	bcc.n	80119d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a76:	69db      	ldr	r3, [r3, #28]
 8011a78:	69fa      	ldr	r2, [r7, #28]
 8011a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011a7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011a82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d016      	beq.n	8011aba <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a96:	69fa      	ldr	r2, [r7, #28]
 8011a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011a9c:	f043 030b 	orr.w	r3, r3, #11
 8011aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aac:	69fa      	ldr	r2, [r7, #28]
 8011aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ab2:	f043 030b 	orr.w	r3, r3, #11
 8011ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8011ab8:	e015      	b.n	8011ae6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ac0:	695b      	ldr	r3, [r3, #20]
 8011ac2:	69fa      	ldr	r2, [r7, #28]
 8011ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011acc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8011ad0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad8:	691b      	ldr	r3, [r3, #16]
 8011ada:	69fa      	ldr	r2, [r7, #28]
 8011adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ae0:	f043 030b 	orr.w	r3, r3, #11
 8011ae4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	69fa      	ldr	r2, [r7, #28]
 8011af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011af4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011af8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6818      	ldr	r0, [r3, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	691b      	ldr	r3, [r3, #16]
 8011b02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	f003 fa64 	bl	8014fd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	695a      	ldr	r2, [r3, #20]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f003 f993 	bl	8014e50 <USB_ReadInterrupts>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b34:	d124      	bne.n	8011b80 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f003 fa29 	bl	8014f92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f002 fafd 	bl	8014144 <USB_GetDevSpeed>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681c      	ldr	r4, [r3, #0]
 8011b56:	f000 fde5 	bl	8012724 <HAL_RCC_GetHCLKFreq>
 8011b5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	461a      	mov	r2, r3
 8011b64:	4620      	mov	r0, r4
 8011b66:	f002 fa17 	bl	8013f98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f004 fcfc 	bl	8016568 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	695a      	ldr	r2, [r3, #20]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f003 f963 	bl	8014e50 <USB_ReadInterrupts>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	f003 0308 	and.w	r3, r3, #8
 8011b90:	2b08      	cmp	r3, #8
 8011b92:	d10a      	bne.n	8011baa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f004 fcd9 	bl	801654c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	695a      	ldr	r2, [r3, #20]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f002 0208 	and.w	r2, r2, #8
 8011ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f003 f94e 	bl	8014e50 <USB_ReadInterrupts>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bba:	2b80      	cmp	r3, #128	; 0x80
 8011bbc:	d122      	bne.n	8011c04 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	699b      	ldr	r3, [r3, #24]
 8011bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011bca:	2301      	movs	r3, #1
 8011bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8011bce:	e014      	b.n	8011bfa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011bd0:	6879      	ldr	r1, [r7, #4]
 8011bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	4413      	add	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d105      	bne.n	8011bf4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8011be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	4619      	mov	r1, r3
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 fac5 	bl	801217e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d3e5      	bcc.n	8011bd0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f003 f921 	bl	8014e50 <USB_ReadInterrupts>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c18:	d13b      	bne.n	8011c92 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8011c1e:	e02b      	b.n	8011c78 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8011c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c22:	015a      	lsls	r2, r3, #5
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	4413      	add	r3, r2
 8011c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c34:	4613      	mov	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	4413      	add	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	440b      	add	r3, r1
 8011c3e:	3340      	adds	r3, #64	; 0x40
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d115      	bne.n	8011c72 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8011c46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	da12      	bge.n	8011c72 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8011c4c:	6879      	ldr	r1, [r7, #4]
 8011c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c50:	4613      	mov	r3, r2
 8011c52:	00db      	lsls	r3, r3, #3
 8011c54:	4413      	add	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	440b      	add	r3, r1
 8011c5a:	333f      	adds	r3, #63	; 0x3f
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fa86 	bl	801217e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	3301      	adds	r3, #1
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d3ce      	bcc.n	8011c20 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	695a      	ldr	r2, [r3, #20]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f003 f8da 	bl	8014e50 <USB_ReadInterrupts>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ca6:	d155      	bne.n	8011d54 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011ca8:	2301      	movs	r3, #1
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
 8011cac:	e045      	b.n	8011d3a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb0:	015a      	lsls	r2, r3, #5
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011cbe:	6879      	ldr	r1, [r7, #4]
 8011cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	4413      	add	r3, r2
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	440b      	add	r3, r1
 8011ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d12e      	bne.n	8011d34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011cd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	da2b      	bge.n	8011d34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8011ce8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d121      	bne.n	8011d34 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011cf0:	6879      	ldr	r1, [r7, #4]
 8011cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	4413      	add	r3, r2
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	440b      	add	r3, r1
 8011cfe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011d02:	2201      	movs	r2, #1
 8011d04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	699b      	ldr	r3, [r3, #24]
 8011d0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	695b      	ldr	r3, [r3, #20]
 8011d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d10a      	bne.n	8011d34 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	69fa      	ldr	r2, [r7, #28]
 8011d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011d30:	6053      	str	r3, [r2, #4]
            break;
 8011d32:	e007      	b.n	8011d44 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	3301      	adds	r3, #1
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d3b4      	bcc.n	8011cae <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	695a      	ldr	r2, [r3, #20]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8011d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f003 f879 	bl	8014e50 <USB_ReadInterrupts>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d68:	d10a      	bne.n	8011d80 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f004 fc7c 	bl	8016668 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	695a      	ldr	r2, [r3, #20]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f003 f863 	bl	8014e50 <USB_ReadInterrupts>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	f003 0304 	and.w	r3, r3, #4
 8011d90:	2b04      	cmp	r3, #4
 8011d92:	d115      	bne.n	8011dc0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011d9c:	69bb      	ldr	r3, [r7, #24]
 8011d9e:	f003 0304 	and.w	r3, r3, #4
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d002      	beq.n	8011dac <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f004 fc6c 	bl	8016684 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6859      	ldr	r1, [r3, #4]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	69ba      	ldr	r2, [r7, #24]
 8011db8:	430a      	orrs	r2, r1
 8011dba:	605a      	str	r2, [r3, #4]
 8011dbc:	e000      	b.n	8011dc0 <HAL_PCD_IRQHandler+0x992>
      return;
 8011dbe:	bf00      	nop
    }
  }
}
 8011dc0:	3734      	adds	r7, #52	; 0x34
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd90      	pop	{r4, r7, pc}

08011dc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b082      	sub	sp, #8
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	460b      	mov	r3, r1
 8011dd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d101      	bne.n	8011de0 <HAL_PCD_SetAddress+0x1a>
 8011ddc:	2302      	movs	r3, #2
 8011dde:	e013      	b.n	8011e08 <HAL_PCD_SetAddress+0x42>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	78fa      	ldrb	r2, [r7, #3]
 8011dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	78fa      	ldrb	r2, [r7, #3]
 8011df6:	4611      	mov	r1, r2
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f003 f803 	bl	8014e04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	4608      	mov	r0, r1
 8011e1a:	4611      	mov	r1, r2
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	4603      	mov	r3, r0
 8011e20:	70fb      	strb	r3, [r7, #3]
 8011e22:	460b      	mov	r3, r1
 8011e24:	803b      	strh	r3, [r7, #0]
 8011e26:	4613      	mov	r3, r2
 8011e28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	da0f      	bge.n	8011e56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011e36:	78fb      	ldrb	r3, [r7, #3]
 8011e38:	f003 020f 	and.w	r2, r3, #15
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	00db      	lsls	r3, r3, #3
 8011e40:	4413      	add	r3, r2
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	3338      	adds	r3, #56	; 0x38
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	4413      	add	r3, r2
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2201      	movs	r2, #1
 8011e52:	705a      	strb	r2, [r3, #1]
 8011e54:	e00f      	b.n	8011e76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011e56:	78fb      	ldrb	r3, [r7, #3]
 8011e58:	f003 020f 	and.w	r2, r3, #15
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	00db      	lsls	r3, r3, #3
 8011e60:	4413      	add	r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	3304      	adds	r3, #4
 8011e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2200      	movs	r2, #0
 8011e74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011e76:	78fb      	ldrb	r3, [r7, #3]
 8011e78:	f003 030f 	and.w	r3, r3, #15
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011e82:	883a      	ldrh	r2, [r7, #0]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	78ba      	ldrb	r2, [r7, #2]
 8011e8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	785b      	ldrb	r3, [r3, #1]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d004      	beq.n	8011ea0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011ea0:	78bb      	ldrb	r3, [r7, #2]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d102      	bne.n	8011eac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d101      	bne.n	8011eba <HAL_PCD_EP_Open+0xaa>
 8011eb6:	2302      	movs	r3, #2
 8011eb8:	e00e      	b.n	8011ed8 <HAL_PCD_EP_Open+0xc8>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	68f9      	ldr	r1, [r7, #12]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f002 f960 	bl	801418e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8011ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3710      	adds	r7, #16
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	607a      	str	r2, [r7, #4]
 8011eea:	603b      	str	r3, [r7, #0]
 8011eec:	460b      	mov	r3, r1
 8011eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011ef0:	7afb      	ldrb	r3, [r7, #11]
 8011ef2:	f003 020f 	and.w	r2, r3, #15
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	00db      	lsls	r3, r3, #3
 8011efa:	4413      	add	r3, r2
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	4413      	add	r3, r2
 8011f06:	3304      	adds	r3, #4
 8011f08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	683a      	ldr	r2, [r7, #0]
 8011f14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011f22:	7afb      	ldrb	r3, [r7, #11]
 8011f24:	f003 030f 	and.w	r3, r3, #15
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d102      	bne.n	8011f3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011f3c:	7afb      	ldrb	r3, [r7, #11]
 8011f3e:	f003 030f 	and.w	r3, r3, #15
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d109      	bne.n	8011f5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6818      	ldr	r0, [r3, #0]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	461a      	mov	r2, r3
 8011f52:	6979      	ldr	r1, [r7, #20]
 8011f54:	f002 fbea 	bl	801472c <USB_EP0StartXfer>
 8011f58:	e008      	b.n	8011f6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	6818      	ldr	r0, [r3, #0]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	691b      	ldr	r3, [r3, #16]
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	461a      	mov	r2, r3
 8011f66:	6979      	ldr	r1, [r7, #20]
 8011f68:	f002 f998 	bl	801429c <USB_EPStartXfer>
  }

  return HAL_OK;
 8011f6c:	2300      	movs	r3, #0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3718      	adds	r7, #24
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b086      	sub	sp, #24
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	60f8      	str	r0, [r7, #12]
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	603b      	str	r3, [r7, #0]
 8011f82:	460b      	mov	r3, r1
 8011f84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f86:	7afb      	ldrb	r3, [r7, #11]
 8011f88:	f003 020f 	and.w	r2, r3, #15
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	00db      	lsls	r3, r3, #3
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	3338      	adds	r3, #56	; 0x38
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	4413      	add	r3, r2
 8011f9a:	3304      	adds	r3, #4
 8011f9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2200      	movs	r2, #0
 8011fae:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011fb6:	7afb      	ldrb	r3, [r7, #11]
 8011fb8:	f003 030f 	and.w	r3, r3, #15
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	691b      	ldr	r3, [r3, #16]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d102      	bne.n	8011fd0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011fd0:	7afb      	ldrb	r3, [r7, #11]
 8011fd2:	f003 030f 	and.w	r3, r3, #15
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d109      	bne.n	8011fee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	6818      	ldr	r0, [r3, #0]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	6979      	ldr	r1, [r7, #20]
 8011fe8:	f002 fba0 	bl	801472c <USB_EP0StartXfer>
 8011fec:	e008      	b.n	8012000 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6818      	ldr	r0, [r3, #0]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	6979      	ldr	r1, [r7, #20]
 8011ffc:	f002 f94e 	bl	801429c <USB_EPStartXfer>
  }

  return HAL_OK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3718      	adds	r7, #24
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801200a:	b580      	push	{r7, lr}
 801200c:	b084      	sub	sp, #16
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
 8012012:	460b      	mov	r3, r1
 8012014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012016:	78fb      	ldrb	r3, [r7, #3]
 8012018:	f003 020f 	and.w	r2, r3, #15
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	429a      	cmp	r2, r3
 8012022:	d901      	bls.n	8012028 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012024:	2301      	movs	r3, #1
 8012026:	e050      	b.n	80120ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801202c:	2b00      	cmp	r3, #0
 801202e:	da0f      	bge.n	8012050 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012030:	78fb      	ldrb	r3, [r7, #3]
 8012032:	f003 020f 	and.w	r2, r3, #15
 8012036:	4613      	mov	r3, r2
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	3338      	adds	r3, #56	; 0x38
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	4413      	add	r3, r2
 8012044:	3304      	adds	r3, #4
 8012046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2201      	movs	r2, #1
 801204c:	705a      	strb	r2, [r3, #1]
 801204e:	e00d      	b.n	801206c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012050:	78fa      	ldrb	r2, [r7, #3]
 8012052:	4613      	mov	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	4413      	add	r3, r2
 8012058:	009b      	lsls	r3, r3, #2
 801205a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	4413      	add	r3, r2
 8012062:	3304      	adds	r3, #4
 8012064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2200      	movs	r2, #0
 801206a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2201      	movs	r2, #1
 8012070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012072:	78fb      	ldrb	r3, [r7, #3]
 8012074:	f003 030f 	and.w	r3, r3, #15
 8012078:	b2da      	uxtb	r2, r3
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012084:	2b01      	cmp	r3, #1
 8012086:	d101      	bne.n	801208c <HAL_PCD_EP_SetStall+0x82>
 8012088:	2302      	movs	r3, #2
 801208a:	e01e      	b.n	80120ca <HAL_PCD_EP_SetStall+0xc0>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	68f9      	ldr	r1, [r7, #12]
 801209a:	4618      	mov	r0, r3
 801209c:	f002 fdde 	bl	8014c5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	f003 030f 	and.w	r3, r3, #15
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10a      	bne.n	80120c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	b2d9      	uxtb	r1, r3
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80120ba:	461a      	mov	r2, r3
 80120bc:	f002 ff8c 	bl	8014fd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80120c8:	2300      	movs	r3, #0
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b084      	sub	sp, #16
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	460b      	mov	r3, r1
 80120dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80120de:	78fb      	ldrb	r3, [r7, #3]
 80120e0:	f003 020f 	and.w	r2, r3, #15
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d901      	bls.n	80120f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80120ec:	2301      	movs	r3, #1
 80120ee:	e042      	b.n	8012176 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80120f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	da0f      	bge.n	8012118 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80120f8:	78fb      	ldrb	r3, [r7, #3]
 80120fa:	f003 020f 	and.w	r2, r3, #15
 80120fe:	4613      	mov	r3, r2
 8012100:	00db      	lsls	r3, r3, #3
 8012102:	4413      	add	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	3338      	adds	r3, #56	; 0x38
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	4413      	add	r3, r2
 801210c:	3304      	adds	r3, #4
 801210e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2201      	movs	r2, #1
 8012114:	705a      	strb	r2, [r3, #1]
 8012116:	e00f      	b.n	8012138 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012118:	78fb      	ldrb	r3, [r7, #3]
 801211a:	f003 020f 	and.w	r2, r3, #15
 801211e:	4613      	mov	r3, r2
 8012120:	00db      	lsls	r3, r3, #3
 8012122:	4413      	add	r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	4413      	add	r3, r2
 801212e:	3304      	adds	r3, #4
 8012130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2200      	movs	r2, #0
 8012136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2200      	movs	r2, #0
 801213c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801213e:	78fb      	ldrb	r3, [r7, #3]
 8012140:	f003 030f 	and.w	r3, r3, #15
 8012144:	b2da      	uxtb	r2, r3
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012150:	2b01      	cmp	r3, #1
 8012152:	d101      	bne.n	8012158 <HAL_PCD_EP_ClrStall+0x86>
 8012154:	2302      	movs	r3, #2
 8012156:	e00e      	b.n	8012176 <HAL_PCD_EP_ClrStall+0xa4>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2201      	movs	r2, #1
 801215c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	68f9      	ldr	r1, [r7, #12]
 8012166:	4618      	mov	r0, r3
 8012168:	f002 fde6 	bl	8014d38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b084      	sub	sp, #16
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	460b      	mov	r3, r1
 8012188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801218a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801218e:	2b00      	cmp	r3, #0
 8012190:	da0c      	bge.n	80121ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012192:	78fb      	ldrb	r3, [r7, #3]
 8012194:	f003 020f 	and.w	r2, r3, #15
 8012198:	4613      	mov	r3, r2
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	4413      	add	r3, r2
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	3338      	adds	r3, #56	; 0x38
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	4413      	add	r3, r2
 80121a6:	3304      	adds	r3, #4
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	e00c      	b.n	80121c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	f003 020f 	and.w	r2, r3, #15
 80121b2:	4613      	mov	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	4413      	add	r3, r2
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	4413      	add	r3, r2
 80121c2:	3304      	adds	r3, #4
 80121c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68f9      	ldr	r1, [r7, #12]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f002 fc05 	bl	80149dc <USB_EPStopXfer>
 80121d2:	4603      	mov	r3, r0
 80121d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80121d6:	7afb      	ldrb	r3, [r7, #11]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08a      	sub	sp, #40	; 0x28
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80121f4:	683a      	ldr	r2, [r7, #0]
 80121f6:	4613      	mov	r3, r2
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	4413      	add	r3, r2
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	3338      	adds	r3, #56	; 0x38
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	4413      	add	r3, r2
 8012204:	3304      	adds	r3, #4
 8012206:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	6a1a      	ldr	r2, [r3, #32]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	699b      	ldr	r3, [r3, #24]
 8012210:	429a      	cmp	r2, r3
 8012212:	d901      	bls.n	8012218 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	e06c      	b.n	80122f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	699a      	ldr	r2, [r3, #24]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6a1b      	ldr	r3, [r3, #32]
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	69fa      	ldr	r2, [r7, #28]
 801222a:	429a      	cmp	r2, r3
 801222c:	d902      	bls.n	8012234 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	3303      	adds	r3, #3
 8012238:	089b      	lsrs	r3, r3, #2
 801223a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801223c:	e02b      	b.n	8012296 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	699a      	ldr	r2, [r3, #24]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	69fa      	ldr	r2, [r7, #28]
 8012250:	429a      	cmp	r2, r3
 8012252:	d902      	bls.n	801225a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	3303      	adds	r3, #3
 801225e:	089b      	lsrs	r3, r3, #2
 8012260:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6919      	ldr	r1, [r3, #16]
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	b2da      	uxtb	r2, r3
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012272:	b2db      	uxtb	r3, r3
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	4603      	mov	r3, r0
 8012278:	6978      	ldr	r0, [r7, #20]
 801227a:	f002 fc59 	bl	8014b30 <USB_WritePacket>

    ep->xfer_buff  += len;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	691a      	ldr	r2, [r3, #16]
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	441a      	add	r2, r3
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6a1a      	ldr	r2, [r3, #32]
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	441a      	add	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	015a      	lsls	r2, r3, #5
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	4413      	add	r3, r2
 801229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a2:	699b      	ldr	r3, [r3, #24]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	69ba      	ldr	r2, [r7, #24]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d809      	bhi.n	80122c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6a1a      	ldr	r2, [r3, #32]
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d203      	bcs.n	80122c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	699b      	ldr	r3, [r3, #24]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1be      	bne.n	801223e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	699a      	ldr	r2, [r3, #24]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6a1b      	ldr	r3, [r3, #32]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d811      	bhi.n	80122f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	f003 030f 	and.w	r3, r3, #15
 80122d2:	2201      	movs	r2, #1
 80122d4:	fa02 f303 	lsl.w	r3, r2, r3
 80122d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	43db      	mvns	r3, r3
 80122e6:	6939      	ldr	r1, [r7, #16]
 80122e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122ec:	4013      	ands	r3, r2
 80122ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3720      	adds	r7, #32
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
	...

080122fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	333c      	adds	r3, #60	; 0x3c
 8012314:	3304      	adds	r3, #4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	015a      	lsls	r2, r3, #5
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	4413      	add	r3, r2
 8012322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d17b      	bne.n	801242a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	f003 0308 	and.w	r3, r3, #8
 8012338:	2b00      	cmp	r3, #0
 801233a:	d015      	beq.n	8012368 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	4a61      	ldr	r2, [pc, #388]	; (80124c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8012340:	4293      	cmp	r3, r2
 8012342:	f240 80b9 	bls.w	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801234c:	2b00      	cmp	r3, #0
 801234e:	f000 80b3 	beq.w	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	015a      	lsls	r2, r3, #5
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	4413      	add	r3, r2
 801235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801235e:	461a      	mov	r2, r3
 8012360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012364:	6093      	str	r3, [r2, #8]
 8012366:	e0a7      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	f003 0320 	and.w	r3, r3, #32
 801236e:	2b00      	cmp	r3, #0
 8012370:	d009      	beq.n	8012386 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	015a      	lsls	r2, r3, #5
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	4413      	add	r3, r2
 801237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801237e:	461a      	mov	r2, r3
 8012380:	2320      	movs	r3, #32
 8012382:	6093      	str	r3, [r2, #8]
 8012384:	e098      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801238c:	2b00      	cmp	r3, #0
 801238e:	f040 8093 	bne.w	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	4a4b      	ldr	r2, [pc, #300]	; (80124c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8012396:	4293      	cmp	r3, r2
 8012398:	d90f      	bls.n	80123ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00a      	beq.n	80123ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	015a      	lsls	r2, r3, #5
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	4413      	add	r3, r2
 80123ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123b0:	461a      	mov	r2, r3
 80123b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123b6:	6093      	str	r3, [r2, #8]
 80123b8:	e07e      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80123ba:	683a      	ldr	r2, [r7, #0]
 80123bc:	4613      	mov	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	4413      	add	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80123c8:	687a      	ldr	r2, [r7, #4]
 80123ca:	4413      	add	r3, r2
 80123cc:	3304      	adds	r3, #4
 80123ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	69da      	ldr	r2, [r3, #28]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	0159      	lsls	r1, r3, #5
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	440b      	add	r3, r1
 80123dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123e0:	691b      	ldr	r3, [r3, #16]
 80123e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80123e6:	1ad2      	subs	r2, r2, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d114      	bne.n	801241c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d109      	bne.n	801240e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6818      	ldr	r0, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012404:	461a      	mov	r2, r3
 8012406:	2101      	movs	r1, #1
 8012408:	f002 fde6 	bl	8014fd8 <USB_EP0_OutStart>
 801240c:	e006      	b.n	801241c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	691a      	ldr	r2, [r3, #16]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6a1b      	ldr	r3, [r3, #32]
 8012416:	441a      	add	r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	b2db      	uxtb	r3, r3
 8012420:	4619      	mov	r1, r3
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f004 f85d 	bl	80164e2 <HAL_PCD_DataOutStageCallback>
 8012428:	e046      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	4a26      	ldr	r2, [pc, #152]	; (80124c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801242e:	4293      	cmp	r3, r2
 8012430:	d124      	bne.n	801247c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00a      	beq.n	8012452 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012448:	461a      	mov	r2, r3
 801244a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801244e:	6093      	str	r3, [r2, #8]
 8012450:	e032      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	f003 0320 	and.w	r3, r3, #32
 8012458:	2b00      	cmp	r3, #0
 801245a:	d008      	beq.n	801246e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	015a      	lsls	r2, r3, #5
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	4413      	add	r3, r2
 8012464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012468:	461a      	mov	r2, r3
 801246a:	2320      	movs	r3, #32
 801246c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	4619      	mov	r1, r3
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f004 f834 	bl	80164e2 <HAL_PCD_DataOutStageCallback>
 801247a:	e01d      	b.n	80124b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d114      	bne.n	80124ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8012482:	6879      	ldr	r1, [r7, #4]
 8012484:	683a      	ldr	r2, [r7, #0]
 8012486:	4613      	mov	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	4413      	add	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	440b      	add	r3, r1
 8012490:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d108      	bne.n	80124ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6818      	ldr	r0, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80124a4:	461a      	mov	r2, r3
 80124a6:	2100      	movs	r1, #0
 80124a8:	f002 fd96 	bl	8014fd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	4619      	mov	r1, r3
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f004 f815 	bl	80164e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3720      	adds	r7, #32
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	4f54300a 	.word	0x4f54300a
 80124c8:	4f54310a 	.word	0x4f54310a

080124cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	333c      	adds	r3, #60	; 0x3c
 80124e4:	3304      	adds	r3, #4
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	015a      	lsls	r2, r3, #5
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	4413      	add	r3, r2
 80124f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	4a15      	ldr	r2, [pc, #84]	; (8012554 <PCD_EP_OutSetupPacket_int+0x88>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d90e      	bls.n	8012520 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012508:	2b00      	cmp	r3, #0
 801250a:	d009      	beq.n	8012520 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	015a      	lsls	r2, r3, #5
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	4413      	add	r3, r2
 8012514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012518:	461a      	mov	r2, r3
 801251a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801251e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f003 ffcc 	bl	80164be <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	4a0a      	ldr	r2, [pc, #40]	; (8012554 <PCD_EP_OutSetupPacket_int+0x88>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d90c      	bls.n	8012548 <PCD_EP_OutSetupPacket_int+0x7c>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	691b      	ldr	r3, [r3, #16]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d108      	bne.n	8012548 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6818      	ldr	r0, [r3, #0]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012540:	461a      	mov	r2, r3
 8012542:	2101      	movs	r1, #1
 8012544:	f002 fd48 	bl	8014fd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3718      	adds	r7, #24
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	4f54300a 	.word	0x4f54300a

08012558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012568:	2301      	movs	r3, #1
 801256a:	e0cc      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801256c:	4b68      	ldr	r3, [pc, #416]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f003 030f 	and.w	r3, r3, #15
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	d90c      	bls.n	8012594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801257a:	4b65      	ldr	r3, [pc, #404]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 801257c:	683a      	ldr	r2, [r7, #0]
 801257e:	b2d2      	uxtb	r2, r2
 8012580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012582:	4b63      	ldr	r3, [pc, #396]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f003 030f 	and.w	r3, r3, #15
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	429a      	cmp	r2, r3
 801258e:	d001      	beq.n	8012594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012590:	2301      	movs	r3, #1
 8012592:	e0b8      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f003 0302 	and.w	r3, r3, #2
 801259c:	2b00      	cmp	r3, #0
 801259e:	d020      	beq.n	80125e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f003 0304 	and.w	r3, r3, #4
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d005      	beq.n	80125b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80125ac:	4b59      	ldr	r3, [pc, #356]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125ae:	689b      	ldr	r3, [r3, #8]
 80125b0:	4a58      	ldr	r2, [pc, #352]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80125b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f003 0308 	and.w	r3, r3, #8
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d005      	beq.n	80125d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80125c4:	4b53      	ldr	r3, [pc, #332]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	4a52      	ldr	r2, [pc, #328]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80125ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125d0:	4b50      	ldr	r3, [pc, #320]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	494d      	ldr	r1, [pc, #308]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125de:	4313      	orrs	r3, r2
 80125e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f003 0301 	and.w	r3, r3, #1
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d044      	beq.n	8012678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d107      	bne.n	8012606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80125f6:	4b47      	ldr	r3, [pc, #284]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d119      	bne.n	8012636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012602:	2301      	movs	r3, #1
 8012604:	e07f      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	2b02      	cmp	r3, #2
 801260c:	d003      	beq.n	8012616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012612:	2b03      	cmp	r3, #3
 8012614:	d107      	bne.n	8012626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012616:	4b3f      	ldr	r3, [pc, #252]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801261e:	2b00      	cmp	r3, #0
 8012620:	d109      	bne.n	8012636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	e06f      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012626:	4b3b      	ldr	r3, [pc, #236]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f003 0302 	and.w	r3, r3, #2
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012632:	2301      	movs	r3, #1
 8012634:	e067      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012636:	4b37      	ldr	r3, [pc, #220]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	f023 0203 	bic.w	r2, r3, #3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	4934      	ldr	r1, [pc, #208]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 8012644:	4313      	orrs	r3, r2
 8012646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012648:	f7fe fa60 	bl	8010b0c <HAL_GetTick>
 801264c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801264e:	e00a      	b.n	8012666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012650:	f7fe fa5c 	bl	8010b0c <HAL_GetTick>
 8012654:	4602      	mov	r2, r0
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	1ad3      	subs	r3, r2, r3
 801265a:	f241 3288 	movw	r2, #5000	; 0x1388
 801265e:	4293      	cmp	r3, r2
 8012660:	d901      	bls.n	8012666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012662:	2303      	movs	r3, #3
 8012664:	e04f      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012666:	4b2b      	ldr	r3, [pc, #172]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	f003 020c 	and.w	r2, r3, #12
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	429a      	cmp	r2, r3
 8012676:	d1eb      	bne.n	8012650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012678:	4b25      	ldr	r3, [pc, #148]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f003 030f 	and.w	r3, r3, #15
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	429a      	cmp	r2, r3
 8012684:	d20c      	bcs.n	80126a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012686:	4b22      	ldr	r3, [pc, #136]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	b2d2      	uxtb	r2, r2
 801268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801268e:	4b20      	ldr	r3, [pc, #128]	; (8012710 <HAL_RCC_ClockConfig+0x1b8>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f003 030f 	and.w	r3, r3, #15
 8012696:	683a      	ldr	r2, [r7, #0]
 8012698:	429a      	cmp	r2, r3
 801269a:	d001      	beq.n	80126a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801269c:	2301      	movs	r3, #1
 801269e:	e032      	b.n	8012706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f003 0304 	and.w	r3, r3, #4
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d008      	beq.n	80126be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80126ac:	4b19      	ldr	r3, [pc, #100]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	4916      	ldr	r1, [pc, #88]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80126ba:	4313      	orrs	r3, r2
 80126bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	f003 0308 	and.w	r3, r3, #8
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d009      	beq.n	80126de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80126ca:	4b12      	ldr	r3, [pc, #72]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80126cc:	689b      	ldr	r3, [r3, #8]
 80126ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	490e      	ldr	r1, [pc, #56]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80126da:	4313      	orrs	r3, r2
 80126dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80126de:	f000 f855 	bl	801278c <HAL_RCC_GetSysClockFreq>
 80126e2:	4602      	mov	r2, r0
 80126e4:	4b0b      	ldr	r3, [pc, #44]	; (8012714 <HAL_RCC_ClockConfig+0x1bc>)
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	091b      	lsrs	r3, r3, #4
 80126ea:	f003 030f 	and.w	r3, r3, #15
 80126ee:	490a      	ldr	r1, [pc, #40]	; (8012718 <HAL_RCC_ClockConfig+0x1c0>)
 80126f0:	5ccb      	ldrb	r3, [r1, r3]
 80126f2:	fa22 f303 	lsr.w	r3, r2, r3
 80126f6:	4a09      	ldr	r2, [pc, #36]	; (801271c <HAL_RCC_ClockConfig+0x1c4>)
 80126f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80126fa:	4b09      	ldr	r3, [pc, #36]	; (8012720 <HAL_RCC_ClockConfig+0x1c8>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe f9c0 	bl	8010a84 <HAL_InitTick>

  return HAL_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	40023c00 	.word	0x40023c00
 8012714:	40023800 	.word	0x40023800
 8012718:	080169e8 	.word	0x080169e8
 801271c:	20000000 	.word	0x20000000
 8012720:	20000004 	.word	0x20000004

08012724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012724:	b480      	push	{r7}
 8012726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012728:	4b03      	ldr	r3, [pc, #12]	; (8012738 <HAL_RCC_GetHCLKFreq+0x14>)
 801272a:	681b      	ldr	r3, [r3, #0]
}
 801272c:	4618      	mov	r0, r3
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	20000000 	.word	0x20000000

0801273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012740:	f7ff fff0 	bl	8012724 <HAL_RCC_GetHCLKFreq>
 8012744:	4602      	mov	r2, r0
 8012746:	4b05      	ldr	r3, [pc, #20]	; (801275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	0a9b      	lsrs	r3, r3, #10
 801274c:	f003 0307 	and.w	r3, r3, #7
 8012750:	4903      	ldr	r1, [pc, #12]	; (8012760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012752:	5ccb      	ldrb	r3, [r1, r3]
 8012754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012758:	4618      	mov	r0, r3
 801275a:	bd80      	pop	{r7, pc}
 801275c:	40023800 	.word	0x40023800
 8012760:	080169f8 	.word	0x080169f8

08012764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012768:	f7ff ffdc 	bl	8012724 <HAL_RCC_GetHCLKFreq>
 801276c:	4602      	mov	r2, r0
 801276e:	4b05      	ldr	r3, [pc, #20]	; (8012784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	0b5b      	lsrs	r3, r3, #13
 8012774:	f003 0307 	and.w	r3, r3, #7
 8012778:	4903      	ldr	r1, [pc, #12]	; (8012788 <HAL_RCC_GetPCLK2Freq+0x24>)
 801277a:	5ccb      	ldrb	r3, [r1, r3]
 801277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012780:	4618      	mov	r0, r3
 8012782:	bd80      	pop	{r7, pc}
 8012784:	40023800 	.word	0x40023800
 8012788:	080169f8 	.word	0x080169f8

0801278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012790:	b0ae      	sub	sp, #184	; 0xb8
 8012792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8012794:	2300      	movs	r3, #0
 8012796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 801279a:	2300      	movs	r3, #0
 801279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80127a0:	2300      	movs	r3, #0
 80127a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80127a6:	2300      	movs	r3, #0
 80127a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80127ac:	2300      	movs	r3, #0
 80127ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80127b2:	4bcb      	ldr	r3, [pc, #812]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	f003 030c 	and.w	r3, r3, #12
 80127ba:	2b0c      	cmp	r3, #12
 80127bc:	f200 8206 	bhi.w	8012bcc <HAL_RCC_GetSysClockFreq+0x440>
 80127c0:	a201      	add	r2, pc, #4	; (adr r2, 80127c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80127c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c6:	bf00      	nop
 80127c8:	080127fd 	.word	0x080127fd
 80127cc:	08012bcd 	.word	0x08012bcd
 80127d0:	08012bcd 	.word	0x08012bcd
 80127d4:	08012bcd 	.word	0x08012bcd
 80127d8:	08012805 	.word	0x08012805
 80127dc:	08012bcd 	.word	0x08012bcd
 80127e0:	08012bcd 	.word	0x08012bcd
 80127e4:	08012bcd 	.word	0x08012bcd
 80127e8:	0801280d 	.word	0x0801280d
 80127ec:	08012bcd 	.word	0x08012bcd
 80127f0:	08012bcd 	.word	0x08012bcd
 80127f4:	08012bcd 	.word	0x08012bcd
 80127f8:	080129fd 	.word	0x080129fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80127fc:	4bb9      	ldr	r3, [pc, #740]	; (8012ae4 <HAL_RCC_GetSysClockFreq+0x358>)
 80127fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8012802:	e1e7      	b.n	8012bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012804:	4bb8      	ldr	r3, [pc, #736]	; (8012ae8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8012806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 801280a:	e1e3      	b.n	8012bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801280c:	4bb4      	ldr	r3, [pc, #720]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 801280e:	685b      	ldr	r3, [r3, #4]
 8012810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012818:	4bb1      	ldr	r3, [pc, #708]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012820:	2b00      	cmp	r3, #0
 8012822:	d071      	beq.n	8012908 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012824:	4bae      	ldr	r3, [pc, #696]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	099b      	lsrs	r3, r3, #6
 801282a:	2200      	movs	r2, #0
 801282c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012830:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8012834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801283c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012840:	2300      	movs	r3, #0
 8012842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801284a:	4622      	mov	r2, r4
 801284c:	462b      	mov	r3, r5
 801284e:	f04f 0000 	mov.w	r0, #0
 8012852:	f04f 0100 	mov.w	r1, #0
 8012856:	0159      	lsls	r1, r3, #5
 8012858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801285c:	0150      	lsls	r0, r2, #5
 801285e:	4602      	mov	r2, r0
 8012860:	460b      	mov	r3, r1
 8012862:	4621      	mov	r1, r4
 8012864:	1a51      	subs	r1, r2, r1
 8012866:	6439      	str	r1, [r7, #64]	; 0x40
 8012868:	4629      	mov	r1, r5
 801286a:	eb63 0301 	sbc.w	r3, r3, r1
 801286e:	647b      	str	r3, [r7, #68]	; 0x44
 8012870:	f04f 0200 	mov.w	r2, #0
 8012874:	f04f 0300 	mov.w	r3, #0
 8012878:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801287c:	4649      	mov	r1, r9
 801287e:	018b      	lsls	r3, r1, #6
 8012880:	4641      	mov	r1, r8
 8012882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012886:	4641      	mov	r1, r8
 8012888:	018a      	lsls	r2, r1, #6
 801288a:	4641      	mov	r1, r8
 801288c:	1a51      	subs	r1, r2, r1
 801288e:	63b9      	str	r1, [r7, #56]	; 0x38
 8012890:	4649      	mov	r1, r9
 8012892:	eb63 0301 	sbc.w	r3, r3, r1
 8012896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012898:	f04f 0200 	mov.w	r2, #0
 801289c:	f04f 0300 	mov.w	r3, #0
 80128a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80128a4:	4649      	mov	r1, r9
 80128a6:	00cb      	lsls	r3, r1, #3
 80128a8:	4641      	mov	r1, r8
 80128aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80128ae:	4641      	mov	r1, r8
 80128b0:	00ca      	lsls	r2, r1, #3
 80128b2:	4610      	mov	r0, r2
 80128b4:	4619      	mov	r1, r3
 80128b6:	4603      	mov	r3, r0
 80128b8:	4622      	mov	r2, r4
 80128ba:	189b      	adds	r3, r3, r2
 80128bc:	633b      	str	r3, [r7, #48]	; 0x30
 80128be:	462b      	mov	r3, r5
 80128c0:	460a      	mov	r2, r1
 80128c2:	eb42 0303 	adc.w	r3, r2, r3
 80128c6:	637b      	str	r3, [r7, #52]	; 0x34
 80128c8:	f04f 0200 	mov.w	r2, #0
 80128cc:	f04f 0300 	mov.w	r3, #0
 80128d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80128d4:	4629      	mov	r1, r5
 80128d6:	024b      	lsls	r3, r1, #9
 80128d8:	4621      	mov	r1, r4
 80128da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80128de:	4621      	mov	r1, r4
 80128e0:	024a      	lsls	r2, r1, #9
 80128e2:	4610      	mov	r0, r2
 80128e4:	4619      	mov	r1, r3
 80128e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80128ea:	2200      	movs	r2, #0
 80128ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80128f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80128f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80128f8:	f7fd fc84 	bl	8010204 <__aeabi_uldivmod>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4613      	mov	r3, r2
 8012902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012906:	e067      	b.n	80129d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012908:	4b75      	ldr	r3, [pc, #468]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	099b      	lsrs	r3, r3, #6
 801290e:	2200      	movs	r2, #0
 8012910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012914:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8012918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012920:	67bb      	str	r3, [r7, #120]	; 0x78
 8012922:	2300      	movs	r3, #0
 8012924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012926:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801292a:	4622      	mov	r2, r4
 801292c:	462b      	mov	r3, r5
 801292e:	f04f 0000 	mov.w	r0, #0
 8012932:	f04f 0100 	mov.w	r1, #0
 8012936:	0159      	lsls	r1, r3, #5
 8012938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801293c:	0150      	lsls	r0, r2, #5
 801293e:	4602      	mov	r2, r0
 8012940:	460b      	mov	r3, r1
 8012942:	4621      	mov	r1, r4
 8012944:	1a51      	subs	r1, r2, r1
 8012946:	62b9      	str	r1, [r7, #40]	; 0x28
 8012948:	4629      	mov	r1, r5
 801294a:	eb63 0301 	sbc.w	r3, r3, r1
 801294e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012950:	f04f 0200 	mov.w	r2, #0
 8012954:	f04f 0300 	mov.w	r3, #0
 8012958:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801295c:	4649      	mov	r1, r9
 801295e:	018b      	lsls	r3, r1, #6
 8012960:	4641      	mov	r1, r8
 8012962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012966:	4641      	mov	r1, r8
 8012968:	018a      	lsls	r2, r1, #6
 801296a:	4641      	mov	r1, r8
 801296c:	ebb2 0a01 	subs.w	sl, r2, r1
 8012970:	4649      	mov	r1, r9
 8012972:	eb63 0b01 	sbc.w	fp, r3, r1
 8012976:	f04f 0200 	mov.w	r2, #0
 801297a:	f04f 0300 	mov.w	r3, #0
 801297e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012982:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801298a:	4692      	mov	sl, r2
 801298c:	469b      	mov	fp, r3
 801298e:	4623      	mov	r3, r4
 8012990:	eb1a 0303 	adds.w	r3, sl, r3
 8012994:	623b      	str	r3, [r7, #32]
 8012996:	462b      	mov	r3, r5
 8012998:	eb4b 0303 	adc.w	r3, fp, r3
 801299c:	627b      	str	r3, [r7, #36]	; 0x24
 801299e:	f04f 0200 	mov.w	r2, #0
 80129a2:	f04f 0300 	mov.w	r3, #0
 80129a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80129aa:	4629      	mov	r1, r5
 80129ac:	028b      	lsls	r3, r1, #10
 80129ae:	4621      	mov	r1, r4
 80129b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80129b4:	4621      	mov	r1, r4
 80129b6:	028a      	lsls	r2, r1, #10
 80129b8:	4610      	mov	r0, r2
 80129ba:	4619      	mov	r1, r3
 80129bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129c0:	2200      	movs	r2, #0
 80129c2:	673b      	str	r3, [r7, #112]	; 0x70
 80129c4:	677a      	str	r2, [r7, #116]	; 0x74
 80129c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80129ca:	f7fd fc1b 	bl	8010204 <__aeabi_uldivmod>
 80129ce:	4602      	mov	r2, r0
 80129d0:	460b      	mov	r3, r1
 80129d2:	4613      	mov	r3, r2
 80129d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80129d8:	4b41      	ldr	r3, [pc, #260]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	0c1b      	lsrs	r3, r3, #16
 80129de:	f003 0303 	and.w	r3, r3, #3
 80129e2:	3301      	adds	r3, #1
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80129ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80129ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80129f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80129f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80129fa:	e0eb      	b.n	8012bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80129fc:	4b38      	ldr	r3, [pc, #224]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012a08:	4b35      	ldr	r3, [pc, #212]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d06b      	beq.n	8012aec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012a14:	4b32      	ldr	r3, [pc, #200]	; (8012ae0 <HAL_RCC_GetSysClockFreq+0x354>)
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	099b      	lsrs	r3, r3, #6
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8012a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a26:	663b      	str	r3, [r7, #96]	; 0x60
 8012a28:	2300      	movs	r3, #0
 8012a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8012a2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8012a30:	4622      	mov	r2, r4
 8012a32:	462b      	mov	r3, r5
 8012a34:	f04f 0000 	mov.w	r0, #0
 8012a38:	f04f 0100 	mov.w	r1, #0
 8012a3c:	0159      	lsls	r1, r3, #5
 8012a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012a42:	0150      	lsls	r0, r2, #5
 8012a44:	4602      	mov	r2, r0
 8012a46:	460b      	mov	r3, r1
 8012a48:	4621      	mov	r1, r4
 8012a4a:	1a51      	subs	r1, r2, r1
 8012a4c:	61b9      	str	r1, [r7, #24]
 8012a4e:	4629      	mov	r1, r5
 8012a50:	eb63 0301 	sbc.w	r3, r3, r1
 8012a54:	61fb      	str	r3, [r7, #28]
 8012a56:	f04f 0200 	mov.w	r2, #0
 8012a5a:	f04f 0300 	mov.w	r3, #0
 8012a5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8012a62:	4659      	mov	r1, fp
 8012a64:	018b      	lsls	r3, r1, #6
 8012a66:	4651      	mov	r1, sl
 8012a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012a6c:	4651      	mov	r1, sl
 8012a6e:	018a      	lsls	r2, r1, #6
 8012a70:	4651      	mov	r1, sl
 8012a72:	ebb2 0801 	subs.w	r8, r2, r1
 8012a76:	4659      	mov	r1, fp
 8012a78:	eb63 0901 	sbc.w	r9, r3, r1
 8012a7c:	f04f 0200 	mov.w	r2, #0
 8012a80:	f04f 0300 	mov.w	r3, #0
 8012a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012a90:	4690      	mov	r8, r2
 8012a92:	4699      	mov	r9, r3
 8012a94:	4623      	mov	r3, r4
 8012a96:	eb18 0303 	adds.w	r3, r8, r3
 8012a9a:	613b      	str	r3, [r7, #16]
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	eb49 0303 	adc.w	r3, r9, r3
 8012aa2:	617b      	str	r3, [r7, #20]
 8012aa4:	f04f 0200 	mov.w	r2, #0
 8012aa8:	f04f 0300 	mov.w	r3, #0
 8012aac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	024b      	lsls	r3, r1, #9
 8012ab4:	4621      	mov	r1, r4
 8012ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8012aba:	4621      	mov	r1, r4
 8012abc:	024a      	lsls	r2, r1, #9
 8012abe:	4610      	mov	r0, r2
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8012aca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8012acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012ad0:	f7fd fb98 	bl	8010204 <__aeabi_uldivmod>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	4613      	mov	r3, r2
 8012ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012ade:	e065      	b.n	8012bac <HAL_RCC_GetSysClockFreq+0x420>
 8012ae0:	40023800 	.word	0x40023800
 8012ae4:	00f42400 	.word	0x00f42400
 8012ae8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012aec:	4b3d      	ldr	r3, [pc, #244]	; (8012be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	099b      	lsrs	r3, r3, #6
 8012af2:	2200      	movs	r2, #0
 8012af4:	4618      	mov	r0, r3
 8012af6:	4611      	mov	r1, r2
 8012af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8012afc:	653b      	str	r3, [r7, #80]	; 0x50
 8012afe:	2300      	movs	r3, #0
 8012b00:	657b      	str	r3, [r7, #84]	; 0x54
 8012b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8012b06:	4642      	mov	r2, r8
 8012b08:	464b      	mov	r3, r9
 8012b0a:	f04f 0000 	mov.w	r0, #0
 8012b0e:	f04f 0100 	mov.w	r1, #0
 8012b12:	0159      	lsls	r1, r3, #5
 8012b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012b18:	0150      	lsls	r0, r2, #5
 8012b1a:	4602      	mov	r2, r0
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	4641      	mov	r1, r8
 8012b20:	1a51      	subs	r1, r2, r1
 8012b22:	60b9      	str	r1, [r7, #8]
 8012b24:	4649      	mov	r1, r9
 8012b26:	eb63 0301 	sbc.w	r3, r3, r1
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	f04f 0200 	mov.w	r2, #0
 8012b30:	f04f 0300 	mov.w	r3, #0
 8012b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8012b38:	4659      	mov	r1, fp
 8012b3a:	018b      	lsls	r3, r1, #6
 8012b3c:	4651      	mov	r1, sl
 8012b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012b42:	4651      	mov	r1, sl
 8012b44:	018a      	lsls	r2, r1, #6
 8012b46:	4651      	mov	r1, sl
 8012b48:	1a54      	subs	r4, r2, r1
 8012b4a:	4659      	mov	r1, fp
 8012b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8012b50:	f04f 0200 	mov.w	r2, #0
 8012b54:	f04f 0300 	mov.w	r3, #0
 8012b58:	00eb      	lsls	r3, r5, #3
 8012b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012b5e:	00e2      	lsls	r2, r4, #3
 8012b60:	4614      	mov	r4, r2
 8012b62:	461d      	mov	r5, r3
 8012b64:	4643      	mov	r3, r8
 8012b66:	18e3      	adds	r3, r4, r3
 8012b68:	603b      	str	r3, [r7, #0]
 8012b6a:	464b      	mov	r3, r9
 8012b6c:	eb45 0303 	adc.w	r3, r5, r3
 8012b70:	607b      	str	r3, [r7, #4]
 8012b72:	f04f 0200 	mov.w	r2, #0
 8012b76:	f04f 0300 	mov.w	r3, #0
 8012b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012b7e:	4629      	mov	r1, r5
 8012b80:	028b      	lsls	r3, r1, #10
 8012b82:	4621      	mov	r1, r4
 8012b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012b88:	4621      	mov	r1, r4
 8012b8a:	028a      	lsls	r2, r1, #10
 8012b8c:	4610      	mov	r0, r2
 8012b8e:	4619      	mov	r1, r3
 8012b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b94:	2200      	movs	r2, #0
 8012b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012b9e:	f7fd fb31 	bl	8010204 <__aeabi_uldivmod>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8012bac:	4b0d      	ldr	r3, [pc, #52]	; (8012be4 <HAL_RCC_GetSysClockFreq+0x458>)
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	0f1b      	lsrs	r3, r3, #28
 8012bb2:	f003 0307 	and.w	r3, r3, #7
 8012bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8012bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8012bca:	e003      	b.n	8012bd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012bcc:	4b06      	ldr	r3, [pc, #24]	; (8012be8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8012bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8012bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	37b8      	adds	r7, #184	; 0xb8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012be2:	bf00      	nop
 8012be4:	40023800 	.word	0x40023800
 8012be8:	00f42400 	.word	0x00f42400

08012bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d101      	bne.n	8012bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e28d      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 8083 	beq.w	8012d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8012c0c:	4b94      	ldr	r3, [pc, #592]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	f003 030c 	and.w	r3, r3, #12
 8012c14:	2b04      	cmp	r3, #4
 8012c16:	d019      	beq.n	8012c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8012c18:	4b91      	ldr	r3, [pc, #580]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8012c20:	2b08      	cmp	r3, #8
 8012c22:	d106      	bne.n	8012c32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8012c24:	4b8e      	ldr	r3, [pc, #568]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012c30:	d00c      	beq.n	8012c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012c32:	4b8b      	ldr	r3, [pc, #556]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8012c3a:	2b0c      	cmp	r3, #12
 8012c3c:	d112      	bne.n	8012c64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012c3e:	4b88      	ldr	r3, [pc, #544]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012c4a:	d10b      	bne.n	8012c64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012c4c:	4b84      	ldr	r3, [pc, #528]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d05b      	beq.n	8012d10 <HAL_RCC_OscConfig+0x124>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d157      	bne.n	8012d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e25a      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c6c:	d106      	bne.n	8012c7c <HAL_RCC_OscConfig+0x90>
 8012c6e:	4b7c      	ldr	r3, [pc, #496]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4a7b      	ldr	r2, [pc, #492]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012c78:	6013      	str	r3, [r2, #0]
 8012c7a:	e01d      	b.n	8012cb8 <HAL_RCC_OscConfig+0xcc>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012c84:	d10c      	bne.n	8012ca0 <HAL_RCC_OscConfig+0xb4>
 8012c86:	4b76      	ldr	r3, [pc, #472]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a75      	ldr	r2, [pc, #468]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012c90:	6013      	str	r3, [r2, #0]
 8012c92:	4b73      	ldr	r3, [pc, #460]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4a72      	ldr	r2, [pc, #456]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012c9c:	6013      	str	r3, [r2, #0]
 8012c9e:	e00b      	b.n	8012cb8 <HAL_RCC_OscConfig+0xcc>
 8012ca0:	4b6f      	ldr	r3, [pc, #444]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4a6e      	ldr	r2, [pc, #440]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012caa:	6013      	str	r3, [r2, #0]
 8012cac:	4b6c      	ldr	r3, [pc, #432]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a6b      	ldr	r2, [pc, #428]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d013      	beq.n	8012ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cc0:	f7fd ff24 	bl	8010b0c <HAL_GetTick>
 8012cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012cc6:	e008      	b.n	8012cda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012cc8:	f7fd ff20 	bl	8010b0c <HAL_GetTick>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	2b64      	cmp	r3, #100	; 0x64
 8012cd4:	d901      	bls.n	8012cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	e21f      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012cda:	4b61      	ldr	r3, [pc, #388]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d0f0      	beq.n	8012cc8 <HAL_RCC_OscConfig+0xdc>
 8012ce6:	e014      	b.n	8012d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ce8:	f7fd ff10 	bl	8010b0c <HAL_GetTick>
 8012cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012cee:	e008      	b.n	8012d02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012cf0:	f7fd ff0c 	bl	8010b0c <HAL_GetTick>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	1ad3      	subs	r3, r2, r3
 8012cfa:	2b64      	cmp	r3, #100	; 0x64
 8012cfc:	d901      	bls.n	8012d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8012cfe:	2303      	movs	r3, #3
 8012d00:	e20b      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012d02:	4b57      	ldr	r3, [pc, #348]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d1f0      	bne.n	8012cf0 <HAL_RCC_OscConfig+0x104>
 8012d0e:	e000      	b.n	8012d12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f003 0302 	and.w	r3, r3, #2
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d06f      	beq.n	8012dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8012d1e:	4b50      	ldr	r3, [pc, #320]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	f003 030c 	and.w	r3, r3, #12
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d017      	beq.n	8012d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8012d2a:	4b4d      	ldr	r3, [pc, #308]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8012d32:	2b08      	cmp	r3, #8
 8012d34:	d105      	bne.n	8012d42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8012d36:	4b4a      	ldr	r3, [pc, #296]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00b      	beq.n	8012d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012d42:	4b47      	ldr	r3, [pc, #284]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8012d4a:	2b0c      	cmp	r3, #12
 8012d4c:	d11c      	bne.n	8012d88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012d4e:	4b44      	ldr	r3, [pc, #272]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d116      	bne.n	8012d88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012d5a:	4b41      	ldr	r3, [pc, #260]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f003 0302 	and.w	r3, r3, #2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d005      	beq.n	8012d72 <HAL_RCC_OscConfig+0x186>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d001      	beq.n	8012d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e1d3      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012d72:	4b3b      	ldr	r3, [pc, #236]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	691b      	ldr	r3, [r3, #16]
 8012d7e:	00db      	lsls	r3, r3, #3
 8012d80:	4937      	ldr	r1, [pc, #220]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012d82:	4313      	orrs	r3, r2
 8012d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012d86:	e03a      	b.n	8012dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d020      	beq.n	8012dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012d90:	4b34      	ldr	r3, [pc, #208]	; (8012e64 <HAL_RCC_OscConfig+0x278>)
 8012d92:	2201      	movs	r2, #1
 8012d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d96:	f7fd feb9 	bl	8010b0c <HAL_GetTick>
 8012d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d9c:	e008      	b.n	8012db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012d9e:	f7fd feb5 	bl	8010b0c <HAL_GetTick>
 8012da2:	4602      	mov	r2, r0
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	1ad3      	subs	r3, r2, r3
 8012da8:	2b02      	cmp	r3, #2
 8012daa:	d901      	bls.n	8012db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8012dac:	2303      	movs	r3, #3
 8012dae:	e1b4      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012db0:	4b2b      	ldr	r3, [pc, #172]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f003 0302 	and.w	r3, r3, #2
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d0f0      	beq.n	8012d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012dbc:	4b28      	ldr	r3, [pc, #160]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	691b      	ldr	r3, [r3, #16]
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	4925      	ldr	r1, [pc, #148]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	600b      	str	r3, [r1, #0]
 8012dd0:	e015      	b.n	8012dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012dd2:	4b24      	ldr	r3, [pc, #144]	; (8012e64 <HAL_RCC_OscConfig+0x278>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dd8:	f7fd fe98 	bl	8010b0c <HAL_GetTick>
 8012ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012dde:	e008      	b.n	8012df2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012de0:	f7fd fe94 	bl	8010b0c <HAL_GetTick>
 8012de4:	4602      	mov	r2, r0
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	1ad3      	subs	r3, r2, r3
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d901      	bls.n	8012df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e193      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012df2:	4b1b      	ldr	r3, [pc, #108]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f003 0302 	and.w	r3, r3, #2
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d1f0      	bne.n	8012de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f003 0308 	and.w	r3, r3, #8
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d036      	beq.n	8012e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d016      	beq.n	8012e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012e12:	4b15      	ldr	r3, [pc, #84]	; (8012e68 <HAL_RCC_OscConfig+0x27c>)
 8012e14:	2201      	movs	r2, #1
 8012e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e18:	f7fd fe78 	bl	8010b0c <HAL_GetTick>
 8012e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e1e:	e008      	b.n	8012e32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012e20:	f7fd fe74 	bl	8010b0c <HAL_GetTick>
 8012e24:	4602      	mov	r2, r0
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	1ad3      	subs	r3, r2, r3
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d901      	bls.n	8012e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8012e2e:	2303      	movs	r3, #3
 8012e30:	e173      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012e32:	4b0b      	ldr	r3, [pc, #44]	; (8012e60 <HAL_RCC_OscConfig+0x274>)
 8012e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e36:	f003 0302 	and.w	r3, r3, #2
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d0f0      	beq.n	8012e20 <HAL_RCC_OscConfig+0x234>
 8012e3e:	e01b      	b.n	8012e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012e40:	4b09      	ldr	r3, [pc, #36]	; (8012e68 <HAL_RCC_OscConfig+0x27c>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012e46:	f7fd fe61 	bl	8010b0c <HAL_GetTick>
 8012e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012e4c:	e00e      	b.n	8012e6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012e4e:	f7fd fe5d 	bl	8010b0c <HAL_GetTick>
 8012e52:	4602      	mov	r2, r0
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	d907      	bls.n	8012e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8012e5c:	2303      	movs	r3, #3
 8012e5e:	e15c      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
 8012e60:	40023800 	.word	0x40023800
 8012e64:	42470000 	.word	0x42470000
 8012e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012e6c:	4b8a      	ldr	r3, [pc, #552]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e70:	f003 0302 	and.w	r3, r3, #2
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d1ea      	bne.n	8012e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f003 0304 	and.w	r3, r3, #4
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 8097 	beq.w	8012fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012e86:	2300      	movs	r3, #0
 8012e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e8a:	4b83      	ldr	r3, [pc, #524]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10f      	bne.n	8012eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e96:	2300      	movs	r3, #0
 8012e98:	60bb      	str	r3, [r7, #8]
 8012e9a:	4b7f      	ldr	r3, [pc, #508]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e9e:	4a7e      	ldr	r2, [pc, #504]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8012ea6:	4b7c      	ldr	r3, [pc, #496]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012eae:	60bb      	str	r3, [r7, #8]
 8012eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012eb6:	4b79      	ldr	r3, [pc, #484]	; (801309c <HAL_RCC_OscConfig+0x4b0>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d118      	bne.n	8012ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012ec2:	4b76      	ldr	r3, [pc, #472]	; (801309c <HAL_RCC_OscConfig+0x4b0>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4a75      	ldr	r2, [pc, #468]	; (801309c <HAL_RCC_OscConfig+0x4b0>)
 8012ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012ece:	f7fd fe1d 	bl	8010b0c <HAL_GetTick>
 8012ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012ed4:	e008      	b.n	8012ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012ed6:	f7fd fe19 	bl	8010b0c <HAL_GetTick>
 8012eda:	4602      	mov	r2, r0
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	1ad3      	subs	r3, r2, r3
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d901      	bls.n	8012ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	e118      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012ee8:	4b6c      	ldr	r3, [pc, #432]	; (801309c <HAL_RCC_OscConfig+0x4b0>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d0f0      	beq.n	8012ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d106      	bne.n	8012f0a <HAL_RCC_OscConfig+0x31e>
 8012efc:	4b66      	ldr	r3, [pc, #408]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f00:	4a65      	ldr	r2, [pc, #404]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f02:	f043 0301 	orr.w	r3, r3, #1
 8012f06:	6713      	str	r3, [r2, #112]	; 0x70
 8012f08:	e01c      	b.n	8012f44 <HAL_RCC_OscConfig+0x358>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	2b05      	cmp	r3, #5
 8012f10:	d10c      	bne.n	8012f2c <HAL_RCC_OscConfig+0x340>
 8012f12:	4b61      	ldr	r3, [pc, #388]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f16:	4a60      	ldr	r2, [pc, #384]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f18:	f043 0304 	orr.w	r3, r3, #4
 8012f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8012f1e:	4b5e      	ldr	r3, [pc, #376]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f22:	4a5d      	ldr	r2, [pc, #372]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f24:	f043 0301 	orr.w	r3, r3, #1
 8012f28:	6713      	str	r3, [r2, #112]	; 0x70
 8012f2a:	e00b      	b.n	8012f44 <HAL_RCC_OscConfig+0x358>
 8012f2c:	4b5a      	ldr	r3, [pc, #360]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f30:	4a59      	ldr	r2, [pc, #356]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f32:	f023 0301 	bic.w	r3, r3, #1
 8012f36:	6713      	str	r3, [r2, #112]	; 0x70
 8012f38:	4b57      	ldr	r3, [pc, #348]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f3c:	4a56      	ldr	r2, [pc, #344]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f3e:	f023 0304 	bic.w	r3, r3, #4
 8012f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d015      	beq.n	8012f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f4c:	f7fd fdde 	bl	8010b0c <HAL_GetTick>
 8012f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012f52:	e00a      	b.n	8012f6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012f54:	f7fd fdda 	bl	8010b0c <HAL_GetTick>
 8012f58:	4602      	mov	r2, r0
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	1ad3      	subs	r3, r2, r3
 8012f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f62:	4293      	cmp	r3, r2
 8012f64:	d901      	bls.n	8012f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8012f66:	2303      	movs	r3, #3
 8012f68:	e0d7      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012f6a:	4b4b      	ldr	r3, [pc, #300]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6e:	f003 0302 	and.w	r3, r3, #2
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d0ee      	beq.n	8012f54 <HAL_RCC_OscConfig+0x368>
 8012f76:	e014      	b.n	8012fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f78:	f7fd fdc8 	bl	8010b0c <HAL_GetTick>
 8012f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012f7e:	e00a      	b.n	8012f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012f80:	f7fd fdc4 	bl	8010b0c <HAL_GetTick>
 8012f84:	4602      	mov	r2, r0
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	1ad3      	subs	r3, r2, r3
 8012f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d901      	bls.n	8012f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8012f92:	2303      	movs	r3, #3
 8012f94:	e0c1      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012f96:	4b40      	ldr	r3, [pc, #256]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f9a:	f003 0302 	and.w	r3, r3, #2
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1ee      	bne.n	8012f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012fa2:	7dfb      	ldrb	r3, [r7, #23]
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d105      	bne.n	8012fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012fa8:	4b3b      	ldr	r3, [pc, #236]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fac:	4a3a      	ldr	r2, [pc, #232]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	f000 80ad 	beq.w	8013118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012fbe:	4b36      	ldr	r3, [pc, #216]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	f003 030c 	and.w	r3, r3, #12
 8012fc6:	2b08      	cmp	r3, #8
 8012fc8:	d060      	beq.n	801308c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	699b      	ldr	r3, [r3, #24]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d145      	bne.n	801305e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012fd2:	4b33      	ldr	r3, [pc, #204]	; (80130a0 <HAL_RCC_OscConfig+0x4b4>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012fd8:	f7fd fd98 	bl	8010b0c <HAL_GetTick>
 8012fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012fde:	e008      	b.n	8012ff2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012fe0:	f7fd fd94 	bl	8010b0c <HAL_GetTick>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d901      	bls.n	8012ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8012fee:	2303      	movs	r3, #3
 8012ff0:	e093      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ff2:	4b29      	ldr	r3, [pc, #164]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1f0      	bne.n	8012fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	69da      	ldr	r2, [r3, #28]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6a1b      	ldr	r3, [r3, #32]
 8013006:	431a      	orrs	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801300c:	019b      	lsls	r3, r3, #6
 801300e:	431a      	orrs	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013014:	085b      	lsrs	r3, r3, #1
 8013016:	3b01      	subs	r3, #1
 8013018:	041b      	lsls	r3, r3, #16
 801301a:	431a      	orrs	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013020:	061b      	lsls	r3, r3, #24
 8013022:	431a      	orrs	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013028:	071b      	lsls	r3, r3, #28
 801302a:	491b      	ldr	r1, [pc, #108]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 801302c:	4313      	orrs	r3, r2
 801302e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013030:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <HAL_RCC_OscConfig+0x4b4>)
 8013032:	2201      	movs	r2, #1
 8013034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013036:	f7fd fd69 	bl	8010b0c <HAL_GetTick>
 801303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801303c:	e008      	b.n	8013050 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801303e:	f7fd fd65 	bl	8010b0c <HAL_GetTick>
 8013042:	4602      	mov	r2, r0
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	2b02      	cmp	r3, #2
 801304a:	d901      	bls.n	8013050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801304c:	2303      	movs	r3, #3
 801304e:	e064      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013050:	4b11      	ldr	r3, [pc, #68]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0f0      	beq.n	801303e <HAL_RCC_OscConfig+0x452>
 801305c:	e05c      	b.n	8013118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801305e:	4b10      	ldr	r3, [pc, #64]	; (80130a0 <HAL_RCC_OscConfig+0x4b4>)
 8013060:	2200      	movs	r2, #0
 8013062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013064:	f7fd fd52 	bl	8010b0c <HAL_GetTick>
 8013068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801306a:	e008      	b.n	801307e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801306c:	f7fd fd4e 	bl	8010b0c <HAL_GetTick>
 8013070:	4602      	mov	r2, r0
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	2b02      	cmp	r3, #2
 8013078:	d901      	bls.n	801307e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801307a:	2303      	movs	r3, #3
 801307c:	e04d      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801307e:	4b06      	ldr	r3, [pc, #24]	; (8013098 <HAL_RCC_OscConfig+0x4ac>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1f0      	bne.n	801306c <HAL_RCC_OscConfig+0x480>
 801308a:	e045      	b.n	8013118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	699b      	ldr	r3, [r3, #24]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d107      	bne.n	80130a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8013094:	2301      	movs	r3, #1
 8013096:	e040      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
 8013098:	40023800 	.word	0x40023800
 801309c:	40007000 	.word	0x40007000
 80130a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80130a4:	4b1f      	ldr	r3, [pc, #124]	; (8013124 <HAL_RCC_OscConfig+0x538>)
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	699b      	ldr	r3, [r3, #24]
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d030      	beq.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80130bc:	429a      	cmp	r2, r3
 80130be:	d129      	bne.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d122      	bne.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80130ce:	68fa      	ldr	r2, [r7, #12]
 80130d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80130d4:	4013      	ands	r3, r2
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80130da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80130dc:	4293      	cmp	r3, r2
 80130de:	d119      	bne.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ea:	085b      	lsrs	r3, r3, #1
 80130ec:	3b01      	subs	r3, #1
 80130ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d10f      	bne.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013100:	429a      	cmp	r2, r3
 8013102:	d107      	bne.n	8013114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801310e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013110:	429a      	cmp	r2, r3
 8013112:	d001      	beq.n	8013118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	e000      	b.n	801311a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8013118:	2300      	movs	r3, #0
}
 801311a:	4618      	mov	r0, r3
 801311c:	3718      	adds	r7, #24
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	40023800 	.word	0x40023800

08013128 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013134:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013140:	2b00      	cmp	r3, #0
 8013142:	d008      	beq.n	8013156 <HAL_SD_IRQHandler+0x2e>
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f003 0308 	and.w	r3, r3, #8
 801314a:	2b00      	cmp	r3, #0
 801314c:	d003      	beq.n	8013156 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fa20 	bl	8013594 <SD_Read_IT>
 8013154:	e155      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013160:	2b00      	cmp	r3, #0
 8013162:	f000 808f 	beq.w	8013284 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801316e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	6812      	ldr	r2, [r2, #0]
 801317a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 801317e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8013182:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f022 0201 	bic.w	r2, r2, #1
 8013192:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f003 0308 	and.w	r3, r3, #8
 801319a:	2b00      	cmp	r3, #0
 801319c:	d039      	beq.n	8013212 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f003 0302 	and.w	r3, r3, #2
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d104      	bne.n	80131b2 <HAL_SD_IRQHandler+0x8a>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f003 0320 	and.w	r3, r3, #32
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d011      	beq.n	80131d6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f000 fdbc 	bl	8013d34 <SDMMC_CmdStopTransfer>
 80131bc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d008      	beq.n	80131d6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	431a      	orrs	r2, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f000 f91f 	bl	8013414 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f240 523a 	movw	r2, #1338	; 0x53a
 80131de:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2201      	movs	r2, #1
 80131e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d104      	bne.n	8013202 <HAL_SD_IRQHandler+0xda>
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f001 ff5a 	bl	80150bc <HAL_SD_RxCpltCallback>
 8013208:	e0fb      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f001 ff4c 	bl	80150a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8013210:	e0f7      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013218:	2b00      	cmp	r3, #0
 801321a:	f000 80f2 	beq.w	8013402 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f003 0320 	and.w	r3, r3, #32
 8013224:	2b00      	cmp	r3, #0
 8013226:	d011      	beq.n	801324c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4618      	mov	r0, r3
 801322e:	f000 fd81 	bl	8013d34 <SDMMC_CmdStopTransfer>
 8013232:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d008      	beq.n	801324c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	431a      	orrs	r2, r3
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f000 f8e4 	bl	8013414 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f003 0301 	and.w	r3, r3, #1
 8013252:	2b00      	cmp	r3, #0
 8013254:	f040 80d5 	bne.w	8013402 <HAL_SD_IRQHandler+0x2da>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	f003 0302 	and.w	r3, r3, #2
 801325e:	2b00      	cmp	r3, #0
 8013260:	f040 80cf 	bne.w	8013402 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f022 0208 	bic.w	r2, r2, #8
 8013272:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2201      	movs	r2, #1
 8013278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f001 ff13 	bl	80150a8 <HAL_SD_TxCpltCallback>
}
 8013282:	e0be      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801328e:	2b00      	cmp	r3, #0
 8013290:	d008      	beq.n	80132a4 <HAL_SD_IRQHandler+0x17c>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f003 0308 	and.w	r3, r3, #8
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 f9ca 	bl	8013636 <SD_Write_IT>
 80132a2:	e0ae      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f000 80a7 	beq.w	8013402 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ba:	f003 0302 	and.w	r3, r3, #2
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d005      	beq.n	80132ce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	f043 0202 	orr.w	r2, r3, #2
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132d4:	f003 0308 	and.w	r3, r3, #8
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d005      	beq.n	80132e8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e0:	f043 0208 	orr.w	r2, r3, #8
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d005      	beq.n	8013302 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132fa:	f043 0220 	orr.w	r2, r3, #32
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013308:	f003 0310 	and.w	r3, r3, #16
 801330c:	2b00      	cmp	r3, #0
 801330e:	d005      	beq.n	801331c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013314:	f043 0210 	orr.w	r2, r3, #16
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f240 523a 	movw	r2, #1338	; 0x53a
 8013324:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8013334:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4618      	mov	r0, r3
 801333c:	f000 fcfa 	bl	8013d34 <SDMMC_CmdStopTransfer>
 8013340:	4602      	mov	r2, r0
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013346:	431a      	orrs	r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	f003 0308 	and.w	r3, r3, #8
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00a      	beq.n	801336c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2201      	movs	r2, #1
 801335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2200      	movs	r2, #0
 8013362:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f000 f855 	bl	8013414 <HAL_SD_ErrorCallback>
}
 801336a:	e04a      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013372:	2b00      	cmp	r3, #0
 8013374:	d045      	beq.n	8013402 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f003 0310 	and.w	r3, r3, #16
 801337c:	2b00      	cmp	r3, #0
 801337e:	d104      	bne.n	801338a <HAL_SD_IRQHandler+0x262>
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f003 0320 	and.w	r3, r3, #32
 8013386:	2b00      	cmp	r3, #0
 8013388:	d011      	beq.n	80133ae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801338e:	4a1f      	ldr	r2, [pc, #124]	; (801340c <HAL_SD_IRQHandler+0x2e4>)
 8013390:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013396:	4618      	mov	r0, r3
 8013398:	f7fd fcd5 	bl	8010d46 <HAL_DMA_Abort_IT>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d02f      	beq.n	8013402 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 f85e 	bl	8013468 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80133ac:	e029      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	f003 0301 	and.w	r3, r3, #1
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d104      	bne.n	80133c2 <HAL_SD_IRQHandler+0x29a>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	f003 0302 	and.w	r3, r3, #2
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d011      	beq.n	80133e6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133c6:	4a12      	ldr	r2, [pc, #72]	; (8013410 <HAL_SD_IRQHandler+0x2e8>)
 80133c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fd fcb9 	bl	8010d46 <HAL_DMA_Abort_IT>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d013      	beq.n	8013402 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 f879 	bl	80134d6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80133e4:	e00d      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2201      	movs	r2, #1
 80133f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2200      	movs	r2, #0
 80133f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f001 fe4a 	bl	8015094 <HAL_SD_AbortCallback>
}
 8013400:	e7ff      	b.n	8013402 <HAL_SD_IRQHandler+0x2da>
 8013402:	bf00      	nop
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	08013469 	.word	0x08013469
 8013410:	080134d7 	.word	0x080134d7

08013414 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8013414:	b480      	push	{r7}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801341c:	bf00      	nop
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8013430:	2300      	movs	r3, #0
 8013432:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8013434:	f107 030c 	add.w	r3, r7, #12
 8013438:	4619      	mov	r1, r3
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f000 f882 	bl	8013544 <SD_SendStatus>
 8013440:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d005      	beq.n	8013454 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	431a      	orrs	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	0a5b      	lsrs	r3, r3, #9
 8013458:	f003 030f 	and.w	r3, r3, #15
 801345c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801345e:	693b      	ldr	r3, [r7, #16]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3718      	adds	r7, #24
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013474:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f240 523a 	movw	r2, #1338	; 0x53a
 801347e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f7ff ffd1 	bl	8013428 <HAL_SD_GetCardState>
 8013486:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2201      	movs	r2, #1
 801348c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	2b06      	cmp	r3, #6
 801349a:	d002      	beq.n	80134a2 <SD_DMATxAbort+0x3a>
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	2b05      	cmp	r3, #5
 80134a0:	d10a      	bne.n	80134b8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4618      	mov	r0, r3
 80134a8:	f000 fc44 	bl	8013d34 <SDMMC_CmdStopTransfer>
 80134ac:	4602      	mov	r2, r0
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134b2:	431a      	orrs	r2, r3
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d103      	bne.n	80134c8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f001 fde7 	bl	8015094 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80134c6:	e002      	b.n	80134ce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80134c8:	68f8      	ldr	r0, [r7, #12]
 80134ca:	f7ff ffa3 	bl	8013414 <HAL_SD_ErrorCallback>
}
 80134ce:	bf00      	nop
 80134d0:	3710      	adds	r7, #16
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b084      	sub	sp, #16
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134e2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80134ec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f7ff ff9a 	bl	8013428 <HAL_SD_GetCardState>
 80134f4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2201      	movs	r2, #1
 80134fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2200      	movs	r2, #0
 8013502:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2b06      	cmp	r3, #6
 8013508:	d002      	beq.n	8013510 <SD_DMARxAbort+0x3a>
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	2b05      	cmp	r3, #5
 801350e:	d10a      	bne.n	8013526 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	4618      	mov	r0, r3
 8013516:	f000 fc0d 	bl	8013d34 <SDMMC_CmdStopTransfer>
 801351a:	4602      	mov	r2, r0
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013520:	431a      	orrs	r2, r3
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801352a:	2b00      	cmp	r3, #0
 801352c:	d103      	bne.n	8013536 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f001 fdb0 	bl	8015094 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8013534:	e002      	b.n	801353c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f7ff ff6c 	bl	8013414 <HAL_SD_ErrorCallback>
}
 801353c:	bf00      	nop
 801353e:	3710      	adds	r7, #16
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d102      	bne.n	801355a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8013554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013558:	e018      	b.n	801358c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013562:	041b      	lsls	r3, r3, #16
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f000 fc06 	bl	8013d78 <SDMMC_CmdSendStatus>
 801356c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d001      	beq.n	8013578 <SD_SendStatus+0x34>
  {
    return errorstate;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	e009      	b.n	801358c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2100      	movs	r1, #0
 801357e:	4618      	mov	r0, r3
 8013580:	f000 fbc5 	bl	8013d0e <SDIO_GetResponse>
 8013584:	4602      	mov	r2, r0
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801358a:	2300      	movs	r3, #0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3710      	adds	r7, #16
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b086      	sub	sp, #24
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d03f      	beq.n	801362e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80135ae:	2300      	movs	r3, #0
 80135b0:	617b      	str	r3, [r7, #20]
 80135b2:	e033      	b.n	801361c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f000 fb53 	bl	8013c64 <SDIO_ReadFIFO>
 80135be:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	b2da      	uxtb	r2, r3
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	3301      	adds	r3, #1
 80135cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	0a1b      	lsrs	r3, r3, #8
 80135d8:	b2da      	uxtb	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	3301      	adds	r3, #1
 80135e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	3b01      	subs	r3, #1
 80135e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	0c1b      	lsrs	r3, r3, #16
 80135ee:	b2da      	uxtb	r2, r3
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	3301      	adds	r3, #1
 80135f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	3b01      	subs	r3, #1
 80135fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	0e1b      	lsrs	r3, r3, #24
 8013604:	b2da      	uxtb	r2, r3
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	701a      	strb	r2, [r3, #0]
      tmp++;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	3301      	adds	r3, #1
 801360e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	3b01      	subs	r3, #1
 8013614:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	3301      	adds	r3, #1
 801361a:	617b      	str	r3, [r7, #20]
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	2b07      	cmp	r3, #7
 8013620:	d9c8      	bls.n	80135b4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	693a      	ldr	r2, [r7, #16]
 801362c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801362e:	bf00      	nop
 8013630:	3718      	adds	r7, #24
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b086      	sub	sp, #24
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6a1b      	ldr	r3, [r3, #32]
 8013642:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013648:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d043      	beq.n	80136d8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8013650:	2300      	movs	r3, #0
 8013652:	617b      	str	r3, [r7, #20]
 8013654:	e037      	b.n	80136c6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	3301      	adds	r3, #1
 8013660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	3b01      	subs	r3, #1
 8013666:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	021a      	lsls	r2, r3, #8
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	4313      	orrs	r3, r2
 8013672:	60bb      	str	r3, [r7, #8]
      tmp++;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	3301      	adds	r3, #1
 8013678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	3b01      	subs	r3, #1
 801367e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	041a      	lsls	r2, r3, #16
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	4313      	orrs	r3, r2
 801368a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	3301      	adds	r3, #1
 8013690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	3b01      	subs	r3, #1
 8013696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	061a      	lsls	r2, r3, #24
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	4313      	orrs	r3, r2
 80136a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	3301      	adds	r3, #1
 80136a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	3b01      	subs	r3, #1
 80136ae:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	f107 0208 	add.w	r2, r7, #8
 80136b8:	4611      	mov	r1, r2
 80136ba:	4618      	mov	r0, r3
 80136bc:	f000 fadf 	bl	8013c7e <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	3301      	adds	r3, #1
 80136c4:	617b      	str	r3, [r7, #20]
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	2b07      	cmp	r3, #7
 80136ca:	d9c4      	bls.n	8013656 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80136d8:	bf00      	nop
 80136da:	3718      	adds	r7, #24
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d101      	bne.n	80136f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80136ee:	2301      	movs	r3, #1
 80136f0:	e03f      	b.n	8013772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d106      	bne.n	801370c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2200      	movs	r2, #0
 8013702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7fd f8c4 	bl	8010894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2224      	movs	r2, #36	; 0x24
 8013710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	68da      	ldr	r2, [r3, #12]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f829 	bl	801377c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	691a      	ldr	r2, [r3, #16]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	695a      	ldr	r2, [r3, #20]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	68da      	ldr	r2, [r3, #12]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2220      	movs	r2, #32
 8013764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2220      	movs	r2, #32
 801376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3708      	adds	r7, #8
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
	...

0801377c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801377c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013780:	b0c0      	sub	sp, #256	; 0x100
 8013782:	af00      	add	r7, sp, #0
 8013784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	691b      	ldr	r3, [r3, #16]
 8013790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013798:	68d9      	ldr	r1, [r3, #12]
 801379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	ea40 0301 	orr.w	r3, r0, r1
 80137a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80137a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137aa:	689a      	ldr	r2, [r3, #8]
 80137ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	431a      	orrs	r2, r3
 80137b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137b8:	695b      	ldr	r3, [r3, #20]
 80137ba:	431a      	orrs	r2, r3
 80137bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137c0:	69db      	ldr	r3, [r3, #28]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80137c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80137d4:	f021 010c 	bic.w	r1, r1, #12
 80137d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80137e2:	430b      	orrs	r3, r1
 80137e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80137e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	695b      	ldr	r3, [r3, #20]
 80137ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80137f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137f6:	6999      	ldr	r1, [r3, #24]
 80137f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	ea40 0301 	orr.w	r3, r0, r1
 8013802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013808:	681a      	ldr	r2, [r3, #0]
 801380a:	4b8f      	ldr	r3, [pc, #572]	; (8013a48 <UART_SetConfig+0x2cc>)
 801380c:	429a      	cmp	r2, r3
 801380e:	d005      	beq.n	801381c <UART_SetConfig+0xa0>
 8013810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	4b8d      	ldr	r3, [pc, #564]	; (8013a4c <UART_SetConfig+0x2d0>)
 8013818:	429a      	cmp	r2, r3
 801381a:	d104      	bne.n	8013826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801381c:	f7fe ffa2 	bl	8012764 <HAL_RCC_GetPCLK2Freq>
 8013820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013824:	e003      	b.n	801382e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013826:	f7fe ff89 	bl	801273c <HAL_RCC_GetPCLK1Freq>
 801382a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013832:	69db      	ldr	r3, [r3, #28]
 8013834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013838:	f040 810c 	bne.w	8013a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013840:	2200      	movs	r2, #0
 8013842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801384a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801384e:	4622      	mov	r2, r4
 8013850:	462b      	mov	r3, r5
 8013852:	1891      	adds	r1, r2, r2
 8013854:	65b9      	str	r1, [r7, #88]	; 0x58
 8013856:	415b      	adcs	r3, r3
 8013858:	65fb      	str	r3, [r7, #92]	; 0x5c
 801385a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801385e:	4621      	mov	r1, r4
 8013860:	eb12 0801 	adds.w	r8, r2, r1
 8013864:	4629      	mov	r1, r5
 8013866:	eb43 0901 	adc.w	r9, r3, r1
 801386a:	f04f 0200 	mov.w	r2, #0
 801386e:	f04f 0300 	mov.w	r3, #0
 8013872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801387a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801387e:	4690      	mov	r8, r2
 8013880:	4699      	mov	r9, r3
 8013882:	4623      	mov	r3, r4
 8013884:	eb18 0303 	adds.w	r3, r8, r3
 8013888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801388c:	462b      	mov	r3, r5
 801388e:	eb49 0303 	adc.w	r3, r9, r3
 8013892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80138a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80138a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80138aa:	460b      	mov	r3, r1
 80138ac:	18db      	adds	r3, r3, r3
 80138ae:	653b      	str	r3, [r7, #80]	; 0x50
 80138b0:	4613      	mov	r3, r2
 80138b2:	eb42 0303 	adc.w	r3, r2, r3
 80138b6:	657b      	str	r3, [r7, #84]	; 0x54
 80138b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80138bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80138c0:	f7fc fca0 	bl	8010204 <__aeabi_uldivmod>
 80138c4:	4602      	mov	r2, r0
 80138c6:	460b      	mov	r3, r1
 80138c8:	4b61      	ldr	r3, [pc, #388]	; (8013a50 <UART_SetConfig+0x2d4>)
 80138ca:	fba3 2302 	umull	r2, r3, r3, r2
 80138ce:	095b      	lsrs	r3, r3, #5
 80138d0:	011c      	lsls	r4, r3, #4
 80138d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138d6:	2200      	movs	r2, #0
 80138d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80138dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80138e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80138e4:	4642      	mov	r2, r8
 80138e6:	464b      	mov	r3, r9
 80138e8:	1891      	adds	r1, r2, r2
 80138ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80138ec:	415b      	adcs	r3, r3
 80138ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80138f4:	4641      	mov	r1, r8
 80138f6:	eb12 0a01 	adds.w	sl, r2, r1
 80138fa:	4649      	mov	r1, r9
 80138fc:	eb43 0b01 	adc.w	fp, r3, r1
 8013900:	f04f 0200 	mov.w	r2, #0
 8013904:	f04f 0300 	mov.w	r3, #0
 8013908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801390c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013914:	4692      	mov	sl, r2
 8013916:	469b      	mov	fp, r3
 8013918:	4643      	mov	r3, r8
 801391a:	eb1a 0303 	adds.w	r3, sl, r3
 801391e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013922:	464b      	mov	r3, r9
 8013924:	eb4b 0303 	adc.w	r3, fp, r3
 8013928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	2200      	movs	r2, #0
 8013934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801393c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013940:	460b      	mov	r3, r1
 8013942:	18db      	adds	r3, r3, r3
 8013944:	643b      	str	r3, [r7, #64]	; 0x40
 8013946:	4613      	mov	r3, r2
 8013948:	eb42 0303 	adc.w	r3, r2, r3
 801394c:	647b      	str	r3, [r7, #68]	; 0x44
 801394e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013956:	f7fc fc55 	bl	8010204 <__aeabi_uldivmod>
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	4611      	mov	r1, r2
 8013960:	4b3b      	ldr	r3, [pc, #236]	; (8013a50 <UART_SetConfig+0x2d4>)
 8013962:	fba3 2301 	umull	r2, r3, r3, r1
 8013966:	095b      	lsrs	r3, r3, #5
 8013968:	2264      	movs	r2, #100	; 0x64
 801396a:	fb02 f303 	mul.w	r3, r2, r3
 801396e:	1acb      	subs	r3, r1, r3
 8013970:	00db      	lsls	r3, r3, #3
 8013972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8013976:	4b36      	ldr	r3, [pc, #216]	; (8013a50 <UART_SetConfig+0x2d4>)
 8013978:	fba3 2302 	umull	r2, r3, r3, r2
 801397c:	095b      	lsrs	r3, r3, #5
 801397e:	005b      	lsls	r3, r3, #1
 8013980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013984:	441c      	add	r4, r3
 8013986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801398a:	2200      	movs	r2, #0
 801398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8013994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8013998:	4642      	mov	r2, r8
 801399a:	464b      	mov	r3, r9
 801399c:	1891      	adds	r1, r2, r2
 801399e:	63b9      	str	r1, [r7, #56]	; 0x38
 80139a0:	415b      	adcs	r3, r3
 80139a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80139a8:	4641      	mov	r1, r8
 80139aa:	1851      	adds	r1, r2, r1
 80139ac:	6339      	str	r1, [r7, #48]	; 0x30
 80139ae:	4649      	mov	r1, r9
 80139b0:	414b      	adcs	r3, r1
 80139b2:	637b      	str	r3, [r7, #52]	; 0x34
 80139b4:	f04f 0200 	mov.w	r2, #0
 80139b8:	f04f 0300 	mov.w	r3, #0
 80139bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80139c0:	4659      	mov	r1, fp
 80139c2:	00cb      	lsls	r3, r1, #3
 80139c4:	4651      	mov	r1, sl
 80139c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80139ca:	4651      	mov	r1, sl
 80139cc:	00ca      	lsls	r2, r1, #3
 80139ce:	4610      	mov	r0, r2
 80139d0:	4619      	mov	r1, r3
 80139d2:	4603      	mov	r3, r0
 80139d4:	4642      	mov	r2, r8
 80139d6:	189b      	adds	r3, r3, r2
 80139d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80139dc:	464b      	mov	r3, r9
 80139de:	460a      	mov	r2, r1
 80139e0:	eb42 0303 	adc.w	r3, r2, r3
 80139e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80139e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80139f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80139f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80139fc:	460b      	mov	r3, r1
 80139fe:	18db      	adds	r3, r3, r3
 8013a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a02:	4613      	mov	r3, r2
 8013a04:	eb42 0303 	adc.w	r3, r2, r3
 8013a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013a12:	f7fc fbf7 	bl	8010204 <__aeabi_uldivmod>
 8013a16:	4602      	mov	r2, r0
 8013a18:	460b      	mov	r3, r1
 8013a1a:	4b0d      	ldr	r3, [pc, #52]	; (8013a50 <UART_SetConfig+0x2d4>)
 8013a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8013a20:	095b      	lsrs	r3, r3, #5
 8013a22:	2164      	movs	r1, #100	; 0x64
 8013a24:	fb01 f303 	mul.w	r3, r1, r3
 8013a28:	1ad3      	subs	r3, r2, r3
 8013a2a:	00db      	lsls	r3, r3, #3
 8013a2c:	3332      	adds	r3, #50	; 0x32
 8013a2e:	4a08      	ldr	r2, [pc, #32]	; (8013a50 <UART_SetConfig+0x2d4>)
 8013a30:	fba2 2303 	umull	r2, r3, r2, r3
 8013a34:	095b      	lsrs	r3, r3, #5
 8013a36:	f003 0207 	and.w	r2, r3, #7
 8013a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	4422      	add	r2, r4
 8013a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013a44:	e105      	b.n	8013c52 <UART_SetConfig+0x4d6>
 8013a46:	bf00      	nop
 8013a48:	40011000 	.word	0x40011000
 8013a4c:	40011400 	.word	0x40011400
 8013a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a58:	2200      	movs	r2, #0
 8013a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8013a66:	4642      	mov	r2, r8
 8013a68:	464b      	mov	r3, r9
 8013a6a:	1891      	adds	r1, r2, r2
 8013a6c:	6239      	str	r1, [r7, #32]
 8013a6e:	415b      	adcs	r3, r3
 8013a70:	627b      	str	r3, [r7, #36]	; 0x24
 8013a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013a76:	4641      	mov	r1, r8
 8013a78:	1854      	adds	r4, r2, r1
 8013a7a:	4649      	mov	r1, r9
 8013a7c:	eb43 0501 	adc.w	r5, r3, r1
 8013a80:	f04f 0200 	mov.w	r2, #0
 8013a84:	f04f 0300 	mov.w	r3, #0
 8013a88:	00eb      	lsls	r3, r5, #3
 8013a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013a8e:	00e2      	lsls	r2, r4, #3
 8013a90:	4614      	mov	r4, r2
 8013a92:	461d      	mov	r5, r3
 8013a94:	4643      	mov	r3, r8
 8013a96:	18e3      	adds	r3, r4, r3
 8013a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013a9c:	464b      	mov	r3, r9
 8013a9e:	eb45 0303 	adc.w	r3, r5, r3
 8013aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013ab6:	f04f 0200 	mov.w	r2, #0
 8013aba:	f04f 0300 	mov.w	r3, #0
 8013abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013ac2:	4629      	mov	r1, r5
 8013ac4:	008b      	lsls	r3, r1, #2
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013acc:	4621      	mov	r1, r4
 8013ace:	008a      	lsls	r2, r1, #2
 8013ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013ad4:	f7fc fb96 	bl	8010204 <__aeabi_uldivmod>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	4b60      	ldr	r3, [pc, #384]	; (8013c60 <UART_SetConfig+0x4e4>)
 8013ade:	fba3 2302 	umull	r2, r3, r3, r2
 8013ae2:	095b      	lsrs	r3, r3, #5
 8013ae4:	011c      	lsls	r4, r3, #4
 8013ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013aea:	2200      	movs	r2, #0
 8013aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8013af8:	4642      	mov	r2, r8
 8013afa:	464b      	mov	r3, r9
 8013afc:	1891      	adds	r1, r2, r2
 8013afe:	61b9      	str	r1, [r7, #24]
 8013b00:	415b      	adcs	r3, r3
 8013b02:	61fb      	str	r3, [r7, #28]
 8013b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013b08:	4641      	mov	r1, r8
 8013b0a:	1851      	adds	r1, r2, r1
 8013b0c:	6139      	str	r1, [r7, #16]
 8013b0e:	4649      	mov	r1, r9
 8013b10:	414b      	adcs	r3, r1
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	f04f 0200 	mov.w	r2, #0
 8013b18:	f04f 0300 	mov.w	r3, #0
 8013b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013b20:	4659      	mov	r1, fp
 8013b22:	00cb      	lsls	r3, r1, #3
 8013b24:	4651      	mov	r1, sl
 8013b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013b2a:	4651      	mov	r1, sl
 8013b2c:	00ca      	lsls	r2, r1, #3
 8013b2e:	4610      	mov	r0, r2
 8013b30:	4619      	mov	r1, r3
 8013b32:	4603      	mov	r3, r0
 8013b34:	4642      	mov	r2, r8
 8013b36:	189b      	adds	r3, r3, r2
 8013b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013b3c:	464b      	mov	r3, r9
 8013b3e:	460a      	mov	r2, r1
 8013b40:	eb42 0303 	adc.w	r3, r2, r3
 8013b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8013b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013b54:	f04f 0200 	mov.w	r2, #0
 8013b58:	f04f 0300 	mov.w	r3, #0
 8013b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8013b60:	4649      	mov	r1, r9
 8013b62:	008b      	lsls	r3, r1, #2
 8013b64:	4641      	mov	r1, r8
 8013b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013b6a:	4641      	mov	r1, r8
 8013b6c:	008a      	lsls	r2, r1, #2
 8013b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013b72:	f7fc fb47 	bl	8010204 <__aeabi_uldivmod>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4b39      	ldr	r3, [pc, #228]	; (8013c60 <UART_SetConfig+0x4e4>)
 8013b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8013b80:	095b      	lsrs	r3, r3, #5
 8013b82:	2164      	movs	r1, #100	; 0x64
 8013b84:	fb01 f303 	mul.w	r3, r1, r3
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	011b      	lsls	r3, r3, #4
 8013b8c:	3332      	adds	r3, #50	; 0x32
 8013b8e:	4a34      	ldr	r2, [pc, #208]	; (8013c60 <UART_SetConfig+0x4e4>)
 8013b90:	fba2 2303 	umull	r2, r3, r2, r3
 8013b94:	095b      	lsrs	r3, r3, #5
 8013b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b9a:	441c      	add	r4, r3
 8013b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8013ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8013ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013baa:	4642      	mov	r2, r8
 8013bac:	464b      	mov	r3, r9
 8013bae:	1891      	adds	r1, r2, r2
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	415b      	adcs	r3, r3
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013bba:	4641      	mov	r1, r8
 8013bbc:	1851      	adds	r1, r2, r1
 8013bbe:	6039      	str	r1, [r7, #0]
 8013bc0:	4649      	mov	r1, r9
 8013bc2:	414b      	adcs	r3, r1
 8013bc4:	607b      	str	r3, [r7, #4]
 8013bc6:	f04f 0200 	mov.w	r2, #0
 8013bca:	f04f 0300 	mov.w	r3, #0
 8013bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013bd2:	4659      	mov	r1, fp
 8013bd4:	00cb      	lsls	r3, r1, #3
 8013bd6:	4651      	mov	r1, sl
 8013bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013bdc:	4651      	mov	r1, sl
 8013bde:	00ca      	lsls	r2, r1, #3
 8013be0:	4610      	mov	r0, r2
 8013be2:	4619      	mov	r1, r3
 8013be4:	4603      	mov	r3, r0
 8013be6:	4642      	mov	r2, r8
 8013be8:	189b      	adds	r3, r3, r2
 8013bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8013bec:	464b      	mov	r3, r9
 8013bee:	460a      	mov	r2, r1
 8013bf0:	eb42 0303 	adc.w	r3, r2, r3
 8013bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8013c00:	667a      	str	r2, [r7, #100]	; 0x64
 8013c02:	f04f 0200 	mov.w	r2, #0
 8013c06:	f04f 0300 	mov.w	r3, #0
 8013c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013c0e:	4649      	mov	r1, r9
 8013c10:	008b      	lsls	r3, r1, #2
 8013c12:	4641      	mov	r1, r8
 8013c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013c18:	4641      	mov	r1, r8
 8013c1a:	008a      	lsls	r2, r1, #2
 8013c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013c20:	f7fc faf0 	bl	8010204 <__aeabi_uldivmod>
 8013c24:	4602      	mov	r2, r0
 8013c26:	460b      	mov	r3, r1
 8013c28:	4b0d      	ldr	r3, [pc, #52]	; (8013c60 <UART_SetConfig+0x4e4>)
 8013c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8013c2e:	095b      	lsrs	r3, r3, #5
 8013c30:	2164      	movs	r1, #100	; 0x64
 8013c32:	fb01 f303 	mul.w	r3, r1, r3
 8013c36:	1ad3      	subs	r3, r2, r3
 8013c38:	011b      	lsls	r3, r3, #4
 8013c3a:	3332      	adds	r3, #50	; 0x32
 8013c3c:	4a08      	ldr	r2, [pc, #32]	; (8013c60 <UART_SetConfig+0x4e4>)
 8013c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c42:	095b      	lsrs	r3, r3, #5
 8013c44:	f003 020f 	and.w	r2, r3, #15
 8013c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4422      	add	r2, r4
 8013c50:	609a      	str	r2, [r3, #8]
}
 8013c52:	bf00      	nop
 8013c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013c5e:	bf00      	nop
 8013c60:	51eb851f 	.word	0x51eb851f

08013c64 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	370c      	adds	r7, #12
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr

08013c7e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8013c7e:	b480      	push	{r7}
 8013c80:	b083      	sub	sp, #12
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	6078      	str	r0, [r7, #4]
 8013c86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013c92:	2300      	movs	r3, #0
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	370c      	adds	r7, #12
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013cbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8013cc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8013cca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013ccc:	68fa      	ldr	r2, [r7, #12]
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013cda:	f023 030f 	bic.w	r3, r3, #15
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	431a      	orrs	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3714      	adds	r7, #20
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	691b      	ldr	r3, [r3, #16]
 8013d00:	b2db      	uxtb	r3, r3
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	370c      	adds	r7, #12
 8013d06:	46bd      	mov	sp, r7
 8013d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0c:	4770      	bx	lr

08013d0e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8013d0e:	b480      	push	{r7}
 8013d10:	b085      	sub	sp, #20
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	3314      	adds	r3, #20
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	4413      	add	r3, r2
 8013d22:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681b      	ldr	r3, [r3, #0]
}  
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3714      	adds	r7, #20
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr

08013d34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b088      	sub	sp, #32
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013d40:	230c      	movs	r3, #12
 8013d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013d44:	2340      	movs	r3, #64	; 0x40
 8013d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013d52:	f107 0308 	add.w	r3, r7, #8
 8013d56:	4619      	mov	r1, r3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff ffa1 	bl	8013ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8013d5e:	4a05      	ldr	r2, [pc, #20]	; (8013d74 <SDMMC_CmdStopTransfer+0x40>)
 8013d60:	210c      	movs	r1, #12
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 f82a 	bl	8013dbc <SDMMC_GetCmdResp1>
 8013d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d6a:	69fb      	ldr	r3, [r7, #28]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3720      	adds	r7, #32
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	05f5e100 	.word	0x05f5e100

08013d78 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b088      	sub	sp, #32
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013d86:	230d      	movs	r3, #13
 8013d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013d8a:	2340      	movs	r3, #64	; 0x40
 8013d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013d98:	f107 0308 	add.w	r3, r7, #8
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7ff ff7e 	bl	8013ca0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8013da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013da8:	210d      	movs	r1, #13
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f000 f806 	bl	8013dbc <SDMMC_GetCmdResp1>
 8013db0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013db2:	69fb      	ldr	r3, [r7, #28]
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3720      	adds	r7, #32
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b088      	sub	sp, #32
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	60f8      	str	r0, [r7, #12]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	607a      	str	r2, [r7, #4]
 8013dc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013dca:	4b70      	ldr	r3, [pc, #448]	; (8013f8c <SDMMC_GetCmdResp1+0x1d0>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4a70      	ldr	r2, [pc, #448]	; (8013f90 <SDMMC_GetCmdResp1+0x1d4>)
 8013dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8013dd4:	0a5a      	lsrs	r2, r3, #9
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	fb02 f303 	mul.w	r3, r2, r3
 8013ddc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	1e5a      	subs	r2, r3, #1
 8013de2:	61fa      	str	r2, [r7, #28]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d102      	bne.n	8013dee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013dec:	e0c9      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013df2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0ef      	beq.n	8013dde <SDMMC_GetCmdResp1+0x22>
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d1ea      	bne.n	8013dde <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e0c:	f003 0304 	and.w	r3, r3, #4
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d004      	beq.n	8013e1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	2204      	movs	r2, #4
 8013e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013e1a:	2304      	movs	r3, #4
 8013e1c:	e0b1      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e22:	f003 0301 	and.w	r3, r3, #1
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d004      	beq.n	8013e34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e30:	2301      	movs	r3, #1
 8013e32:	e0a6      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	22c5      	movs	r2, #197	; 0xc5
 8013e38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f7ff ff5a 	bl	8013cf4 <SDIO_GetCommandResponse>
 8013e40:	4603      	mov	r3, r0
 8013e42:	461a      	mov	r2, r3
 8013e44:	7afb      	ldrb	r3, [r7, #11]
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d001      	beq.n	8013e4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e099      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8013e4e:	2100      	movs	r1, #0
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f7ff ff5c 	bl	8013d0e <SDIO_GetResponse>
 8013e56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	4b4e      	ldr	r3, [pc, #312]	; (8013f94 <SDMMC_GetCmdResp1+0x1d8>)
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d101      	bne.n	8013e66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013e62:	2300      	movs	r3, #0
 8013e64:	e08d      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	da02      	bge.n	8013e72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013e70:	e087      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d001      	beq.n	8013e80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013e7c:	2340      	movs	r3, #64	; 0x40
 8013e7e:	e080      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013e8a:	2380      	movs	r3, #128	; 0x80
 8013e8c:	e079      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d002      	beq.n	8013e9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e9c:	e071      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d002      	beq.n	8013eae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013eac:	e069      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d002      	beq.n	8013ebe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ebc:	e061      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d002      	beq.n	8013ece <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ecc:	e059      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013edc:	e051      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d002      	beq.n	8013eee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013eec:	e049      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d002      	beq.n	8013efe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013efc:	e041      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013f0c:	e039      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013f1c:	e031      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d002      	beq.n	8013f2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013f2c:	e029      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d002      	beq.n	8013f3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013f38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013f3c:	e021      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d002      	beq.n	8013f4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013f48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013f4c:	e019      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d002      	beq.n	8013f5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013f58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013f5c:	e011      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d002      	beq.n	8013f6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013f68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013f6c:	e009      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	f003 0308 	and.w	r3, r3, #8
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013f78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013f7c:	e001      	b.n	8013f82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3720      	adds	r7, #32
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20000000 	.word	0x20000000
 8013f90:	10624dd3 	.word	0x10624dd3
 8013f94:	fdffe008 	.word	0xfdffe008

08013f98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b087      	sub	sp, #28
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013fa6:	79fb      	ldrb	r3, [r7, #7]
 8013fa8:	2b02      	cmp	r3, #2
 8013faa:	d165      	bne.n	8014078 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	4a41      	ldr	r2, [pc, #260]	; (80140b4 <USB_SetTurnaroundTime+0x11c>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d906      	bls.n	8013fc2 <USB_SetTurnaroundTime+0x2a>
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	4a40      	ldr	r2, [pc, #256]	; (80140b8 <USB_SetTurnaroundTime+0x120>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d202      	bcs.n	8013fc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013fbc:	230f      	movs	r3, #15
 8013fbe:	617b      	str	r3, [r7, #20]
 8013fc0:	e062      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	4a3c      	ldr	r2, [pc, #240]	; (80140b8 <USB_SetTurnaroundTime+0x120>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d306      	bcc.n	8013fd8 <USB_SetTurnaroundTime+0x40>
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	4a3b      	ldr	r2, [pc, #236]	; (80140bc <USB_SetTurnaroundTime+0x124>)
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	d202      	bcs.n	8013fd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013fd2:	230e      	movs	r3, #14
 8013fd4:	617b      	str	r3, [r7, #20]
 8013fd6:	e057      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	4a38      	ldr	r2, [pc, #224]	; (80140bc <USB_SetTurnaroundTime+0x124>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d306      	bcc.n	8013fee <USB_SetTurnaroundTime+0x56>
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	4a37      	ldr	r2, [pc, #220]	; (80140c0 <USB_SetTurnaroundTime+0x128>)
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d202      	bcs.n	8013fee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013fe8:	230d      	movs	r3, #13
 8013fea:	617b      	str	r3, [r7, #20]
 8013fec:	e04c      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	4a33      	ldr	r2, [pc, #204]	; (80140c0 <USB_SetTurnaroundTime+0x128>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d306      	bcc.n	8014004 <USB_SetTurnaroundTime+0x6c>
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	4a32      	ldr	r2, [pc, #200]	; (80140c4 <USB_SetTurnaroundTime+0x12c>)
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d802      	bhi.n	8014004 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013ffe:	230c      	movs	r3, #12
 8014000:	617b      	str	r3, [r7, #20]
 8014002:	e041      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	4a2f      	ldr	r2, [pc, #188]	; (80140c4 <USB_SetTurnaroundTime+0x12c>)
 8014008:	4293      	cmp	r3, r2
 801400a:	d906      	bls.n	801401a <USB_SetTurnaroundTime+0x82>
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	4a2e      	ldr	r2, [pc, #184]	; (80140c8 <USB_SetTurnaroundTime+0x130>)
 8014010:	4293      	cmp	r3, r2
 8014012:	d802      	bhi.n	801401a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014014:	230b      	movs	r3, #11
 8014016:	617b      	str	r3, [r7, #20]
 8014018:	e036      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	4a2a      	ldr	r2, [pc, #168]	; (80140c8 <USB_SetTurnaroundTime+0x130>)
 801401e:	4293      	cmp	r3, r2
 8014020:	d906      	bls.n	8014030 <USB_SetTurnaroundTime+0x98>
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	4a29      	ldr	r2, [pc, #164]	; (80140cc <USB_SetTurnaroundTime+0x134>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d802      	bhi.n	8014030 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801402a:	230a      	movs	r3, #10
 801402c:	617b      	str	r3, [r7, #20]
 801402e:	e02b      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	4a26      	ldr	r2, [pc, #152]	; (80140cc <USB_SetTurnaroundTime+0x134>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d906      	bls.n	8014046 <USB_SetTurnaroundTime+0xae>
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	4a25      	ldr	r2, [pc, #148]	; (80140d0 <USB_SetTurnaroundTime+0x138>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d202      	bcs.n	8014046 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014040:	2309      	movs	r3, #9
 8014042:	617b      	str	r3, [r7, #20]
 8014044:	e020      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	4a21      	ldr	r2, [pc, #132]	; (80140d0 <USB_SetTurnaroundTime+0x138>)
 801404a:	4293      	cmp	r3, r2
 801404c:	d306      	bcc.n	801405c <USB_SetTurnaroundTime+0xc4>
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	4a20      	ldr	r2, [pc, #128]	; (80140d4 <USB_SetTurnaroundTime+0x13c>)
 8014052:	4293      	cmp	r3, r2
 8014054:	d802      	bhi.n	801405c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014056:	2308      	movs	r3, #8
 8014058:	617b      	str	r3, [r7, #20]
 801405a:	e015      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	4a1d      	ldr	r2, [pc, #116]	; (80140d4 <USB_SetTurnaroundTime+0x13c>)
 8014060:	4293      	cmp	r3, r2
 8014062:	d906      	bls.n	8014072 <USB_SetTurnaroundTime+0xda>
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	4a1c      	ldr	r2, [pc, #112]	; (80140d8 <USB_SetTurnaroundTime+0x140>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d202      	bcs.n	8014072 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801406c:	2307      	movs	r3, #7
 801406e:	617b      	str	r3, [r7, #20]
 8014070:	e00a      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014072:	2306      	movs	r3, #6
 8014074:	617b      	str	r3, [r7, #20]
 8014076:	e007      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014078:	79fb      	ldrb	r3, [r7, #7]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d102      	bne.n	8014084 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801407e:	2309      	movs	r3, #9
 8014080:	617b      	str	r3, [r7, #20]
 8014082:	e001      	b.n	8014088 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014084:	2309      	movs	r3, #9
 8014086:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	68da      	ldr	r2, [r3, #12]
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	029b      	lsls	r3, r3, #10
 801409c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80140a0:	431a      	orrs	r2, r3
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	371c      	adds	r7, #28
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr
 80140b4:	00d8acbf 	.word	0x00d8acbf
 80140b8:	00e4e1c0 	.word	0x00e4e1c0
 80140bc:	00f42400 	.word	0x00f42400
 80140c0:	01067380 	.word	0x01067380
 80140c4:	011a499f 	.word	0x011a499f
 80140c8:	01312cff 	.word	0x01312cff
 80140cc:	014ca43f 	.word	0x014ca43f
 80140d0:	016e3600 	.word	0x016e3600
 80140d4:	01a6ab1f 	.word	0x01a6ab1f
 80140d8:	01e84800 	.word	0x01e84800

080140dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80140dc:	b480      	push	{r7}
 80140de:	b085      	sub	sp, #20
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80140e6:	2300      	movs	r3, #0
 80140e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	3301      	adds	r3, #1
 80140ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	4a13      	ldr	r2, [pc, #76]	; (8014140 <USB_FlushTxFifo+0x64>)
 80140f4:	4293      	cmp	r3, r2
 80140f6:	d901      	bls.n	80140fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80140f8:	2303      	movs	r3, #3
 80140fa:	e01b      	b.n	8014134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	691b      	ldr	r3, [r3, #16]
 8014100:	2b00      	cmp	r3, #0
 8014102:	daf2      	bge.n	80140ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014104:	2300      	movs	r3, #0
 8014106:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	019b      	lsls	r3, r3, #6
 801410c:	f043 0220 	orr.w	r2, r3, #32
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	3301      	adds	r3, #1
 8014118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	4a08      	ldr	r2, [pc, #32]	; (8014140 <USB_FlushTxFifo+0x64>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d901      	bls.n	8014126 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014122:	2303      	movs	r3, #3
 8014124:	e006      	b.n	8014134 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	691b      	ldr	r3, [r3, #16]
 801412a:	f003 0320 	and.w	r3, r3, #32
 801412e:	2b20      	cmp	r3, #32
 8014130:	d0f0      	beq.n	8014114 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	3714      	adds	r7, #20
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr
 8014140:	00030d40 	.word	0x00030d40

08014144 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014144:	b480      	push	{r7}
 8014146:	b087      	sub	sp, #28
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	f003 0306 	and.w	r3, r3, #6
 801415c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d102      	bne.n	801416a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014164:	2300      	movs	r3, #0
 8014166:	75fb      	strb	r3, [r7, #23]
 8014168:	e00a      	b.n	8014180 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2b02      	cmp	r3, #2
 801416e:	d002      	beq.n	8014176 <USB_GetDevSpeed+0x32>
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2b06      	cmp	r3, #6
 8014174:	d102      	bne.n	801417c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014176:	2302      	movs	r3, #2
 8014178:	75fb      	strb	r3, [r7, #23]
 801417a:	e001      	b.n	8014180 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801417c:	230f      	movs	r3, #15
 801417e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014180:	7dfb      	ldrb	r3, [r7, #23]
}
 8014182:	4618      	mov	r0, r3
 8014184:	371c      	adds	r7, #28
 8014186:	46bd      	mov	sp, r7
 8014188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418c:	4770      	bx	lr

0801418e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801418e:	b480      	push	{r7}
 8014190:	b085      	sub	sp, #20
 8014192:	af00      	add	r7, sp, #0
 8014194:	6078      	str	r0, [r7, #4]
 8014196:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d13a      	bne.n	8014220 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141b0:	69da      	ldr	r2, [r3, #28]
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	f003 030f 	and.w	r3, r3, #15
 80141ba:	2101      	movs	r1, #1
 80141bc:	fa01 f303 	lsl.w	r3, r1, r3
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	68f9      	ldr	r1, [r7, #12]
 80141c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141c8:	4313      	orrs	r3, r2
 80141ca:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	015a      	lsls	r2, r3, #5
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4413      	add	r3, r2
 80141d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d155      	bne.n	801428e <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	015a      	lsls	r2, r3, #5
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	4413      	add	r3, r2
 80141ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	68db      	ldr	r3, [r3, #12]
 80141f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	791b      	ldrb	r3, [r3, #4]
 80141fc:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80141fe:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	059b      	lsls	r3, r3, #22
 8014204:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014206:	4313      	orrs	r3, r2
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	0151      	lsls	r1, r2, #5
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	440a      	add	r2, r1
 8014210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801421c:	6013      	str	r3, [r2, #0]
 801421e:	e036      	b.n	801428e <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014226:	69da      	ldr	r2, [r3, #28]
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	f003 030f 	and.w	r3, r3, #15
 8014230:	2101      	movs	r1, #1
 8014232:	fa01 f303 	lsl.w	r3, r1, r3
 8014236:	041b      	lsls	r3, r3, #16
 8014238:	68f9      	ldr	r1, [r7, #12]
 801423a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801423e:	4313      	orrs	r3, r2
 8014240:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	015a      	lsls	r2, r3, #5
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	4413      	add	r3, r2
 801424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014254:	2b00      	cmp	r3, #0
 8014256:	d11a      	bne.n	801428e <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	015a      	lsls	r2, r3, #5
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	4413      	add	r3, r2
 8014260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	791b      	ldrb	r3, [r3, #4]
 8014272:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014274:	430b      	orrs	r3, r1
 8014276:	4313      	orrs	r3, r2
 8014278:	68ba      	ldr	r2, [r7, #8]
 801427a:	0151      	lsls	r1, r2, #5
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	440a      	add	r2, r1
 8014280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801428c:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3714      	adds	r7, #20
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr

0801429c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b08a      	sub	sp, #40	; 0x28
 80142a0:	af02      	add	r7, sp, #8
 80142a2:	60f8      	str	r0, [r7, #12]
 80142a4:	60b9      	str	r1, [r7, #8]
 80142a6:	4613      	mov	r3, r2
 80142a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	785b      	ldrb	r3, [r3, #1]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	f040 815c 	bne.w	8014576 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	699b      	ldr	r3, [r3, #24]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d132      	bne.n	801432c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	015a      	lsls	r2, r3, #5
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	4413      	add	r3, r2
 80142ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142d2:	691b      	ldr	r3, [r3, #16]
 80142d4:	69ba      	ldr	r2, [r7, #24]
 80142d6:	0151      	lsls	r1, r2, #5
 80142d8:	69fa      	ldr	r2, [r7, #28]
 80142da:	440a      	add	r2, r1
 80142dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80142e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80142e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	015a      	lsls	r2, r3, #5
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	4413      	add	r3, r2
 80142f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f6:	691b      	ldr	r3, [r3, #16]
 80142f8:	69ba      	ldr	r2, [r7, #24]
 80142fa:	0151      	lsls	r1, r2, #5
 80142fc:	69fa      	ldr	r2, [r7, #28]
 80142fe:	440a      	add	r2, r1
 8014300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	015a      	lsls	r2, r3, #5
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	4413      	add	r3, r2
 8014312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014316:	691b      	ldr	r3, [r3, #16]
 8014318:	69ba      	ldr	r2, [r7, #24]
 801431a:	0151      	lsls	r1, r2, #5
 801431c:	69fa      	ldr	r2, [r7, #28]
 801431e:	440a      	add	r2, r1
 8014320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014324:	0cdb      	lsrs	r3, r3, #19
 8014326:	04db      	lsls	r3, r3, #19
 8014328:	6113      	str	r3, [r2, #16]
 801432a:	e074      	b.n	8014416 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	015a      	lsls	r2, r3, #5
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	4413      	add	r3, r2
 8014334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014338:	691b      	ldr	r3, [r3, #16]
 801433a:	69ba      	ldr	r2, [r7, #24]
 801433c:	0151      	lsls	r1, r2, #5
 801433e:	69fa      	ldr	r2, [r7, #28]
 8014340:	440a      	add	r2, r1
 8014342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014346:	0cdb      	lsrs	r3, r3, #19
 8014348:	04db      	lsls	r3, r3, #19
 801434a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	015a      	lsls	r2, r3, #5
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	4413      	add	r3, r2
 8014354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014358:	691b      	ldr	r3, [r3, #16]
 801435a:	69ba      	ldr	r2, [r7, #24]
 801435c:	0151      	lsls	r1, r2, #5
 801435e:	69fa      	ldr	r2, [r7, #28]
 8014360:	440a      	add	r2, r1
 8014362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801436a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801436e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	015a      	lsls	r2, r3, #5
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	4413      	add	r3, r2
 8014378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801437c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	6999      	ldr	r1, [r3, #24]
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	440b      	add	r3, r1
 8014388:	1e59      	subs	r1, r3, #1
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014392:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014394:	4b9d      	ldr	r3, [pc, #628]	; (801460c <USB_EPStartXfer+0x370>)
 8014396:	400b      	ands	r3, r1
 8014398:	69b9      	ldr	r1, [r7, #24]
 801439a:	0148      	lsls	r0, r1, #5
 801439c:	69f9      	ldr	r1, [r7, #28]
 801439e:	4401      	add	r1, r0
 80143a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143a4:	4313      	orrs	r3, r2
 80143a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	015a      	lsls	r2, r3, #5
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	4413      	add	r3, r2
 80143b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143b4:	691a      	ldr	r2, [r3, #16]
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	699b      	ldr	r3, [r3, #24]
 80143ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143be:	69b9      	ldr	r1, [r7, #24]
 80143c0:	0148      	lsls	r0, r1, #5
 80143c2:	69f9      	ldr	r1, [r7, #28]
 80143c4:	4401      	add	r1, r0
 80143c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143ca:	4313      	orrs	r3, r2
 80143cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	791b      	ldrb	r3, [r3, #4]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d11f      	bne.n	8014416 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	015a      	lsls	r2, r3, #5
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	4413      	add	r3, r2
 80143de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e2:	691b      	ldr	r3, [r3, #16]
 80143e4:	69ba      	ldr	r2, [r7, #24]
 80143e6:	0151      	lsls	r1, r2, #5
 80143e8:	69fa      	ldr	r2, [r7, #28]
 80143ea:	440a      	add	r2, r1
 80143ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80143f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	015a      	lsls	r2, r3, #5
 80143fa:	69fb      	ldr	r3, [r7, #28]
 80143fc:	4413      	add	r3, r2
 80143fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014402:	691b      	ldr	r3, [r3, #16]
 8014404:	69ba      	ldr	r2, [r7, #24]
 8014406:	0151      	lsls	r1, r2, #5
 8014408:	69fa      	ldr	r2, [r7, #28]
 801440a:	440a      	add	r2, r1
 801440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014414:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014416:	79fb      	ldrb	r3, [r7, #7]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d14b      	bne.n	80144b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	695b      	ldr	r3, [r3, #20]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d009      	beq.n	8014438 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014424:	69bb      	ldr	r3, [r7, #24]
 8014426:	015a      	lsls	r2, r3, #5
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	4413      	add	r3, r2
 801442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014430:	461a      	mov	r2, r3
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	695b      	ldr	r3, [r3, #20]
 8014436:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	791b      	ldrb	r3, [r3, #4]
 801443c:	2b01      	cmp	r3, #1
 801443e:	d128      	bne.n	8014492 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801444c:	2b00      	cmp	r3, #0
 801444e:	d110      	bne.n	8014472 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	015a      	lsls	r2, r3, #5
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	4413      	add	r3, r2
 8014458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	69ba      	ldr	r2, [r7, #24]
 8014460:	0151      	lsls	r1, r2, #5
 8014462:	69fa      	ldr	r2, [r7, #28]
 8014464:	440a      	add	r2, r1
 8014466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801446a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801446e:	6013      	str	r3, [r2, #0]
 8014470:	e00f      	b.n	8014492 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	015a      	lsls	r2, r3, #5
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	4413      	add	r3, r2
 801447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	69ba      	ldr	r2, [r7, #24]
 8014482:	0151      	lsls	r1, r2, #5
 8014484:	69fa      	ldr	r2, [r7, #28]
 8014486:	440a      	add	r2, r1
 8014488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014490:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	015a      	lsls	r2, r3, #5
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	4413      	add	r3, r2
 801449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	69ba      	ldr	r2, [r7, #24]
 80144a2:	0151      	lsls	r1, r2, #5
 80144a4:	69fa      	ldr	r2, [r7, #28]
 80144a6:	440a      	add	r2, r1
 80144a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144b0:	6013      	str	r3, [r2, #0]
 80144b2:	e133      	b.n	801471c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	015a      	lsls	r2, r3, #5
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	4413      	add	r3, r2
 80144bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	69ba      	ldr	r2, [r7, #24]
 80144c4:	0151      	lsls	r1, r2, #5
 80144c6:	69fa      	ldr	r2, [r7, #28]
 80144c8:	440a      	add	r2, r1
 80144ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	791b      	ldrb	r3, [r3, #4]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d015      	beq.n	8014508 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	699b      	ldr	r3, [r3, #24]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f000 811b 	beq.w	801471c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f003 030f 	and.w	r3, r3, #15
 80144f6:	2101      	movs	r1, #1
 80144f8:	fa01 f303 	lsl.w	r3, r1, r3
 80144fc:	69f9      	ldr	r1, [r7, #28]
 80144fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014502:	4313      	orrs	r3, r2
 8014504:	634b      	str	r3, [r1, #52]	; 0x34
 8014506:	e109      	b.n	801471c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014514:	2b00      	cmp	r3, #0
 8014516:	d110      	bne.n	801453a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	015a      	lsls	r2, r3, #5
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	4413      	add	r3, r2
 8014520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	69ba      	ldr	r2, [r7, #24]
 8014528:	0151      	lsls	r1, r2, #5
 801452a:	69fa      	ldr	r2, [r7, #28]
 801452c:	440a      	add	r2, r1
 801452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014536:	6013      	str	r3, [r2, #0]
 8014538:	e00f      	b.n	801455a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	015a      	lsls	r2, r3, #5
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	4413      	add	r3, r2
 8014542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	69ba      	ldr	r2, [r7, #24]
 801454a:	0151      	lsls	r1, r2, #5
 801454c:	69fa      	ldr	r2, [r7, #28]
 801454e:	440a      	add	r2, r1
 8014550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014558:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	6919      	ldr	r1, [r3, #16]
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	781a      	ldrb	r2, [r3, #0]
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	699b      	ldr	r3, [r3, #24]
 8014566:	b298      	uxth	r0, r3
 8014568:	79fb      	ldrb	r3, [r7, #7]
 801456a:	9300      	str	r3, [sp, #0]
 801456c:	4603      	mov	r3, r0
 801456e:	68f8      	ldr	r0, [r7, #12]
 8014570:	f000 fade 	bl	8014b30 <USB_WritePacket>
 8014574:	e0d2      	b.n	801471c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	015a      	lsls	r2, r3, #5
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	4413      	add	r3, r2
 801457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014582:	691b      	ldr	r3, [r3, #16]
 8014584:	69ba      	ldr	r2, [r7, #24]
 8014586:	0151      	lsls	r1, r2, #5
 8014588:	69fa      	ldr	r2, [r7, #28]
 801458a:	440a      	add	r2, r1
 801458c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014590:	0cdb      	lsrs	r3, r3, #19
 8014592:	04db      	lsls	r3, r3, #19
 8014594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	015a      	lsls	r2, r3, #5
 801459a:	69fb      	ldr	r3, [r7, #28]
 801459c:	4413      	add	r3, r2
 801459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145a2:	691b      	ldr	r3, [r3, #16]
 80145a4:	69ba      	ldr	r2, [r7, #24]
 80145a6:	0151      	lsls	r1, r2, #5
 80145a8:	69fa      	ldr	r2, [r7, #28]
 80145aa:	440a      	add	r2, r1
 80145ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80145b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80145b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	699b      	ldr	r3, [r3, #24]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d126      	bne.n	8014610 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	015a      	lsls	r2, r3, #5
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	4413      	add	r3, r2
 80145ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ce:	691a      	ldr	r2, [r3, #16]
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145d8:	69b9      	ldr	r1, [r7, #24]
 80145da:	0148      	lsls	r0, r1, #5
 80145dc:	69f9      	ldr	r1, [r7, #28]
 80145de:	4401      	add	r1, r0
 80145e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145e4:	4313      	orrs	r3, r2
 80145e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	015a      	lsls	r2, r3, #5
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	69ba      	ldr	r2, [r7, #24]
 80145f8:	0151      	lsls	r1, r2, #5
 80145fa:	69fa      	ldr	r2, [r7, #28]
 80145fc:	440a      	add	r2, r1
 80145fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014606:	6113      	str	r3, [r2, #16]
 8014608:	e03a      	b.n	8014680 <USB_EPStartXfer+0x3e4>
 801460a:	bf00      	nop
 801460c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	699a      	ldr	r2, [r3, #24]
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	4413      	add	r3, r2
 801461a:	1e5a      	subs	r2, r3, #1
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	fbb2 f3f3 	udiv	r3, r2, r3
 8014624:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	8afa      	ldrh	r2, [r7, #22]
 801462c:	fb03 f202 	mul.w	r2, r3, r2
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	015a      	lsls	r2, r3, #5
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	4413      	add	r3, r2
 801463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014640:	691a      	ldr	r2, [r3, #16]
 8014642:	8afb      	ldrh	r3, [r7, #22]
 8014644:	04d9      	lsls	r1, r3, #19
 8014646:	4b38      	ldr	r3, [pc, #224]	; (8014728 <USB_EPStartXfer+0x48c>)
 8014648:	400b      	ands	r3, r1
 801464a:	69b9      	ldr	r1, [r7, #24]
 801464c:	0148      	lsls	r0, r1, #5
 801464e:	69f9      	ldr	r1, [r7, #28]
 8014650:	4401      	add	r1, r0
 8014652:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014656:	4313      	orrs	r3, r2
 8014658:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	015a      	lsls	r2, r3, #5
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	4413      	add	r3, r2
 8014662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014666:	691a      	ldr	r2, [r3, #16]
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	69db      	ldr	r3, [r3, #28]
 801466c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014670:	69b9      	ldr	r1, [r7, #24]
 8014672:	0148      	lsls	r0, r1, #5
 8014674:	69f9      	ldr	r1, [r7, #28]
 8014676:	4401      	add	r1, r0
 8014678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801467c:	4313      	orrs	r3, r2
 801467e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014680:	79fb      	ldrb	r3, [r7, #7]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d10d      	bne.n	80146a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d009      	beq.n	80146a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	6919      	ldr	r1, [r3, #16]
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	015a      	lsls	r2, r3, #5
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	4413      	add	r3, r2
 801469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469e:	460a      	mov	r2, r1
 80146a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	791b      	ldrb	r3, [r3, #4]
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d128      	bne.n	80146fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d110      	bne.n	80146dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	015a      	lsls	r2, r3, #5
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	4413      	add	r3, r2
 80146c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	69ba      	ldr	r2, [r7, #24]
 80146ca:	0151      	lsls	r1, r2, #5
 80146cc:	69fa      	ldr	r2, [r7, #28]
 80146ce:	440a      	add	r2, r1
 80146d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80146d8:	6013      	str	r3, [r2, #0]
 80146da:	e00f      	b.n	80146fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	015a      	lsls	r2, r3, #5
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	4413      	add	r3, r2
 80146e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	69ba      	ldr	r2, [r7, #24]
 80146ec:	0151      	lsls	r1, r2, #5
 80146ee:	69fa      	ldr	r2, [r7, #28]
 80146f0:	440a      	add	r2, r1
 80146f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	015a      	lsls	r2, r3, #5
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	4413      	add	r3, r2
 8014704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	69ba      	ldr	r2, [r7, #24]
 801470c:	0151      	lsls	r1, r2, #5
 801470e:	69fa      	ldr	r2, [r7, #28]
 8014710:	440a      	add	r2, r1
 8014712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801471a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	1ff80000 	.word	0x1ff80000

0801472c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801472c:	b480      	push	{r7}
 801472e:	b087      	sub	sp, #28
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4613      	mov	r3, r2
 8014738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	785b      	ldrb	r3, [r3, #1]
 8014748:	2b01      	cmp	r3, #1
 801474a:	f040 80ce 	bne.w	80148ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	699b      	ldr	r3, [r3, #24]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d132      	bne.n	80147bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	015a      	lsls	r2, r3, #5
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	4413      	add	r3, r2
 801475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	693a      	ldr	r2, [r7, #16]
 8014766:	0151      	lsls	r1, r2, #5
 8014768:	697a      	ldr	r2, [r7, #20]
 801476a:	440a      	add	r2, r1
 801476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	015a      	lsls	r2, r3, #5
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	4413      	add	r3, r2
 8014782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	693a      	ldr	r2, [r7, #16]
 801478a:	0151      	lsls	r1, r2, #5
 801478c:	697a      	ldr	r2, [r7, #20]
 801478e:	440a      	add	r2, r1
 8014790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	015a      	lsls	r2, r3, #5
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	4413      	add	r3, r2
 80147a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	693a      	ldr	r2, [r7, #16]
 80147aa:	0151      	lsls	r1, r2, #5
 80147ac:	697a      	ldr	r2, [r7, #20]
 80147ae:	440a      	add	r2, r1
 80147b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147b4:	0cdb      	lsrs	r3, r3, #19
 80147b6:	04db      	lsls	r3, r3, #19
 80147b8:	6113      	str	r3, [r2, #16]
 80147ba:	e04e      	b.n	801485a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	015a      	lsls	r2, r3, #5
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	4413      	add	r3, r2
 80147c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147c8:	691b      	ldr	r3, [r3, #16]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	0151      	lsls	r1, r2, #5
 80147ce:	697a      	ldr	r2, [r7, #20]
 80147d0:	440a      	add	r2, r1
 80147d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147d6:	0cdb      	lsrs	r3, r3, #19
 80147d8:	04db      	lsls	r3, r3, #19
 80147da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	015a      	lsls	r2, r3, #5
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	4413      	add	r3, r2
 80147e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	693a      	ldr	r2, [r7, #16]
 80147ec:	0151      	lsls	r1, r2, #5
 80147ee:	697a      	ldr	r2, [r7, #20]
 80147f0:	440a      	add	r2, r1
 80147f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80147fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80147fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	699a      	ldr	r2, [r3, #24]
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	429a      	cmp	r2, r3
 801480a:	d903      	bls.n	8014814 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	68da      	ldr	r2, [r3, #12]
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	015a      	lsls	r2, r3, #5
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	4413      	add	r3, r2
 801481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	693a      	ldr	r2, [r7, #16]
 8014824:	0151      	lsls	r1, r2, #5
 8014826:	697a      	ldr	r2, [r7, #20]
 8014828:	440a      	add	r2, r1
 801482a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801482e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	015a      	lsls	r2, r3, #5
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	4413      	add	r3, r2
 801483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014840:	691a      	ldr	r2, [r3, #16]
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	699b      	ldr	r3, [r3, #24]
 8014846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801484a:	6939      	ldr	r1, [r7, #16]
 801484c:	0148      	lsls	r0, r1, #5
 801484e:	6979      	ldr	r1, [r7, #20]
 8014850:	4401      	add	r1, r0
 8014852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014856:	4313      	orrs	r3, r2
 8014858:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801485a:	79fb      	ldrb	r3, [r7, #7]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d11e      	bne.n	801489e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	695b      	ldr	r3, [r3, #20]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d009      	beq.n	801487c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014874:	461a      	mov	r2, r3
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	695b      	ldr	r3, [r3, #20]
 801487a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	015a      	lsls	r2, r3, #5
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	4413      	add	r3, r2
 8014884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	693a      	ldr	r2, [r7, #16]
 801488c:	0151      	lsls	r1, r2, #5
 801488e:	697a      	ldr	r2, [r7, #20]
 8014890:	440a      	add	r2, r1
 8014892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801489a:	6013      	str	r3, [r2, #0]
 801489c:	e097      	b.n	80149ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	015a      	lsls	r2, r3, #5
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	4413      	add	r3, r2
 80148a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	693a      	ldr	r2, [r7, #16]
 80148ae:	0151      	lsls	r1, r2, #5
 80148b0:	697a      	ldr	r2, [r7, #20]
 80148b2:	440a      	add	r2, r1
 80148b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80148bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	699b      	ldr	r3, [r3, #24]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	f000 8083 	beq.w	80149ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	f003 030f 	and.w	r3, r3, #15
 80148d8:	2101      	movs	r1, #1
 80148da:	fa01 f303 	lsl.w	r3, r1, r3
 80148de:	6979      	ldr	r1, [r7, #20]
 80148e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80148e4:	4313      	orrs	r3, r2
 80148e6:	634b      	str	r3, [r1, #52]	; 0x34
 80148e8:	e071      	b.n	80149ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	015a      	lsls	r2, r3, #5
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	4413      	add	r3, r2
 80148f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148f6:	691b      	ldr	r3, [r3, #16]
 80148f8:	693a      	ldr	r2, [r7, #16]
 80148fa:	0151      	lsls	r1, r2, #5
 80148fc:	697a      	ldr	r2, [r7, #20]
 80148fe:	440a      	add	r2, r1
 8014900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014904:	0cdb      	lsrs	r3, r3, #19
 8014906:	04db      	lsls	r3, r3, #19
 8014908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	015a      	lsls	r2, r3, #5
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	4413      	add	r3, r2
 8014912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014916:	691b      	ldr	r3, [r3, #16]
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	0151      	lsls	r1, r2, #5
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	440a      	add	r2, r1
 8014920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014924:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014928:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801492c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	699b      	ldr	r3, [r3, #24]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d003      	beq.n	801493e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	68da      	ldr	r2, [r3, #12]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	68da      	ldr	r2, [r3, #12]
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	015a      	lsls	r2, r3, #5
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	4413      	add	r3, r2
 801494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014952:	691b      	ldr	r3, [r3, #16]
 8014954:	693a      	ldr	r2, [r7, #16]
 8014956:	0151      	lsls	r1, r2, #5
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	440a      	add	r2, r1
 801495c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	015a      	lsls	r2, r3, #5
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	4413      	add	r3, r2
 801496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014972:	691a      	ldr	r2, [r3, #16]
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	69db      	ldr	r3, [r3, #28]
 8014978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801497c:	6939      	ldr	r1, [r7, #16]
 801497e:	0148      	lsls	r0, r1, #5
 8014980:	6979      	ldr	r1, [r7, #20]
 8014982:	4401      	add	r1, r0
 8014984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014988:	4313      	orrs	r3, r2
 801498a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801498c:	79fb      	ldrb	r3, [r7, #7]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d10d      	bne.n	80149ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	691b      	ldr	r3, [r3, #16]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d009      	beq.n	80149ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	6919      	ldr	r1, [r3, #16]
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	015a      	lsls	r2, r3, #5
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	4413      	add	r3, r2
 80149a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149aa:	460a      	mov	r2, r1
 80149ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	015a      	lsls	r2, r3, #5
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	4413      	add	r3, r2
 80149b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	693a      	ldr	r2, [r7, #16]
 80149be:	0151      	lsls	r1, r2, #5
 80149c0:	697a      	ldr	r2, [r7, #20]
 80149c2:	440a      	add	r2, r1
 80149c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80149cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80149ce:	2300      	movs	r3, #0
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	371c      	adds	r7, #28
 80149d4:	46bd      	mov	sp, r7
 80149d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149da:	4770      	bx	lr

080149dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80149dc:	b480      	push	{r7}
 80149de:	b087      	sub	sp, #28
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80149e6:	2300      	movs	r3, #0
 80149e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	785b      	ldrb	r3, [r3, #1]
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	d14a      	bne.n	8014a90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	015a      	lsls	r2, r3, #5
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	4413      	add	r3, r2
 8014a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a12:	f040 8086 	bne.w	8014b22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	015a      	lsls	r2, r3, #5
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	4413      	add	r3, r2
 8014a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	683a      	ldr	r2, [r7, #0]
 8014a28:	7812      	ldrb	r2, [r2, #0]
 8014a2a:	0151      	lsls	r1, r2, #5
 8014a2c:	693a      	ldr	r2, [r7, #16]
 8014a2e:	440a      	add	r2, r1
 8014a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014a38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	015a      	lsls	r2, r3, #5
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	4413      	add	r3, r2
 8014a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	683a      	ldr	r2, [r7, #0]
 8014a4c:	7812      	ldrb	r2, [r2, #0]
 8014a4e:	0151      	lsls	r1, r2, #5
 8014a50:	693a      	ldr	r2, [r7, #16]
 8014a52:	440a      	add	r2, r1
 8014a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014a5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	3301      	adds	r3, #1
 8014a62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f242 7210 	movw	r2, #10000	; 0x2710
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d902      	bls.n	8014a74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014a6e:	2301      	movs	r3, #1
 8014a70:	75fb      	strb	r3, [r7, #23]
          break;
 8014a72:	e056      	b.n	8014b22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	015a      	lsls	r2, r3, #5
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	4413      	add	r3, r2
 8014a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a8c:	d0e7      	beq.n	8014a5e <USB_EPStopXfer+0x82>
 8014a8e:	e048      	b.n	8014b22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	015a      	lsls	r2, r3, #5
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	4413      	add	r3, r2
 8014a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014aa8:	d13b      	bne.n	8014b22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	015a      	lsls	r2, r3, #5
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	683a      	ldr	r2, [r7, #0]
 8014abc:	7812      	ldrb	r2, [r2, #0]
 8014abe:	0151      	lsls	r1, r2, #5
 8014ac0:	693a      	ldr	r2, [r7, #16]
 8014ac2:	440a      	add	r2, r1
 8014ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ac8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014acc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	015a      	lsls	r2, r3, #5
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	683a      	ldr	r2, [r7, #0]
 8014ae0:	7812      	ldrb	r2, [r2, #0]
 8014ae2:	0151      	lsls	r1, r2, #5
 8014ae4:	693a      	ldr	r2, [r7, #16]
 8014ae6:	440a      	add	r2, r1
 8014ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014af0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	3301      	adds	r3, #1
 8014af6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f242 7210 	movw	r2, #10000	; 0x2710
 8014afe:	4293      	cmp	r3, r2
 8014b00:	d902      	bls.n	8014b08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	75fb      	strb	r3, [r7, #23]
          break;
 8014b06:	e00c      	b.n	8014b22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	015a      	lsls	r2, r3, #5
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	4413      	add	r3, r2
 8014b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b20:	d0e7      	beq.n	8014af2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	371c      	adds	r7, #28
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr

08014b30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014b30:	b480      	push	{r7}
 8014b32:	b089      	sub	sp, #36	; 0x24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	60f8      	str	r0, [r7, #12]
 8014b38:	60b9      	str	r1, [r7, #8]
 8014b3a:	4611      	mov	r1, r2
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	460b      	mov	r3, r1
 8014b40:	71fb      	strb	r3, [r7, #7]
 8014b42:	4613      	mov	r3, r2
 8014b44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d123      	bne.n	8014b9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014b56:	88bb      	ldrh	r3, [r7, #4]
 8014b58:	3303      	adds	r3, #3
 8014b5a:	089b      	lsrs	r3, r3, #2
 8014b5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014b5e:	2300      	movs	r3, #0
 8014b60:	61bb      	str	r3, [r7, #24]
 8014b62:	e018      	b.n	8014b96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014b64:	79fb      	ldrb	r3, [r7, #7]
 8014b66:	031a      	lsls	r2, r3, #12
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b70:	461a      	mov	r2, r3
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014b78:	69fb      	ldr	r3, [r7, #28]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b7e:	69fb      	ldr	r3, [r7, #28]
 8014b80:	3301      	adds	r3, #1
 8014b82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	3301      	adds	r3, #1
 8014b88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014b90:	69bb      	ldr	r3, [r7, #24]
 8014b92:	3301      	adds	r3, #1
 8014b94:	61bb      	str	r3, [r7, #24]
 8014b96:	69ba      	ldr	r2, [r7, #24]
 8014b98:	693b      	ldr	r3, [r7, #16]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d3e2      	bcc.n	8014b64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014b9e:	2300      	movs	r3, #0
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3724      	adds	r7, #36	; 0x24
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b08b      	sub	sp, #44	; 0x2c
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014bc2:	88fb      	ldrh	r3, [r7, #6]
 8014bc4:	089b      	lsrs	r3, r3, #2
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014bca:	88fb      	ldrh	r3, [r7, #6]
 8014bcc:	f003 0303 	and.w	r3, r3, #3
 8014bd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	623b      	str	r3, [r7, #32]
 8014bd6:	e014      	b.n	8014c02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be2:	601a      	str	r2, [r3, #0]
    pDest++;
 8014be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be6:	3301      	adds	r3, #1
 8014be8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bec:	3301      	adds	r3, #1
 8014bee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014bfc:	6a3b      	ldr	r3, [r7, #32]
 8014bfe:	3301      	adds	r3, #1
 8014c00:	623b      	str	r3, [r7, #32]
 8014c02:	6a3a      	ldr	r2, [r7, #32]
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d3e6      	bcc.n	8014bd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014c0a:	8bfb      	ldrh	r3, [r7, #30]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d01e      	beq.n	8014c4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014c10:	2300      	movs	r3, #0
 8014c12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	f107 0310 	add.w	r3, r7, #16
 8014c20:	6812      	ldr	r2, [r2, #0]
 8014c22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	6a3b      	ldr	r3, [r7, #32]
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8014c30:	b2da      	uxtb	r2, r3
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	701a      	strb	r2, [r3, #0]
      i++;
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3e:	3301      	adds	r3, #1
 8014c40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014c42:	8bfb      	ldrh	r3, [r7, #30]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014c48:	8bfb      	ldrh	r3, [r7, #30]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1ea      	bne.n	8014c24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	372c      	adds	r7, #44	; 0x2c
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr

08014c5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b085      	sub	sp, #20
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	785b      	ldrb	r3, [r3, #1]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d12c      	bne.n	8014cd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	015a      	lsls	r2, r3, #5
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	4413      	add	r3, r2
 8014c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	db12      	blt.n	8014cb0 <USB_EPSetStall+0x54>
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d00f      	beq.n	8014cb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	015a      	lsls	r2, r3, #5
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4413      	add	r3, r2
 8014c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	0151      	lsls	r1, r2, #5
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	440a      	add	r2, r1
 8014ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014cae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	68ba      	ldr	r2, [r7, #8]
 8014cc0:	0151      	lsls	r1, r2, #5
 8014cc2:	68fa      	ldr	r2, [r7, #12]
 8014cc4:	440a      	add	r2, r1
 8014cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	e02b      	b.n	8014d2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	015a      	lsls	r2, r3, #5
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	db12      	blt.n	8014d0a <USB_EPSetStall+0xae>
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d00f      	beq.n	8014d0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	015a      	lsls	r2, r3, #5
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	68ba      	ldr	r2, [r7, #8]
 8014cfa:	0151      	lsls	r1, r2, #5
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	440a      	add	r2, r1
 8014d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014d08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	015a      	lsls	r2, r3, #5
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	4413      	add	r3, r2
 8014d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	68ba      	ldr	r2, [r7, #8]
 8014d1a:	0151      	lsls	r1, r2, #5
 8014d1c:	68fa      	ldr	r2, [r7, #12]
 8014d1e:	440a      	add	r2, r1
 8014d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014d28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014d2a:	2300      	movs	r3, #0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3714      	adds	r7, #20
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr

08014d38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b085      	sub	sp, #20
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	785b      	ldrb	r3, [r3, #1]
 8014d50:	2b01      	cmp	r3, #1
 8014d52:	d128      	bne.n	8014da6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	015a      	lsls	r2, r3, #5
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	68ba      	ldr	r2, [r7, #8]
 8014d64:	0151      	lsls	r1, r2, #5
 8014d66:	68fa      	ldr	r2, [r7, #12]
 8014d68:	440a      	add	r2, r1
 8014d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014d72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	791b      	ldrb	r3, [r3, #4]
 8014d78:	2b03      	cmp	r3, #3
 8014d7a:	d003      	beq.n	8014d84 <USB_EPClearStall+0x4c>
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	791b      	ldrb	r3, [r3, #4]
 8014d80:	2b02      	cmp	r3, #2
 8014d82:	d138      	bne.n	8014df6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	015a      	lsls	r2, r3, #5
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	68ba      	ldr	r2, [r7, #8]
 8014d94:	0151      	lsls	r1, r2, #5
 8014d96:	68fa      	ldr	r2, [r7, #12]
 8014d98:	440a      	add	r2, r1
 8014d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014da2:	6013      	str	r3, [r2, #0]
 8014da4:	e027      	b.n	8014df6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	015a      	lsls	r2, r3, #5
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4413      	add	r3, r2
 8014dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	68ba      	ldr	r2, [r7, #8]
 8014db6:	0151      	lsls	r1, r2, #5
 8014db8:	68fa      	ldr	r2, [r7, #12]
 8014dba:	440a      	add	r2, r1
 8014dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014dc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	791b      	ldrb	r3, [r3, #4]
 8014dca:	2b03      	cmp	r3, #3
 8014dcc:	d003      	beq.n	8014dd6 <USB_EPClearStall+0x9e>
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	791b      	ldrb	r3, [r3, #4]
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d10f      	bne.n	8014df6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	015a      	lsls	r2, r3, #5
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	4413      	add	r3, r2
 8014dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	68ba      	ldr	r2, [r7, #8]
 8014de6:	0151      	lsls	r1, r2, #5
 8014de8:	68fa      	ldr	r2, [r7, #12]
 8014dea:	440a      	add	r2, r1
 8014dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014df4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014df6:	2300      	movs	r3, #0
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	68fa      	ldr	r2, [r7, #12]
 8014e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014e26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	78fb      	ldrb	r3, [r7, #3]
 8014e32:	011b      	lsls	r3, r3, #4
 8014e34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014e38:	68f9      	ldr	r1, [r7, #12]
 8014e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014e42:	2300      	movs	r3, #0
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3714      	adds	r7, #20
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr

08014e50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b085      	sub	sp, #20
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	695b      	ldr	r3, [r3, #20]
 8014e5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	699b      	ldr	r3, [r3, #24]
 8014e62:	68fa      	ldr	r2, [r7, #12]
 8014e64:	4013      	ands	r3, r2
 8014e66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014e68:	68fb      	ldr	r3, [r7, #12]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3714      	adds	r7, #20
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e74:	4770      	bx	lr

08014e76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e76:	b480      	push	{r7}
 8014e78:	b085      	sub	sp, #20
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e88:	699b      	ldr	r3, [r3, #24]
 8014e8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e92:	69db      	ldr	r3, [r3, #28]
 8014e94:	68ba      	ldr	r2, [r7, #8]
 8014e96:	4013      	ands	r3, r2
 8014e98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	0c1b      	lsrs	r3, r3, #16
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3714      	adds	r7, #20
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr

08014eaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014eaa:	b480      	push	{r7}
 8014eac:	b085      	sub	sp, #20
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ebc:	699b      	ldr	r3, [r3, #24]
 8014ebe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ec6:	69db      	ldr	r3, [r3, #28]
 8014ec8:	68ba      	ldr	r2, [r7, #8]
 8014eca:	4013      	ands	r3, r2
 8014ecc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	b29b      	uxth	r3, r3
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3714      	adds	r7, #20
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014edc:	4770      	bx	lr

08014ede <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ede:	b480      	push	{r7}
 8014ee0:	b085      	sub	sp, #20
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	6078      	str	r0, [r7, #4]
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014eee:	78fb      	ldrb	r3, [r7, #3]
 8014ef0:	015a      	lsls	r2, r3, #5
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f04:	695b      	ldr	r3, [r3, #20]
 8014f06:	68ba      	ldr	r2, [r7, #8]
 8014f08:	4013      	ands	r3, r2
 8014f0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f0c:	68bb      	ldr	r3, [r7, #8]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3714      	adds	r7, #20
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014f1a:	b480      	push	{r7}
 8014f1c:	b087      	sub	sp, #28
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	460b      	mov	r3, r1
 8014f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f30:	691b      	ldr	r3, [r3, #16]
 8014f32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014f3e:	78fb      	ldrb	r3, [r7, #3]
 8014f40:	f003 030f 	and.w	r3, r3, #15
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	fa22 f303 	lsr.w	r3, r2, r3
 8014f4a:	01db      	lsls	r3, r3, #7
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	693a      	ldr	r2, [r7, #16]
 8014f50:	4313      	orrs	r3, r2
 8014f52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014f54:	78fb      	ldrb	r3, [r7, #3]
 8014f56:	015a      	lsls	r2, r3, #5
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f60:	689b      	ldr	r3, [r3, #8]
 8014f62:	693a      	ldr	r2, [r7, #16]
 8014f64:	4013      	ands	r3, r2
 8014f66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014f68:	68bb      	ldr	r3, [r7, #8]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	371c      	adds	r7, #28
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr

08014f76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014f76:	b480      	push	{r7}
 8014f78:	b083      	sub	sp, #12
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	695b      	ldr	r3, [r3, #20]
 8014f82:	f003 0301 	and.w	r3, r3, #1
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	370c      	adds	r7, #12
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f90:	4770      	bx	lr

08014f92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014f92:	b480      	push	{r7}
 8014f94:	b085      	sub	sp, #20
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014fb0:	f023 0307 	bic.w	r3, r3, #7
 8014fb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	68fa      	ldr	r2, [r7, #12]
 8014fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3714      	adds	r7, #20
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b087      	sub	sp, #28
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	333c      	adds	r3, #60	; 0x3c
 8014fee:	3304      	adds	r3, #4
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	4a26      	ldr	r2, [pc, #152]	; (8015090 <USB_EP0_OutStart+0xb8>)
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	d90a      	bls.n	8015012 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801500c:	d101      	bne.n	8015012 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801500e:	2300      	movs	r3, #0
 8015010:	e037      	b.n	8015082 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015018:	461a      	mov	r2, r3
 801501a:	2300      	movs	r3, #0
 801501c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015024:	691b      	ldr	r3, [r3, #16]
 8015026:	697a      	ldr	r2, [r7, #20]
 8015028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801502c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015030:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015038:	691b      	ldr	r3, [r3, #16]
 801503a:	697a      	ldr	r2, [r7, #20]
 801503c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015040:	f043 0318 	orr.w	r3, r3, #24
 8015044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801504c:	691b      	ldr	r3, [r3, #16]
 801504e:	697a      	ldr	r2, [r7, #20]
 8015050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015054:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015058:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801505a:	7afb      	ldrb	r3, [r7, #11]
 801505c:	2b01      	cmp	r3, #1
 801505e:	d10f      	bne.n	8015080 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015066:	461a      	mov	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	697a      	ldr	r2, [r7, #20]
 8015076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801507a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801507e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	371c      	adds	r7, #28
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr
 801508e:	bf00      	nop
 8015090:	4f54300a 	.word	0x4f54300a

08015094 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801509c:	f000 f818 	bl	80150d0 <BSP_SD_AbortCallback>
}
 80150a0:	bf00      	nop
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80150b0:	f000 f816 	bl	80150e0 <BSP_SD_WriteCpltCallback>
}
 80150b4:	bf00      	nop
 80150b6:	3708      	adds	r7, #8
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80150c4:	f000 f818 	bl	80150f8 <BSP_SD_ReadCpltCallback>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80150d0:	b480      	push	{r7}
 80150d2:	af00      	add	r7, sp, #0

}
 80150d4:	bf00      	nop
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr
	...

080150e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80150e0:	b480      	push	{r7}
 80150e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80150e4:	4b03      	ldr	r3, [pc, #12]	; (80150f4 <BSP_SD_WriteCpltCallback+0x14>)
 80150e6:	2201      	movs	r2, #1
 80150e8:	601a      	str	r2, [r3, #0]
}
 80150ea:	bf00      	nop
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	200001b4 	.word	0x200001b4

080150f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80150f8:	b480      	push	{r7}
 80150fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80150fc:	4b03      	ldr	r3, [pc, #12]	; (801510c <BSP_SD_ReadCpltCallback+0x14>)
 80150fe:	2201      	movs	r2, #1
 8015100:	601a      	str	r2, [r3, #0]
}
 8015102:	bf00      	nop
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr
 801510c:	200001b8 	.word	0x200001b8

08015110 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015110:	b480      	push	{r7}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015118:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801511a:	4618      	mov	r0, r3
 801511c:	370c      	adds	r7, #12
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
 801512e:	460b      	mov	r3, r1
 8015130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015132:	2300      	movs	r3, #0
 8015134:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801513c:	2b00      	cmp	r3, #0
 801513e:	d009      	beq.n	8015154 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	78fa      	ldrb	r2, [r7, #3]
 801514a:	4611      	mov	r1, r2
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	4798      	blx	r3
 8015150:	4603      	mov	r3, r0
 8015152:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015154:	7bfb      	ldrb	r3, [r7, #15]
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b084      	sub	sp, #16
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
 8015166:	460b      	mov	r3, r1
 8015168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801516a:	2300      	movs	r3, #0
 801516c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015174:	685b      	ldr	r3, [r3, #4]
 8015176:	78fa      	ldrb	r2, [r7, #3]
 8015178:	4611      	mov	r1, r2
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	4798      	blx	r3
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d001      	beq.n	8015188 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015184:	2303      	movs	r3, #3
 8015186:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015188:	7bfb      	ldrb	r3, [r7, #15]
}
 801518a:	4618      	mov	r0, r3
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b084      	sub	sp, #16
 8015196:	af00      	add	r7, sp, #0
 8015198:	6078      	str	r0, [r7, #4]
 801519a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151a2:	6839      	ldr	r1, [r7, #0]
 80151a4:	4618      	mov	r0, r3
 80151a6:	f001 f8dc 	bl	8016362 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2201      	movs	r2, #1
 80151ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80151b8:	461a      	mov	r2, r3
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151c6:	f003 031f 	and.w	r3, r3, #31
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d01a      	beq.n	8015204 <USBD_LL_SetupStage+0x72>
 80151ce:	2b02      	cmp	r3, #2
 80151d0:	d822      	bhi.n	8015218 <USBD_LL_SetupStage+0x86>
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d002      	beq.n	80151dc <USBD_LL_SetupStage+0x4a>
 80151d6:	2b01      	cmp	r3, #1
 80151d8:	d00a      	beq.n	80151f0 <USBD_LL_SetupStage+0x5e>
 80151da:	e01d      	b.n	8015218 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151e2:	4619      	mov	r1, r3
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f000 fb09 	bl	80157fc <USBD_StdDevReq>
 80151ea:	4603      	mov	r3, r0
 80151ec:	73fb      	strb	r3, [r7, #15]
      break;
 80151ee:	e020      	b.n	8015232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151f6:	4619      	mov	r1, r3
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f000 fb71 	bl	80158e0 <USBD_StdItfReq>
 80151fe:	4603      	mov	r3, r0
 8015200:	73fb      	strb	r3, [r7, #15]
      break;
 8015202:	e016      	b.n	8015232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801520a:	4619      	mov	r1, r3
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f000 fbd3 	bl	80159b8 <USBD_StdEPReq>
 8015212:	4603      	mov	r3, r0
 8015214:	73fb      	strb	r3, [r7, #15]
      break;
 8015216:	e00c      	b.n	8015232 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801521e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015222:	b2db      	uxtb	r3, r3
 8015224:	4619      	mov	r1, r3
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f001 fa60 	bl	80166ec <USBD_LL_StallEP>
 801522c:	4603      	mov	r3, r0
 801522e:	73fb      	strb	r3, [r7, #15]
      break;
 8015230:	bf00      	nop
  }

  return ret;
 8015232:	7bfb      	ldrb	r3, [r7, #15]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3710      	adds	r7, #16
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b086      	sub	sp, #24
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	460b      	mov	r3, r1
 8015246:	607a      	str	r2, [r7, #4]
 8015248:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801524a:	2300      	movs	r3, #0
 801524c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801524e:	7afb      	ldrb	r3, [r7, #11]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d16e      	bne.n	8015332 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801525a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015262:	2b03      	cmp	r3, #3
 8015264:	f040 8098 	bne.w	8015398 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	689a      	ldr	r2, [r3, #8]
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	429a      	cmp	r2, r3
 8015272:	d913      	bls.n	801529c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	689a      	ldr	r2, [r3, #8]
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	1ad2      	subs	r2, r2, r3
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	68da      	ldr	r2, [r3, #12]
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	4293      	cmp	r3, r2
 801528c:	bf28      	it	cs
 801528e:	4613      	movcs	r3, r2
 8015290:	461a      	mov	r2, r3
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	68f8      	ldr	r0, [r7, #12]
 8015296:	f001 f8db 	bl	8016450 <USBD_CtlContinueRx>
 801529a:	e07d      	b.n	8015398 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80152a2:	f003 031f 	and.w	r3, r3, #31
 80152a6:	2b02      	cmp	r3, #2
 80152a8:	d014      	beq.n	80152d4 <USBD_LL_DataOutStage+0x98>
 80152aa:	2b02      	cmp	r3, #2
 80152ac:	d81d      	bhi.n	80152ea <USBD_LL_DataOutStage+0xae>
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d002      	beq.n	80152b8 <USBD_LL_DataOutStage+0x7c>
 80152b2:	2b01      	cmp	r3, #1
 80152b4:	d003      	beq.n	80152be <USBD_LL_DataOutStage+0x82>
 80152b6:	e018      	b.n	80152ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80152b8:	2300      	movs	r3, #0
 80152ba:	75bb      	strb	r3, [r7, #22]
            break;
 80152bc:	e018      	b.n	80152f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80152c4:	b2db      	uxtb	r3, r3
 80152c6:	4619      	mov	r1, r3
 80152c8:	68f8      	ldr	r0, [r7, #12]
 80152ca:	f000 fa5e 	bl	801578a <USBD_CoreFindIF>
 80152ce:	4603      	mov	r3, r0
 80152d0:	75bb      	strb	r3, [r7, #22]
            break;
 80152d2:	e00d      	b.n	80152f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80152da:	b2db      	uxtb	r3, r3
 80152dc:	4619      	mov	r1, r3
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	f000 fa60 	bl	80157a4 <USBD_CoreFindEP>
 80152e4:	4603      	mov	r3, r0
 80152e6:	75bb      	strb	r3, [r7, #22]
            break;
 80152e8:	e002      	b.n	80152f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80152ea:	2300      	movs	r3, #0
 80152ec:	75bb      	strb	r3, [r7, #22]
            break;
 80152ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80152f0:	7dbb      	ldrb	r3, [r7, #22]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d119      	bne.n	801532a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d113      	bne.n	801532a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015302:	7dba      	ldrb	r2, [r7, #22]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	32ae      	adds	r2, #174	; 0xae
 8015308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d00b      	beq.n	801532a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015312:	7dba      	ldrb	r2, [r7, #22]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801531a:	7dba      	ldrb	r2, [r7, #22]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	32ae      	adds	r2, #174	; 0xae
 8015320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015324:	691b      	ldr	r3, [r3, #16]
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801532a:	68f8      	ldr	r0, [r7, #12]
 801532c:	f001 f8a1 	bl	8016472 <USBD_CtlSendStatus>
 8015330:	e032      	b.n	8015398 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015332:	7afb      	ldrb	r3, [r7, #11]
 8015334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015338:	b2db      	uxtb	r3, r3
 801533a:	4619      	mov	r1, r3
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f000 fa31 	bl	80157a4 <USBD_CoreFindEP>
 8015342:	4603      	mov	r3, r0
 8015344:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015346:	7dbb      	ldrb	r3, [r7, #22]
 8015348:	2bff      	cmp	r3, #255	; 0xff
 801534a:	d025      	beq.n	8015398 <USBD_LL_DataOutStage+0x15c>
 801534c:	7dbb      	ldrb	r3, [r7, #22]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d122      	bne.n	8015398 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015358:	b2db      	uxtb	r3, r3
 801535a:	2b03      	cmp	r3, #3
 801535c:	d117      	bne.n	801538e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801535e:	7dba      	ldrb	r2, [r7, #22]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	32ae      	adds	r2, #174	; 0xae
 8015364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015368:	699b      	ldr	r3, [r3, #24]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d00f      	beq.n	801538e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801536e:	7dba      	ldrb	r2, [r7, #22]
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015376:	7dba      	ldrb	r2, [r7, #22]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	32ae      	adds	r2, #174	; 0xae
 801537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015380:	699b      	ldr	r3, [r3, #24]
 8015382:	7afa      	ldrb	r2, [r7, #11]
 8015384:	4611      	mov	r1, r2
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	4798      	blx	r3
 801538a:	4603      	mov	r3, r0
 801538c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801538e:	7dfb      	ldrb	r3, [r7, #23]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d001      	beq.n	8015398 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015394:	7dfb      	ldrb	r3, [r7, #23]
 8015396:	e000      	b.n	801539a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	3718      	adds	r7, #24
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b086      	sub	sp, #24
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	60f8      	str	r0, [r7, #12]
 80153aa:	460b      	mov	r3, r1
 80153ac:	607a      	str	r2, [r7, #4]
 80153ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80153b0:	7afb      	ldrb	r3, [r7, #11]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d16f      	bne.n	8015496 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	3314      	adds	r3, #20
 80153ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80153c2:	2b02      	cmp	r3, #2
 80153c4:	d15a      	bne.n	801547c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	689a      	ldr	r2, [r3, #8]
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	68db      	ldr	r3, [r3, #12]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d914      	bls.n	80153fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	689a      	ldr	r2, [r3, #8]
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	68db      	ldr	r3, [r3, #12]
 80153da:	1ad2      	subs	r2, r2, r3
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	689b      	ldr	r3, [r3, #8]
 80153e4:	461a      	mov	r2, r3
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	f001 f820 	bl	801642e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153ee:	2300      	movs	r3, #0
 80153f0:	2200      	movs	r2, #0
 80153f2:	2100      	movs	r1, #0
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f001 fa23 	bl	8016840 <USBD_LL_PrepareReceive>
 80153fa:	e03f      	b.n	801547c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	68da      	ldr	r2, [r3, #12]
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	689b      	ldr	r3, [r3, #8]
 8015404:	429a      	cmp	r2, r3
 8015406:	d11c      	bne.n	8015442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	685a      	ldr	r2, [r3, #4]
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015410:	429a      	cmp	r2, r3
 8015412:	d316      	bcc.n	8015442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	685a      	ldr	r2, [r3, #4]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801541e:	429a      	cmp	r2, r3
 8015420:	d20f      	bcs.n	8015442 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015422:	2200      	movs	r2, #0
 8015424:	2100      	movs	r1, #0
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	f001 f801 	bl	801642e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2200      	movs	r2, #0
 8015430:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015434:	2300      	movs	r3, #0
 8015436:	2200      	movs	r2, #0
 8015438:	2100      	movs	r1, #0
 801543a:	68f8      	ldr	r0, [r7, #12]
 801543c:	f001 fa00 	bl	8016840 <USBD_LL_PrepareReceive>
 8015440:	e01c      	b.n	801547c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b03      	cmp	r3, #3
 801544c:	d10f      	bne.n	801546e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d009      	beq.n	801546e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	2200      	movs	r2, #0
 801545e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801546e:	2180      	movs	r1, #128	; 0x80
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f001 f93b 	bl	80166ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f001 f80e 	bl	8016498 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d03a      	beq.n	80154fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015486:	68f8      	ldr	r0, [r7, #12]
 8015488:	f7ff fe42 	bl	8015110 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	2200      	movs	r2, #0
 8015490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015494:	e032      	b.n	80154fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015496:	7afb      	ldrb	r3, [r7, #11]
 8015498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801549c:	b2db      	uxtb	r3, r3
 801549e:	4619      	mov	r1, r3
 80154a0:	68f8      	ldr	r0, [r7, #12]
 80154a2:	f000 f97f 	bl	80157a4 <USBD_CoreFindEP>
 80154a6:	4603      	mov	r3, r0
 80154a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80154aa:	7dfb      	ldrb	r3, [r7, #23]
 80154ac:	2bff      	cmp	r3, #255	; 0xff
 80154ae:	d025      	beq.n	80154fc <USBD_LL_DataInStage+0x15a>
 80154b0:	7dfb      	ldrb	r3, [r7, #23]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d122      	bne.n	80154fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	2b03      	cmp	r3, #3
 80154c0:	d11c      	bne.n	80154fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80154c2:	7dfa      	ldrb	r2, [r7, #23]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	32ae      	adds	r2, #174	; 0xae
 80154c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154cc:	695b      	ldr	r3, [r3, #20]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d014      	beq.n	80154fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80154d2:	7dfa      	ldrb	r2, [r7, #23]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80154da:	7dfa      	ldrb	r2, [r7, #23]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	32ae      	adds	r2, #174	; 0xae
 80154e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	7afa      	ldrb	r2, [r7, #11]
 80154e8:	4611      	mov	r1, r2
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	4798      	blx	r3
 80154ee:	4603      	mov	r3, r0
 80154f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80154f2:	7dbb      	ldrb	r3, [r7, #22]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d001      	beq.n	80154fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80154f8:	7dbb      	ldrb	r3, [r7, #22]
 80154fa:	e000      	b.n	80154fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80154fc:	2300      	movs	r3, #0
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3718      	adds	r7, #24
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}

08015506 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015506:	b580      	push	{r7, lr}
 8015508:	b084      	sub	sp, #16
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801550e:	2300      	movs	r3, #0
 8015510:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2201      	movs	r2, #1
 8015516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2200      	movs	r2, #0
 801552c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801553e:	2b00      	cmp	r3, #0
 8015540:	d014      	beq.n	801556c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d00e      	beq.n	801556c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	6852      	ldr	r2, [r2, #4]
 801555a:	b2d2      	uxtb	r2, r2
 801555c:	4611      	mov	r1, r2
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	4798      	blx	r3
 8015562:	4603      	mov	r3, r0
 8015564:	2b00      	cmp	r3, #0
 8015566:	d001      	beq.n	801556c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015568:	2303      	movs	r3, #3
 801556a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	2200      	movs	r2, #0
 8015570:	2100      	movs	r1, #0
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f001 f894 	bl	80166a0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2201      	movs	r2, #1
 801557c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2240      	movs	r2, #64	; 0x40
 8015584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015588:	2340      	movs	r3, #64	; 0x40
 801558a:	2200      	movs	r2, #0
 801558c:	2180      	movs	r1, #128	; 0x80
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f001 f886 	bl	80166a0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2201      	movs	r2, #1
 8015598:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2240      	movs	r2, #64	; 0x40
 801559e:	621a      	str	r2, [r3, #32]

  return ret;
 80155a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80155aa:	b480      	push	{r7}
 80155ac:	b083      	sub	sp, #12
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
 80155b2:	460b      	mov	r3, r1
 80155b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	78fa      	ldrb	r2, [r7, #3]
 80155ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80155bc:	2300      	movs	r3, #0
}
 80155be:	4618      	mov	r0, r3
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c8:	4770      	bx	lr

080155ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80155ca:	b480      	push	{r7}
 80155cc:	b083      	sub	sp, #12
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155d8:	b2da      	uxtb	r2, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2204      	movs	r2, #4
 80155e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80155e8:	2300      	movs	r3, #0
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	370c      	adds	r7, #12
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr

080155f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80155f6:	b480      	push	{r7}
 80155f8:	b083      	sub	sp, #12
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015604:	b2db      	uxtb	r3, r3
 8015606:	2b04      	cmp	r3, #4
 8015608:	d106      	bne.n	8015618 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015610:	b2da      	uxtb	r2, r3
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015618:	2300      	movs	r3, #0
}
 801561a:	4618      	mov	r0, r3
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b082      	sub	sp, #8
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015634:	b2db      	uxtb	r3, r3
 8015636:	2b03      	cmp	r3, #3
 8015638:	d110      	bne.n	801565c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015640:	2b00      	cmp	r3, #0
 8015642:	d00b      	beq.n	801565c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801564a:	69db      	ldr	r3, [r3, #28]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d005      	beq.n	801565c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015656:	69db      	ldr	r3, [r3, #28]
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801565c:	2300      	movs	r3, #0
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
 801566e:	460b      	mov	r3, r1
 8015670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	32ae      	adds	r2, #174	; 0xae
 801567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d101      	bne.n	8015688 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015684:	2303      	movs	r3, #3
 8015686:	e01c      	b.n	80156c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801568e:	b2db      	uxtb	r3, r3
 8015690:	2b03      	cmp	r3, #3
 8015692:	d115      	bne.n	80156c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	32ae      	adds	r2, #174	; 0xae
 801569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a2:	6a1b      	ldr	r3, [r3, #32]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d00b      	beq.n	80156c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	32ae      	adds	r2, #174	; 0xae
 80156b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b6:	6a1b      	ldr	r3, [r3, #32]
 80156b8:	78fa      	ldrb	r2, [r7, #3]
 80156ba:	4611      	mov	r1, r2
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156c0:	2300      	movs	r3, #0
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80156ca:	b580      	push	{r7, lr}
 80156cc:	b082      	sub	sp, #8
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	460b      	mov	r3, r1
 80156d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	32ae      	adds	r2, #174	; 0xae
 80156e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d101      	bne.n	80156ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80156e8:	2303      	movs	r3, #3
 80156ea:	e01c      	b.n	8015726 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	d115      	bne.n	8015724 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	32ae      	adds	r2, #174	; 0xae
 8015702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015708:	2b00      	cmp	r3, #0
 801570a:	d00b      	beq.n	8015724 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	32ae      	adds	r2, #174	; 0xae
 8015716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801571c:	78fa      	ldrb	r2, [r7, #3]
 801571e:	4611      	mov	r1, r2
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015724:	2300      	movs	r3, #0
}
 8015726:	4618      	mov	r0, r3
 8015728:	3708      	adds	r7, #8
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}

0801572e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801572e:	b480      	push	{r7}
 8015730:	b083      	sub	sp, #12
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801574c:	2300      	movs	r3, #0
 801574e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2201      	movs	r2, #1
 8015754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801575e:	2b00      	cmp	r3, #0
 8015760:	d00e      	beq.n	8015780 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	6852      	ldr	r2, [r2, #4]
 801576e:	b2d2      	uxtb	r2, r2
 8015770:	4611      	mov	r1, r2
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	4798      	blx	r3
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d001      	beq.n	8015780 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801577c:	2303      	movs	r3, #3
 801577e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015780:	7bfb      	ldrb	r3, [r7, #15]
}
 8015782:	4618      	mov	r0, r3
 8015784:	3710      	adds	r7, #16
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}

0801578a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801578a:	b480      	push	{r7}
 801578c:	b083      	sub	sp, #12
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
 8015792:	460b      	mov	r3, r1
 8015794:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015796:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015798:	4618      	mov	r0, r3
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	460b      	mov	r3, r1
 80157ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80157b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	370c      	adds	r7, #12
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr

080157be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157be:	b480      	push	{r7}
 80157c0:	b087      	sub	sp, #28
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	3301      	adds	r3, #1
 80157d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157d6:	697b      	ldr	r3, [r7, #20]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157dc:	8a3b      	ldrh	r3, [r7, #16]
 80157de:	021b      	lsls	r3, r3, #8
 80157e0:	b21a      	sxth	r2, r3
 80157e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157e6:	4313      	orrs	r3, r2
 80157e8:	b21b      	sxth	r3, r3
 80157ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157ec:	89fb      	ldrh	r3, [r7, #14]
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	371c      	adds	r7, #28
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr
	...

080157fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015806:	2300      	movs	r3, #0
 8015808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015812:	2b40      	cmp	r3, #64	; 0x40
 8015814:	d005      	beq.n	8015822 <USBD_StdDevReq+0x26>
 8015816:	2b40      	cmp	r3, #64	; 0x40
 8015818:	d857      	bhi.n	80158ca <USBD_StdDevReq+0xce>
 801581a:	2b00      	cmp	r3, #0
 801581c:	d00f      	beq.n	801583e <USBD_StdDevReq+0x42>
 801581e:	2b20      	cmp	r3, #32
 8015820:	d153      	bne.n	80158ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	32ae      	adds	r2, #174	; 0xae
 801582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015830:	689b      	ldr	r3, [r3, #8]
 8015832:	6839      	ldr	r1, [r7, #0]
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	4798      	blx	r3
 8015838:	4603      	mov	r3, r0
 801583a:	73fb      	strb	r3, [r7, #15]
      break;
 801583c:	e04a      	b.n	80158d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	785b      	ldrb	r3, [r3, #1]
 8015842:	2b09      	cmp	r3, #9
 8015844:	d83b      	bhi.n	80158be <USBD_StdDevReq+0xc2>
 8015846:	a201      	add	r2, pc, #4	; (adr r2, 801584c <USBD_StdDevReq+0x50>)
 8015848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801584c:	080158a1 	.word	0x080158a1
 8015850:	080158b5 	.word	0x080158b5
 8015854:	080158bf 	.word	0x080158bf
 8015858:	080158ab 	.word	0x080158ab
 801585c:	080158bf 	.word	0x080158bf
 8015860:	0801587f 	.word	0x0801587f
 8015864:	08015875 	.word	0x08015875
 8015868:	080158bf 	.word	0x080158bf
 801586c:	08015897 	.word	0x08015897
 8015870:	08015889 	.word	0x08015889
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015874:	6839      	ldr	r1, [r7, #0]
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 fa3c 	bl	8015cf4 <USBD_GetDescriptor>
          break;
 801587c:	e024      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801587e:	6839      	ldr	r1, [r7, #0]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f000 fbcb 	bl	801601c <USBD_SetAddress>
          break;
 8015886:	e01f      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015888:	6839      	ldr	r1, [r7, #0]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 fc0a 	bl	80160a4 <USBD_SetConfig>
 8015890:	4603      	mov	r3, r0
 8015892:	73fb      	strb	r3, [r7, #15]
          break;
 8015894:	e018      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f000 fcad 	bl	80161f8 <USBD_GetConfig>
          break;
 801589e:	e013      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158a0:	6839      	ldr	r1, [r7, #0]
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 fcde 	bl	8016264 <USBD_GetStatus>
          break;
 80158a8:	e00e      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158aa:	6839      	ldr	r1, [r7, #0]
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f000 fd0d 	bl	80162cc <USBD_SetFeature>
          break;
 80158b2:	e009      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158b4:	6839      	ldr	r1, [r7, #0]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f000 fd31 	bl	801631e <USBD_ClrFeature>
          break;
 80158bc:	e004      	b.n	80158c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fd88 	bl	80163d6 <USBD_CtlError>
          break;
 80158c6:	bf00      	nop
      }
      break;
 80158c8:	e004      	b.n	80158d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158ca:	6839      	ldr	r1, [r7, #0]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fd82 	bl	80163d6 <USBD_CtlError>
      break;
 80158d2:	bf00      	nop
  }

  return ret;
 80158d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop

080158e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158ea:	2300      	movs	r3, #0
 80158ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158f6:	2b40      	cmp	r3, #64	; 0x40
 80158f8:	d005      	beq.n	8015906 <USBD_StdItfReq+0x26>
 80158fa:	2b40      	cmp	r3, #64	; 0x40
 80158fc:	d852      	bhi.n	80159a4 <USBD_StdItfReq+0xc4>
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d001      	beq.n	8015906 <USBD_StdItfReq+0x26>
 8015902:	2b20      	cmp	r3, #32
 8015904:	d14e      	bne.n	80159a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801590c:	b2db      	uxtb	r3, r3
 801590e:	3b01      	subs	r3, #1
 8015910:	2b02      	cmp	r3, #2
 8015912:	d840      	bhi.n	8015996 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	889b      	ldrh	r3, [r3, #4]
 8015918:	b2db      	uxtb	r3, r3
 801591a:	2b01      	cmp	r3, #1
 801591c:	d836      	bhi.n	801598c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	889b      	ldrh	r3, [r3, #4]
 8015922:	b2db      	uxtb	r3, r3
 8015924:	4619      	mov	r1, r3
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7ff ff2f 	bl	801578a <USBD_CoreFindIF>
 801592c:	4603      	mov	r3, r0
 801592e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015930:	7bbb      	ldrb	r3, [r7, #14]
 8015932:	2bff      	cmp	r3, #255	; 0xff
 8015934:	d01d      	beq.n	8015972 <USBD_StdItfReq+0x92>
 8015936:	7bbb      	ldrb	r3, [r7, #14]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d11a      	bne.n	8015972 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801593c:	7bba      	ldrb	r2, [r7, #14]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	32ae      	adds	r2, #174	; 0xae
 8015942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d00f      	beq.n	801596c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801594c:	7bba      	ldrb	r2, [r7, #14]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015954:	7bba      	ldrb	r2, [r7, #14]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	32ae      	adds	r2, #174	; 0xae
 801595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	6839      	ldr	r1, [r7, #0]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	4798      	blx	r3
 8015966:	4603      	mov	r3, r0
 8015968:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801596a:	e004      	b.n	8015976 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801596c:	2303      	movs	r3, #3
 801596e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015970:	e001      	b.n	8015976 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015972:	2303      	movs	r3, #3
 8015974:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	88db      	ldrh	r3, [r3, #6]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d110      	bne.n	80159a0 <USBD_StdItfReq+0xc0>
 801597e:	7bfb      	ldrb	r3, [r7, #15]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d10d      	bne.n	80159a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f000 fd74 	bl	8016472 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801598a:	e009      	b.n	80159a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801598c:	6839      	ldr	r1, [r7, #0]
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 fd21 	bl	80163d6 <USBD_CtlError>
          break;
 8015994:	e004      	b.n	80159a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015996:	6839      	ldr	r1, [r7, #0]
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fd1c 	bl	80163d6 <USBD_CtlError>
          break;
 801599e:	e000      	b.n	80159a2 <USBD_StdItfReq+0xc2>
          break;
 80159a0:	bf00      	nop
      }
      break;
 80159a2:	e004      	b.n	80159ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159a4:	6839      	ldr	r1, [r7, #0]
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f000 fd15 	bl	80163d6 <USBD_CtlError>
      break;
 80159ac:	bf00      	nop
  }

  return ret;
 80159ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3710      	adds	r7, #16
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}

080159b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
 80159c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	889b      	ldrh	r3, [r3, #4]
 80159ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159d4:	2b40      	cmp	r3, #64	; 0x40
 80159d6:	d007      	beq.n	80159e8 <USBD_StdEPReq+0x30>
 80159d8:	2b40      	cmp	r3, #64	; 0x40
 80159da:	f200 817f 	bhi.w	8015cdc <USBD_StdEPReq+0x324>
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d02a      	beq.n	8015a38 <USBD_StdEPReq+0x80>
 80159e2:	2b20      	cmp	r3, #32
 80159e4:	f040 817a 	bne.w	8015cdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80159e8:	7bbb      	ldrb	r3, [r7, #14]
 80159ea:	4619      	mov	r1, r3
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7ff fed9 	bl	80157a4 <USBD_CoreFindEP>
 80159f2:	4603      	mov	r3, r0
 80159f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159f6:	7b7b      	ldrb	r3, [r7, #13]
 80159f8:	2bff      	cmp	r3, #255	; 0xff
 80159fa:	f000 8174 	beq.w	8015ce6 <USBD_StdEPReq+0x32e>
 80159fe:	7b7b      	ldrb	r3, [r7, #13]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f040 8170 	bne.w	8015ce6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a06:	7b7a      	ldrb	r2, [r7, #13]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a0e:	7b7a      	ldrb	r2, [r7, #13]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	32ae      	adds	r2, #174	; 0xae
 8015a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a18:	689b      	ldr	r3, [r3, #8]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	f000 8163 	beq.w	8015ce6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a20:	7b7a      	ldrb	r2, [r7, #13]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	32ae      	adds	r2, #174	; 0xae
 8015a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a2a:	689b      	ldr	r3, [r3, #8]
 8015a2c:	6839      	ldr	r1, [r7, #0]
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	4798      	blx	r3
 8015a32:	4603      	mov	r3, r0
 8015a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a36:	e156      	b.n	8015ce6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a38:	683b      	ldr	r3, [r7, #0]
 8015a3a:	785b      	ldrb	r3, [r3, #1]
 8015a3c:	2b03      	cmp	r3, #3
 8015a3e:	d008      	beq.n	8015a52 <USBD_StdEPReq+0x9a>
 8015a40:	2b03      	cmp	r3, #3
 8015a42:	f300 8145 	bgt.w	8015cd0 <USBD_StdEPReq+0x318>
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	f000 809b 	beq.w	8015b82 <USBD_StdEPReq+0x1ca>
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d03c      	beq.n	8015aca <USBD_StdEPReq+0x112>
 8015a50:	e13e      	b.n	8015cd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2b02      	cmp	r3, #2
 8015a5c:	d002      	beq.n	8015a64 <USBD_StdEPReq+0xac>
 8015a5e:	2b03      	cmp	r3, #3
 8015a60:	d016      	beq.n	8015a90 <USBD_StdEPReq+0xd8>
 8015a62:	e02c      	b.n	8015abe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a64:	7bbb      	ldrb	r3, [r7, #14]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d00d      	beq.n	8015a86 <USBD_StdEPReq+0xce>
 8015a6a:	7bbb      	ldrb	r3, [r7, #14]
 8015a6c:	2b80      	cmp	r3, #128	; 0x80
 8015a6e:	d00a      	beq.n	8015a86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	4619      	mov	r1, r3
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f000 fe39 	bl	80166ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a7a:	2180      	movs	r1, #128	; 0x80
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f000 fe35 	bl	80166ec <USBD_LL_StallEP>
 8015a82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a84:	e020      	b.n	8015ac8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a86:	6839      	ldr	r1, [r7, #0]
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f000 fca4 	bl	80163d6 <USBD_CtlError>
              break;
 8015a8e:	e01b      	b.n	8015ac8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	885b      	ldrh	r3, [r3, #2]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d10e      	bne.n	8015ab6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a98:	7bbb      	ldrb	r3, [r7, #14]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00b      	beq.n	8015ab6 <USBD_StdEPReq+0xfe>
 8015a9e:	7bbb      	ldrb	r3, [r7, #14]
 8015aa0:	2b80      	cmp	r3, #128	; 0x80
 8015aa2:	d008      	beq.n	8015ab6 <USBD_StdEPReq+0xfe>
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	88db      	ldrh	r3, [r3, #6]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d104      	bne.n	8015ab6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015aac:	7bbb      	ldrb	r3, [r7, #14]
 8015aae:	4619      	mov	r1, r3
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fe1b 	bl	80166ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f000 fcdb 	bl	8016472 <USBD_CtlSendStatus>

              break;
 8015abc:	e004      	b.n	8015ac8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f000 fc88 	bl	80163d6 <USBD_CtlError>
              break;
 8015ac6:	bf00      	nop
          }
          break;
 8015ac8:	e107      	b.n	8015cda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d002      	beq.n	8015adc <USBD_StdEPReq+0x124>
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d016      	beq.n	8015b08 <USBD_StdEPReq+0x150>
 8015ada:	e04b      	b.n	8015b74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d00d      	beq.n	8015afe <USBD_StdEPReq+0x146>
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	2b80      	cmp	r3, #128	; 0x80
 8015ae6:	d00a      	beq.n	8015afe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	4619      	mov	r1, r3
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f000 fdfd 	bl	80166ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015af2:	2180      	movs	r1, #128	; 0x80
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 fdf9 	bl	80166ec <USBD_LL_StallEP>
 8015afa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015afc:	e040      	b.n	8015b80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015afe:	6839      	ldr	r1, [r7, #0]
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 fc68 	bl	80163d6 <USBD_CtlError>
              break;
 8015b06:	e03b      	b.n	8015b80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	885b      	ldrh	r3, [r3, #2]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d136      	bne.n	8015b7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b10:	7bbb      	ldrb	r3, [r7, #14]
 8015b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d004      	beq.n	8015b24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b1a:	7bbb      	ldrb	r3, [r7, #14]
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 fe03 	bl	801672a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f000 fca4 	bl	8016472 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b2a:	7bbb      	ldrb	r3, [r7, #14]
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f7ff fe38 	bl	80157a4 <USBD_CoreFindEP>
 8015b34:	4603      	mov	r3, r0
 8015b36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b38:	7b7b      	ldrb	r3, [r7, #13]
 8015b3a:	2bff      	cmp	r3, #255	; 0xff
 8015b3c:	d01f      	beq.n	8015b7e <USBD_StdEPReq+0x1c6>
 8015b3e:	7b7b      	ldrb	r3, [r7, #13]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d11c      	bne.n	8015b7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b44:	7b7a      	ldrb	r2, [r7, #13]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b4c:	7b7a      	ldrb	r2, [r7, #13]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	32ae      	adds	r2, #174	; 0xae
 8015b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b56:	689b      	ldr	r3, [r3, #8]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d010      	beq.n	8015b7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b5c:	7b7a      	ldrb	r2, [r7, #13]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	32ae      	adds	r2, #174	; 0xae
 8015b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b66:	689b      	ldr	r3, [r3, #8]
 8015b68:	6839      	ldr	r1, [r7, #0]
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	4798      	blx	r3
 8015b6e:	4603      	mov	r3, r0
 8015b70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b72:	e004      	b.n	8015b7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b74:	6839      	ldr	r1, [r7, #0]
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f000 fc2d 	bl	80163d6 <USBD_CtlError>
              break;
 8015b7c:	e000      	b.n	8015b80 <USBD_StdEPReq+0x1c8>
              break;
 8015b7e:	bf00      	nop
          }
          break;
 8015b80:	e0ab      	b.n	8015cda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d002      	beq.n	8015b94 <USBD_StdEPReq+0x1dc>
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d032      	beq.n	8015bf8 <USBD_StdEPReq+0x240>
 8015b92:	e097      	b.n	8015cc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b94:	7bbb      	ldrb	r3, [r7, #14]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d007      	beq.n	8015baa <USBD_StdEPReq+0x1f2>
 8015b9a:	7bbb      	ldrb	r3, [r7, #14]
 8015b9c:	2b80      	cmp	r3, #128	; 0x80
 8015b9e:	d004      	beq.n	8015baa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015ba0:	6839      	ldr	r1, [r7, #0]
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f000 fc17 	bl	80163d6 <USBD_CtlError>
                break;
 8015ba8:	e091      	b.n	8015cce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	da0b      	bge.n	8015bca <USBD_StdEPReq+0x212>
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	3310      	adds	r3, #16
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	4413      	add	r3, r2
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	e00b      	b.n	8015be2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bca:	7bbb      	ldrb	r3, [r7, #14]
 8015bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	009b      	lsls	r3, r3, #2
 8015bd4:	4413      	add	r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	4413      	add	r3, r2
 8015be0:	3304      	adds	r3, #4
 8015be2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	2200      	movs	r2, #0
 8015be8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2202      	movs	r2, #2
 8015bee:	4619      	mov	r1, r3
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fc01 	bl	80163f8 <USBD_CtlSendData>
              break;
 8015bf6:	e06a      	b.n	8015cce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	da11      	bge.n	8015c24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c00:	7bbb      	ldrb	r3, [r7, #14]
 8015c02:	f003 020f 	and.w	r2, r3, #15
 8015c06:	6879      	ldr	r1, [r7, #4]
 8015c08:	4613      	mov	r3, r2
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	4413      	add	r3, r2
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	440b      	add	r3, r1
 8015c12:	3324      	adds	r3, #36	; 0x24
 8015c14:	881b      	ldrh	r3, [r3, #0]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d117      	bne.n	8015c4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c1a:	6839      	ldr	r1, [r7, #0]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fbda 	bl	80163d6 <USBD_CtlError>
                  break;
 8015c22:	e054      	b.n	8015cce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c24:	7bbb      	ldrb	r3, [r7, #14]
 8015c26:	f003 020f 	and.w	r2, r3, #15
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	4413      	add	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	440b      	add	r3, r1
 8015c36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c3a:	881b      	ldrh	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d104      	bne.n	8015c4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c40:	6839      	ldr	r1, [r7, #0]
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f000 fbc7 	bl	80163d6 <USBD_CtlError>
                  break;
 8015c48:	e041      	b.n	8015cce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	da0b      	bge.n	8015c6a <USBD_StdEPReq+0x2b2>
 8015c52:	7bbb      	ldrb	r3, [r7, #14]
 8015c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c58:	4613      	mov	r3, r2
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	4413      	add	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	3310      	adds	r3, #16
 8015c62:	687a      	ldr	r2, [r7, #4]
 8015c64:	4413      	add	r3, r2
 8015c66:	3304      	adds	r3, #4
 8015c68:	e00b      	b.n	8015c82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c6a:	7bbb      	ldrb	r3, [r7, #14]
 8015c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c70:	4613      	mov	r3, r2
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	4413      	add	r3, r2
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	4413      	add	r3, r2
 8015c80:	3304      	adds	r3, #4
 8015c82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c84:	7bbb      	ldrb	r3, [r7, #14]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <USBD_StdEPReq+0x2d8>
 8015c8a:	7bbb      	ldrb	r3, [r7, #14]
 8015c8c:	2b80      	cmp	r3, #128	; 0x80
 8015c8e:	d103      	bne.n	8015c98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2200      	movs	r2, #0
 8015c94:	601a      	str	r2, [r3, #0]
 8015c96:	e00e      	b.n	8015cb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c98:	7bbb      	ldrb	r3, [r7, #14]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f000 fd63 	bl	8016768 <USBD_LL_IsStallEP>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d003      	beq.n	8015cb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	2201      	movs	r2, #1
 8015cac:	601a      	str	r2, [r3, #0]
 8015cae:	e002      	b.n	8015cb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	2202      	movs	r2, #2
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f000 fb9b 	bl	80163f8 <USBD_CtlSendData>
              break;
 8015cc2:	e004      	b.n	8015cce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fb85 	bl	80163d6 <USBD_CtlError>
              break;
 8015ccc:	bf00      	nop
          }
          break;
 8015cce:	e004      	b.n	8015cda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 fb7f 	bl	80163d6 <USBD_CtlError>
          break;
 8015cd8:	bf00      	nop
      }
      break;
 8015cda:	e005      	b.n	8015ce8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015cdc:	6839      	ldr	r1, [r7, #0]
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 fb79 	bl	80163d6 <USBD_CtlError>
      break;
 8015ce4:	e000      	b.n	8015ce8 <USBD_StdEPReq+0x330>
      break;
 8015ce6:	bf00      	nop
  }

  return ret;
 8015ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3710      	adds	r7, #16
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
	...

08015cf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d02:	2300      	movs	r3, #0
 8015d04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d06:	2300      	movs	r3, #0
 8015d08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	885b      	ldrh	r3, [r3, #2]
 8015d0e:	0a1b      	lsrs	r3, r3, #8
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	3b01      	subs	r3, #1
 8015d14:	2b0e      	cmp	r3, #14
 8015d16:	f200 8152 	bhi.w	8015fbe <USBD_GetDescriptor+0x2ca>
 8015d1a:	a201      	add	r2, pc, #4	; (adr r2, 8015d20 <USBD_GetDescriptor+0x2c>)
 8015d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d20:	08015d91 	.word	0x08015d91
 8015d24:	08015da9 	.word	0x08015da9
 8015d28:	08015de9 	.word	0x08015de9
 8015d2c:	08015fbf 	.word	0x08015fbf
 8015d30:	08015fbf 	.word	0x08015fbf
 8015d34:	08015f5f 	.word	0x08015f5f
 8015d38:	08015f8b 	.word	0x08015f8b
 8015d3c:	08015fbf 	.word	0x08015fbf
 8015d40:	08015fbf 	.word	0x08015fbf
 8015d44:	08015fbf 	.word	0x08015fbf
 8015d48:	08015fbf 	.word	0x08015fbf
 8015d4c:	08015fbf 	.word	0x08015fbf
 8015d50:	08015fbf 	.word	0x08015fbf
 8015d54:	08015fbf 	.word	0x08015fbf
 8015d58:	08015d5d 	.word	0x08015d5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d62:	69db      	ldr	r3, [r3, #28]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00b      	beq.n	8015d80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d6e:	69db      	ldr	r3, [r3, #28]
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	7c12      	ldrb	r2, [r2, #16]
 8015d74:	f107 0108 	add.w	r1, r7, #8
 8015d78:	4610      	mov	r0, r2
 8015d7a:	4798      	blx	r3
 8015d7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d7e:	e126      	b.n	8015fce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015d80:	6839      	ldr	r1, [r7, #0]
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 fb27 	bl	80163d6 <USBD_CtlError>
        err++;
 8015d88:	7afb      	ldrb	r3, [r7, #11]
 8015d8a:	3301      	adds	r3, #1
 8015d8c:	72fb      	strb	r3, [r7, #11]
      break;
 8015d8e:	e11e      	b.n	8015fce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	7c12      	ldrb	r2, [r2, #16]
 8015d9c:	f107 0108 	add.w	r1, r7, #8
 8015da0:	4610      	mov	r0, r2
 8015da2:	4798      	blx	r3
 8015da4:	60f8      	str	r0, [r7, #12]
      break;
 8015da6:	e112      	b.n	8015fce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	7c1b      	ldrb	r3, [r3, #16]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d10d      	bne.n	8015dcc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015db8:	f107 0208 	add.w	r2, r7, #8
 8015dbc:	4610      	mov	r0, r2
 8015dbe:	4798      	blx	r3
 8015dc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	2202      	movs	r2, #2
 8015dc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015dca:	e100      	b.n	8015fce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd4:	f107 0208 	add.w	r2, r7, #8
 8015dd8:	4610      	mov	r0, r2
 8015dda:	4798      	blx	r3
 8015ddc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	3301      	adds	r3, #1
 8015de2:	2202      	movs	r2, #2
 8015de4:	701a      	strb	r2, [r3, #0]
      break;
 8015de6:	e0f2      	b.n	8015fce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	885b      	ldrh	r3, [r3, #2]
 8015dec:	b2db      	uxtb	r3, r3
 8015dee:	2b05      	cmp	r3, #5
 8015df0:	f200 80ac 	bhi.w	8015f4c <USBD_GetDescriptor+0x258>
 8015df4:	a201      	add	r2, pc, #4	; (adr r2, 8015dfc <USBD_GetDescriptor+0x108>)
 8015df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dfa:	bf00      	nop
 8015dfc:	08015e15 	.word	0x08015e15
 8015e00:	08015e49 	.word	0x08015e49
 8015e04:	08015e7d 	.word	0x08015e7d
 8015e08:	08015eb1 	.word	0x08015eb1
 8015e0c:	08015ee5 	.word	0x08015ee5
 8015e10:	08015f19 	.word	0x08015f19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d00b      	beq.n	8015e38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	7c12      	ldrb	r2, [r2, #16]
 8015e2c:	f107 0108 	add.w	r1, r7, #8
 8015e30:	4610      	mov	r0, r2
 8015e32:	4798      	blx	r3
 8015e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e36:	e091      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e38:	6839      	ldr	r1, [r7, #0]
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f000 facb 	bl	80163d6 <USBD_CtlError>
            err++;
 8015e40:	7afb      	ldrb	r3, [r7, #11]
 8015e42:	3301      	adds	r3, #1
 8015e44:	72fb      	strb	r3, [r7, #11]
          break;
 8015e46:	e089      	b.n	8015f5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00b      	beq.n	8015e6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e5a:	689b      	ldr	r3, [r3, #8]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	7c12      	ldrb	r2, [r2, #16]
 8015e60:	f107 0108 	add.w	r1, r7, #8
 8015e64:	4610      	mov	r0, r2
 8015e66:	4798      	blx	r3
 8015e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e6a:	e077      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e6c:	6839      	ldr	r1, [r7, #0]
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 fab1 	bl	80163d6 <USBD_CtlError>
            err++;
 8015e74:	7afb      	ldrb	r3, [r7, #11]
 8015e76:	3301      	adds	r3, #1
 8015e78:	72fb      	strb	r3, [r7, #11]
          break;
 8015e7a:	e06f      	b.n	8015f5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d00b      	beq.n	8015ea0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	7c12      	ldrb	r2, [r2, #16]
 8015e94:	f107 0108 	add.w	r1, r7, #8
 8015e98:	4610      	mov	r0, r2
 8015e9a:	4798      	blx	r3
 8015e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e9e:	e05d      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015ea0:	6839      	ldr	r1, [r7, #0]
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fa97 	bl	80163d6 <USBD_CtlError>
            err++;
 8015ea8:	7afb      	ldrb	r3, [r7, #11]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	72fb      	strb	r3, [r7, #11]
          break;
 8015eae:	e055      	b.n	8015f5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eb6:	691b      	ldr	r3, [r3, #16]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00b      	beq.n	8015ed4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ec2:	691b      	ldr	r3, [r3, #16]
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	7c12      	ldrb	r2, [r2, #16]
 8015ec8:	f107 0108 	add.w	r1, r7, #8
 8015ecc:	4610      	mov	r0, r2
 8015ece:	4798      	blx	r3
 8015ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ed2:	e043      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 fa7d 	bl	80163d6 <USBD_CtlError>
            err++;
 8015edc:	7afb      	ldrb	r3, [r7, #11]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ee2:	e03b      	b.n	8015f5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eea:	695b      	ldr	r3, [r3, #20]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00b      	beq.n	8015f08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ef6:	695b      	ldr	r3, [r3, #20]
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	7c12      	ldrb	r2, [r2, #16]
 8015efc:	f107 0108 	add.w	r1, r7, #8
 8015f00:	4610      	mov	r0, r2
 8015f02:	4798      	blx	r3
 8015f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f06:	e029      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015f08:	6839      	ldr	r1, [r7, #0]
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fa63 	bl	80163d6 <USBD_CtlError>
            err++;
 8015f10:	7afb      	ldrb	r3, [r7, #11]
 8015f12:	3301      	adds	r3, #1
 8015f14:	72fb      	strb	r3, [r7, #11]
          break;
 8015f16:	e021      	b.n	8015f5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f1e:	699b      	ldr	r3, [r3, #24]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00b      	beq.n	8015f3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f2a:	699b      	ldr	r3, [r3, #24]
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	7c12      	ldrb	r2, [r2, #16]
 8015f30:	f107 0108 	add.w	r1, r7, #8
 8015f34:	4610      	mov	r0, r2
 8015f36:	4798      	blx	r3
 8015f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f3a:	e00f      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015f3c:	6839      	ldr	r1, [r7, #0]
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f000 fa49 	bl	80163d6 <USBD_CtlError>
            err++;
 8015f44:	7afb      	ldrb	r3, [r7, #11]
 8015f46:	3301      	adds	r3, #1
 8015f48:	72fb      	strb	r3, [r7, #11]
          break;
 8015f4a:	e007      	b.n	8015f5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f4c:	6839      	ldr	r1, [r7, #0]
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 fa41 	bl	80163d6 <USBD_CtlError>
          err++;
 8015f54:	7afb      	ldrb	r3, [r7, #11]
 8015f56:	3301      	adds	r3, #1
 8015f58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f5a:	bf00      	nop
      }
      break;
 8015f5c:	e037      	b.n	8015fce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	7c1b      	ldrb	r3, [r3, #16]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d109      	bne.n	8015f7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f6e:	f107 0208 	add.w	r2, r7, #8
 8015f72:	4610      	mov	r0, r2
 8015f74:	4798      	blx	r3
 8015f76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f78:	e029      	b.n	8015fce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015f7a:	6839      	ldr	r1, [r7, #0]
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f000 fa2a 	bl	80163d6 <USBD_CtlError>
        err++;
 8015f82:	7afb      	ldrb	r3, [r7, #11]
 8015f84:	3301      	adds	r3, #1
 8015f86:	72fb      	strb	r3, [r7, #11]
      break;
 8015f88:	e021      	b.n	8015fce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	7c1b      	ldrb	r3, [r3, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d10d      	bne.n	8015fae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f9a:	f107 0208 	add.w	r2, r7, #8
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	4798      	blx	r3
 8015fa2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	2207      	movs	r2, #7
 8015faa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fac:	e00f      	b.n	8015fce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fa10 	bl	80163d6 <USBD_CtlError>
        err++;
 8015fb6:	7afb      	ldrb	r3, [r7, #11]
 8015fb8:	3301      	adds	r3, #1
 8015fba:	72fb      	strb	r3, [r7, #11]
      break;
 8015fbc:	e007      	b.n	8015fce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015fbe:	6839      	ldr	r1, [r7, #0]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 fa08 	bl	80163d6 <USBD_CtlError>
      err++;
 8015fc6:	7afb      	ldrb	r3, [r7, #11]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	72fb      	strb	r3, [r7, #11]
      break;
 8015fcc:	bf00      	nop
  }

  if (err != 0U)
 8015fce:	7afb      	ldrb	r3, [r7, #11]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d11e      	bne.n	8016012 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	88db      	ldrh	r3, [r3, #6]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d016      	beq.n	801600a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015fdc:	893b      	ldrh	r3, [r7, #8]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d00e      	beq.n	8016000 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	88da      	ldrh	r2, [r3, #6]
 8015fe6:	893b      	ldrh	r3, [r7, #8]
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	bf28      	it	cs
 8015fec:	4613      	movcs	r3, r2
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ff2:	893b      	ldrh	r3, [r7, #8]
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	68f9      	ldr	r1, [r7, #12]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f9fd 	bl	80163f8 <USBD_CtlSendData>
 8015ffe:	e009      	b.n	8016014 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016000:	6839      	ldr	r1, [r7, #0]
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f000 f9e7 	bl	80163d6 <USBD_CtlError>
 8016008:	e004      	b.n	8016014 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f000 fa31 	bl	8016472 <USBD_CtlSendStatus>
 8016010:	e000      	b.n	8016014 <USBD_GetDescriptor+0x320>
    return;
 8016012:	bf00      	nop
  }
}
 8016014:	3710      	adds	r7, #16
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop

0801601c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	889b      	ldrh	r3, [r3, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d131      	bne.n	8016092 <USBD_SetAddress+0x76>
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	88db      	ldrh	r3, [r3, #6]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d12d      	bne.n	8016092 <USBD_SetAddress+0x76>
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	885b      	ldrh	r3, [r3, #2]
 801603a:	2b7f      	cmp	r3, #127	; 0x7f
 801603c:	d829      	bhi.n	8016092 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	885b      	ldrh	r3, [r3, #2]
 8016042:	b2db      	uxtb	r3, r3
 8016044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016050:	b2db      	uxtb	r3, r3
 8016052:	2b03      	cmp	r3, #3
 8016054:	d104      	bne.n	8016060 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016056:	6839      	ldr	r1, [r7, #0]
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 f9bc 	bl	80163d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801605e:	e01d      	b.n	801609c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	7bfa      	ldrb	r2, [r7, #15]
 8016064:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016068:	7bfb      	ldrb	r3, [r7, #15]
 801606a:	4619      	mov	r1, r3
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 fba7 	bl	80167c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 f9fd 	bl	8016472 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016078:	7bfb      	ldrb	r3, [r7, #15]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d004      	beq.n	8016088 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2202      	movs	r2, #2
 8016082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016086:	e009      	b.n	801609c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2201      	movs	r2, #1
 801608c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016090:	e004      	b.n	801609c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016092:	6839      	ldr	r1, [r7, #0]
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 f99e 	bl	80163d6 <USBD_CtlError>
  }
}
 801609a:	bf00      	nop
 801609c:	bf00      	nop
 801609e:	3710      	adds	r7, #16
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160ae:	2300      	movs	r3, #0
 80160b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	885b      	ldrh	r3, [r3, #2]
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	4b4e      	ldr	r3, [pc, #312]	; (80161f4 <USBD_SetConfig+0x150>)
 80160ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80160bc:	4b4d      	ldr	r3, [pc, #308]	; (80161f4 <USBD_SetConfig+0x150>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d905      	bls.n	80160d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80160c4:	6839      	ldr	r1, [r7, #0]
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 f985 	bl	80163d6 <USBD_CtlError>
    return USBD_FAIL;
 80160cc:	2303      	movs	r3, #3
 80160ce:	e08c      	b.n	80161ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d002      	beq.n	80160e2 <USBD_SetConfig+0x3e>
 80160dc:	2b03      	cmp	r3, #3
 80160de:	d029      	beq.n	8016134 <USBD_SetConfig+0x90>
 80160e0:	e075      	b.n	80161ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160e2:	4b44      	ldr	r3, [pc, #272]	; (80161f4 <USBD_SetConfig+0x150>)
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d020      	beq.n	801612c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160ea:	4b42      	ldr	r3, [pc, #264]	; (80161f4 <USBD_SetConfig+0x150>)
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160f4:	4b3f      	ldr	r3, [pc, #252]	; (80161f4 <USBD_SetConfig+0x150>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f7ff f813 	bl	8015126 <USBD_SetClassConfig>
 8016100:	4603      	mov	r3, r0
 8016102:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016104:	7bfb      	ldrb	r3, [r7, #15]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d008      	beq.n	801611c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801610a:	6839      	ldr	r1, [r7, #0]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 f962 	bl	80163d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2202      	movs	r2, #2
 8016116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801611a:	e065      	b.n	80161e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f9a8 	bl	8016472 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2203      	movs	r2, #3
 8016126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801612a:	e05d      	b.n	80161e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f000 f9a0 	bl	8016472 <USBD_CtlSendStatus>
      break;
 8016132:	e059      	b.n	80161e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016134:	4b2f      	ldr	r3, [pc, #188]	; (80161f4 <USBD_SetConfig+0x150>)
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d112      	bne.n	8016162 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2202      	movs	r2, #2
 8016140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016144:	4b2b      	ldr	r3, [pc, #172]	; (80161f4 <USBD_SetConfig+0x150>)
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	461a      	mov	r2, r3
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801614e:	4b29      	ldr	r3, [pc, #164]	; (80161f4 <USBD_SetConfig+0x150>)
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	4619      	mov	r1, r3
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f7ff f802 	bl	801515e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f000 f989 	bl	8016472 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016160:	e042      	b.n	80161e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016162:	4b24      	ldr	r3, [pc, #144]	; (80161f4 <USBD_SetConfig+0x150>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	461a      	mov	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	429a      	cmp	r2, r3
 801616e:	d02a      	beq.n	80161c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	b2db      	uxtb	r3, r3
 8016176:	4619      	mov	r1, r3
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f7fe fff0 	bl	801515e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801617e:	4b1d      	ldr	r3, [pc, #116]	; (80161f4 <USBD_SetConfig+0x150>)
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	461a      	mov	r2, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016188:	4b1a      	ldr	r3, [pc, #104]	; (80161f4 <USBD_SetConfig+0x150>)
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	4619      	mov	r1, r3
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7fe ffc9 	bl	8015126 <USBD_SetClassConfig>
 8016194:	4603      	mov	r3, r0
 8016196:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016198:	7bfb      	ldrb	r3, [r7, #15]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d00f      	beq.n	80161be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801619e:	6839      	ldr	r1, [r7, #0]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 f918 	bl	80163d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	4619      	mov	r1, r3
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7fe ffd5 	bl	801515e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2202      	movs	r2, #2
 80161b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80161bc:	e014      	b.n	80161e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 f957 	bl	8016472 <USBD_CtlSendStatus>
      break;
 80161c4:	e010      	b.n	80161e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f000 f953 	bl	8016472 <USBD_CtlSendStatus>
      break;
 80161cc:	e00c      	b.n	80161e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80161ce:	6839      	ldr	r1, [r7, #0]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f900 	bl	80163d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161d6:	4b07      	ldr	r3, [pc, #28]	; (80161f4 <USBD_SetConfig+0x150>)
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7fe ffbe 	bl	801515e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161e2:	2303      	movs	r3, #3
 80161e4:	73fb      	strb	r3, [r7, #15]
      break;
 80161e6:	bf00      	nop
  }

  return ret;
 80161e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	200001bc 	.word	0x200001bc

080161f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	88db      	ldrh	r3, [r3, #6]
 8016206:	2b01      	cmp	r3, #1
 8016208:	d004      	beq.n	8016214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801620a:	6839      	ldr	r1, [r7, #0]
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f000 f8e2 	bl	80163d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016212:	e023      	b.n	801625c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801621a:	b2db      	uxtb	r3, r3
 801621c:	2b02      	cmp	r3, #2
 801621e:	dc02      	bgt.n	8016226 <USBD_GetConfig+0x2e>
 8016220:	2b00      	cmp	r3, #0
 8016222:	dc03      	bgt.n	801622c <USBD_GetConfig+0x34>
 8016224:	e015      	b.n	8016252 <USBD_GetConfig+0x5a>
 8016226:	2b03      	cmp	r3, #3
 8016228:	d00b      	beq.n	8016242 <USBD_GetConfig+0x4a>
 801622a:	e012      	b.n	8016252 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2200      	movs	r2, #0
 8016230:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	3308      	adds	r3, #8
 8016236:	2201      	movs	r2, #1
 8016238:	4619      	mov	r1, r3
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 f8dc 	bl	80163f8 <USBD_CtlSendData>
        break;
 8016240:	e00c      	b.n	801625c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	3304      	adds	r3, #4
 8016246:	2201      	movs	r2, #1
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f000 f8d4 	bl	80163f8 <USBD_CtlSendData>
        break;
 8016250:	e004      	b.n	801625c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016252:	6839      	ldr	r1, [r7, #0]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f8be 	bl	80163d6 <USBD_CtlError>
        break;
 801625a:	bf00      	nop
}
 801625c:	bf00      	nop
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016274:	b2db      	uxtb	r3, r3
 8016276:	3b01      	subs	r3, #1
 8016278:	2b02      	cmp	r3, #2
 801627a:	d81e      	bhi.n	80162ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	88db      	ldrh	r3, [r3, #6]
 8016280:	2b02      	cmp	r3, #2
 8016282:	d004      	beq.n	801628e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016284:	6839      	ldr	r1, [r7, #0]
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 f8a5 	bl	80163d6 <USBD_CtlError>
        break;
 801628c:	e01a      	b.n	80162c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2201      	movs	r2, #1
 8016292:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801629a:	2b00      	cmp	r3, #0
 801629c:	d005      	beq.n	80162aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	68db      	ldr	r3, [r3, #12]
 80162a2:	f043 0202 	orr.w	r2, r3, #2
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	330c      	adds	r3, #12
 80162ae:	2202      	movs	r2, #2
 80162b0:	4619      	mov	r1, r3
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f000 f8a0 	bl	80163f8 <USBD_CtlSendData>
      break;
 80162b8:	e004      	b.n	80162c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80162ba:	6839      	ldr	r1, [r7, #0]
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 f88a 	bl	80163d6 <USBD_CtlError>
      break;
 80162c2:	bf00      	nop
  }
}
 80162c4:	bf00      	nop
 80162c6:	3708      	adds	r7, #8
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	885b      	ldrh	r3, [r3, #2]
 80162da:	2b01      	cmp	r3, #1
 80162dc:	d107      	bne.n	80162ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	2201      	movs	r2, #1
 80162e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f000 f8c3 	bl	8016472 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162ec:	e013      	b.n	8016316 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	885b      	ldrh	r3, [r3, #2]
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	d10b      	bne.n	801630e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	889b      	ldrh	r3, [r3, #4]
 80162fa:	0a1b      	lsrs	r3, r3, #8
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 f8b3 	bl	8016472 <USBD_CtlSendStatus>
}
 801630c:	e003      	b.n	8016316 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801630e:	6839      	ldr	r1, [r7, #0]
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f000 f860 	bl	80163d6 <USBD_CtlError>
}
 8016316:	bf00      	nop
 8016318:	3708      	adds	r7, #8
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}

0801631e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801631e:	b580      	push	{r7, lr}
 8016320:	b082      	sub	sp, #8
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
 8016326:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801632e:	b2db      	uxtb	r3, r3
 8016330:	3b01      	subs	r3, #1
 8016332:	2b02      	cmp	r3, #2
 8016334:	d80b      	bhi.n	801634e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	885b      	ldrh	r3, [r3, #2]
 801633a:	2b01      	cmp	r3, #1
 801633c:	d10c      	bne.n	8016358 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2200      	movs	r2, #0
 8016342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f000 f893 	bl	8016472 <USBD_CtlSendStatus>
      }
      break;
 801634c:	e004      	b.n	8016358 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801634e:	6839      	ldr	r1, [r7, #0]
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f000 f840 	bl	80163d6 <USBD_CtlError>
      break;
 8016356:	e000      	b.n	801635a <USBD_ClrFeature+0x3c>
      break;
 8016358:	bf00      	nop
  }
}
 801635a:	bf00      	nop
 801635c:	3708      	adds	r7, #8
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}

08016362 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016362:	b580      	push	{r7, lr}
 8016364:	b084      	sub	sp, #16
 8016366:	af00      	add	r7, sp, #0
 8016368:	6078      	str	r0, [r7, #4]
 801636a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	781a      	ldrb	r2, [r3, #0]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	3301      	adds	r3, #1
 801637c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	781a      	ldrb	r2, [r3, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	3301      	adds	r3, #1
 801638a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f7ff fa16 	bl	80157be <SWAPBYTE>
 8016392:	4603      	mov	r3, r0
 8016394:	461a      	mov	r2, r3
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	3301      	adds	r3, #1
 801639e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	3301      	adds	r3, #1
 80163a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80163a6:	68f8      	ldr	r0, [r7, #12]
 80163a8:	f7ff fa09 	bl	80157be <SWAPBYTE>
 80163ac:	4603      	mov	r3, r0
 80163ae:	461a      	mov	r2, r3
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	3301      	adds	r3, #1
 80163b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	3301      	adds	r3, #1
 80163be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80163c0:	68f8      	ldr	r0, [r7, #12]
 80163c2:	f7ff f9fc 	bl	80157be <SWAPBYTE>
 80163c6:	4603      	mov	r3, r0
 80163c8:	461a      	mov	r2, r3
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	80da      	strh	r2, [r3, #6]
}
 80163ce:	bf00      	nop
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}

080163d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163d6:	b580      	push	{r7, lr}
 80163d8:	b082      	sub	sp, #8
 80163da:	af00      	add	r7, sp, #0
 80163dc:	6078      	str	r0, [r7, #4]
 80163de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163e0:	2180      	movs	r1, #128	; 0x80
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f000 f982 	bl	80166ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163e8:	2100      	movs	r1, #0
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f000 f97e 	bl	80166ec <USBD_LL_StallEP>
}
 80163f0:	bf00      	nop
 80163f2:	3708      	adds	r7, #8
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	60f8      	str	r0, [r7, #12]
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2202      	movs	r2, #2
 8016408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	687a      	ldr	r2, [r7, #4]
 8016410:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	68ba      	ldr	r2, [r7, #8]
 801641c:	2100      	movs	r1, #0
 801641e:	68f8      	ldr	r0, [r7, #12]
 8016420:	f000 f9ed 	bl	80167fe <USBD_LL_Transmit>

  return USBD_OK;
 8016424:	2300      	movs	r3, #0
}
 8016426:	4618      	mov	r0, r3
 8016428:	3710      	adds	r7, #16
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}

0801642e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801642e:	b580      	push	{r7, lr}
 8016430:	b084      	sub	sp, #16
 8016432:	af00      	add	r7, sp, #0
 8016434:	60f8      	str	r0, [r7, #12]
 8016436:	60b9      	str	r1, [r7, #8]
 8016438:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	68ba      	ldr	r2, [r7, #8]
 801643e:	2100      	movs	r1, #0
 8016440:	68f8      	ldr	r0, [r7, #12]
 8016442:	f000 f9dc 	bl	80167fe <USBD_LL_Transmit>

  return USBD_OK;
 8016446:	2300      	movs	r3, #0
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	68ba      	ldr	r2, [r7, #8]
 8016460:	2100      	movs	r1, #0
 8016462:	68f8      	ldr	r0, [r7, #12]
 8016464:	f000 f9ec 	bl	8016840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016468:	2300      	movs	r3, #0
}
 801646a:	4618      	mov	r0, r3
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b082      	sub	sp, #8
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2204      	movs	r2, #4
 801647e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016482:	2300      	movs	r3, #0
 8016484:	2200      	movs	r2, #0
 8016486:	2100      	movs	r1, #0
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f000 f9b8 	bl	80167fe <USBD_LL_Transmit>

  return USBD_OK;
 801648e:	2300      	movs	r3, #0
}
 8016490:	4618      	mov	r0, r3
 8016492:	3708      	adds	r7, #8
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}

08016498 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2205      	movs	r2, #5
 80164a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164a8:	2300      	movs	r3, #0
 80164aa:	2200      	movs	r2, #0
 80164ac:	2100      	movs	r1, #0
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 f9c6 	bl	8016840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164b4:	2300      	movs	r3, #0
}
 80164b6:	4618      	mov	r0, r3
 80164b8:	3708      	adds	r7, #8
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}

080164be <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164be:	b580      	push	{r7, lr}
 80164c0:	b082      	sub	sp, #8
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80164d2:	4619      	mov	r1, r3
 80164d4:	4610      	mov	r0, r2
 80164d6:	f7fe fe5c 	bl	8015192 <USBD_LL_SetupStage>
}
 80164da:	bf00      	nop
 80164dc:	3708      	adds	r7, #8
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b082      	sub	sp, #8
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	6078      	str	r0, [r7, #4]
 80164ea:	460b      	mov	r3, r1
 80164ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80164f4:	78fa      	ldrb	r2, [r7, #3]
 80164f6:	6879      	ldr	r1, [r7, #4]
 80164f8:	4613      	mov	r3, r2
 80164fa:	00db      	lsls	r3, r3, #3
 80164fc:	4413      	add	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	440b      	add	r3, r1
 8016502:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	78fb      	ldrb	r3, [r7, #3]
 801650a:	4619      	mov	r1, r3
 801650c:	f7fe fe96 	bl	801523c <USBD_LL_DataOutStage>
}
 8016510:	bf00      	nop
 8016512:	3708      	adds	r7, #8
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}

08016518 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b082      	sub	sp, #8
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	460b      	mov	r3, r1
 8016522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801652a:	78fa      	ldrb	r2, [r7, #3]
 801652c:	6879      	ldr	r1, [r7, #4]
 801652e:	4613      	mov	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	4413      	add	r3, r2
 8016534:	009b      	lsls	r3, r3, #2
 8016536:	440b      	add	r3, r1
 8016538:	334c      	adds	r3, #76	; 0x4c
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	78fb      	ldrb	r3, [r7, #3]
 801653e:	4619      	mov	r1, r3
 8016540:	f7fe ff2f 	bl	80153a2 <USBD_LL_DataInStage>
}
 8016544:	bf00      	nop
 8016546:	3708      	adds	r7, #8
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}

0801654c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff f863 	bl	8015626 <USBD_LL_SOF>
}
 8016560:	bf00      	nop
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b084      	sub	sp, #16
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016570:	2301      	movs	r3, #1
 8016572:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	68db      	ldr	r3, [r3, #12]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d102      	bne.n	8016582 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801657c:	2300      	movs	r3, #0
 801657e:	73fb      	strb	r3, [r7, #15]
 8016580:	e008      	b.n	8016594 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	68db      	ldr	r3, [r3, #12]
 8016586:	2b02      	cmp	r3, #2
 8016588:	d102      	bne.n	8016590 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801658a:	2301      	movs	r3, #1
 801658c:	73fb      	strb	r3, [r7, #15]
 801658e:	e001      	b.n	8016594 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016590:	f7fa f952 	bl	8010838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801659a:	7bfa      	ldrb	r2, [r7, #15]
 801659c:	4611      	mov	r1, r2
 801659e:	4618      	mov	r0, r3
 80165a0:	f7ff f803 	bl	80155aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7fe ffab 	bl	8015506 <USBD_LL_Reset>
}
 80165b0:	bf00      	nop
 80165b2:	3710      	adds	r7, #16
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7fe ffff 	bl	80155ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	687a      	ldr	r2, [r7, #4]
 80165d8:	6812      	ldr	r2, [r2, #0]
 80165da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80165de:	f043 0301 	orr.w	r3, r3, #1
 80165e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6a1b      	ldr	r3, [r3, #32]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d005      	beq.n	80165f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165ec:	4b04      	ldr	r3, [pc, #16]	; (8016600 <HAL_PCD_SuspendCallback+0x48>)
 80165ee:	691b      	ldr	r3, [r3, #16]
 80165f0:	4a03      	ldr	r2, [pc, #12]	; (8016600 <HAL_PCD_SuspendCallback+0x48>)
 80165f2:	f043 0306 	orr.w	r3, r3, #6
 80165f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80165f8:	bf00      	nop
 80165fa:	3708      	adds	r7, #8
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}
 8016600:	e000ed00 	.word	0xe000ed00

08016604 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b082      	sub	sp, #8
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016612:	4618      	mov	r0, r3
 8016614:	f7fe ffef 	bl	80155f6 <USBD_LL_Resume>
}
 8016618:	bf00      	nop
 801661a:	3708      	adds	r7, #8
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	460b      	mov	r3, r1
 801662a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016632:	78fa      	ldrb	r2, [r7, #3]
 8016634:	4611      	mov	r1, r2
 8016636:	4618      	mov	r0, r3
 8016638:	f7ff f847 	bl	80156ca <USBD_LL_IsoOUTIncomplete>
}
 801663c:	bf00      	nop
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	460b      	mov	r3, r1
 801664e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016656:	78fa      	ldrb	r2, [r7, #3]
 8016658:	4611      	mov	r1, r2
 801665a:	4618      	mov	r0, r3
 801665c:	f7ff f803 	bl	8015666 <USBD_LL_IsoINIncomplete>
}
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016676:	4618      	mov	r0, r3
 8016678:	f7ff f859 	bl	801572e <USBD_LL_DevConnected>
}
 801667c:	bf00      	nop
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016692:	4618      	mov	r0, r3
 8016694:	f7ff f856 	bl	8015744 <USBD_LL_DevDisconnected>
}
 8016698:	bf00      	nop
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b084      	sub	sp, #16
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	4608      	mov	r0, r1
 80166aa:	4611      	mov	r1, r2
 80166ac:	461a      	mov	r2, r3
 80166ae:	4603      	mov	r3, r0
 80166b0:	70fb      	strb	r3, [r7, #3]
 80166b2:	460b      	mov	r3, r1
 80166b4:	70bb      	strb	r3, [r7, #2]
 80166b6:	4613      	mov	r3, r2
 80166b8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166ba:	2300      	movs	r3, #0
 80166bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166be:	2300      	movs	r3, #0
 80166c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80166c8:	78bb      	ldrb	r3, [r7, #2]
 80166ca:	883a      	ldrh	r2, [r7, #0]
 80166cc:	78f9      	ldrb	r1, [r7, #3]
 80166ce:	f7fb fb9f 	bl	8011e10 <HAL_PCD_EP_Open>
 80166d2:	4603      	mov	r3, r0
 80166d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166d6:	7bfb      	ldrb	r3, [r7, #15]
 80166d8:	4618      	mov	r0, r3
 80166da:	f000 f921 	bl	8016920 <USBD_Get_USB_Status>
 80166de:	4603      	mov	r3, r0
 80166e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b084      	sub	sp, #16
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	460b      	mov	r3, r1
 80166f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166f8:	2300      	movs	r3, #0
 80166fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166fc:	2300      	movs	r3, #0
 80166fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016706:	78fa      	ldrb	r2, [r7, #3]
 8016708:	4611      	mov	r1, r2
 801670a:	4618      	mov	r0, r3
 801670c:	f7fb fc7d 	bl	801200a <HAL_PCD_EP_SetStall>
 8016710:	4603      	mov	r3, r0
 8016712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016714:	7bfb      	ldrb	r3, [r7, #15]
 8016716:	4618      	mov	r0, r3
 8016718:	f000 f902 	bl	8016920 <USBD_Get_USB_Status>
 801671c:	4603      	mov	r3, r0
 801671e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016720:	7bbb      	ldrb	r3, [r7, #14]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801672a:	b580      	push	{r7, lr}
 801672c:	b084      	sub	sp, #16
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	460b      	mov	r3, r1
 8016734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801673a:	2300      	movs	r3, #0
 801673c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016744:	78fa      	ldrb	r2, [r7, #3]
 8016746:	4611      	mov	r1, r2
 8016748:	4618      	mov	r0, r3
 801674a:	f7fb fcc2 	bl	80120d2 <HAL_PCD_EP_ClrStall>
 801674e:	4603      	mov	r3, r0
 8016750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016752:	7bfb      	ldrb	r3, [r7, #15]
 8016754:	4618      	mov	r0, r3
 8016756:	f000 f8e3 	bl	8016920 <USBD_Get_USB_Status>
 801675a:	4603      	mov	r3, r0
 801675c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801675e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016760:	4618      	mov	r0, r3
 8016762:	3710      	adds	r7, #16
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016768:	b480      	push	{r7}
 801676a:	b085      	sub	sp, #20
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	460b      	mov	r3, r1
 8016772:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801677a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801677c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016780:	2b00      	cmp	r3, #0
 8016782:	da0b      	bge.n	801679c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016784:	78fb      	ldrb	r3, [r7, #3]
 8016786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801678a:	68f9      	ldr	r1, [r7, #12]
 801678c:	4613      	mov	r3, r2
 801678e:	00db      	lsls	r3, r3, #3
 8016790:	4413      	add	r3, r2
 8016792:	009b      	lsls	r3, r3, #2
 8016794:	440b      	add	r3, r1
 8016796:	333e      	adds	r3, #62	; 0x3e
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	e00b      	b.n	80167b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801679c:	78fb      	ldrb	r3, [r7, #3]
 801679e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80167a2:	68f9      	ldr	r1, [r7, #12]
 80167a4:	4613      	mov	r3, r2
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	4413      	add	r3, r2
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	440b      	add	r3, r1
 80167ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80167b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3714      	adds	r7, #20
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr

080167c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b084      	sub	sp, #16
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	460b      	mov	r3, r1
 80167ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167cc:	2300      	movs	r3, #0
 80167ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167d0:	2300      	movs	r3, #0
 80167d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167da:	78fa      	ldrb	r2, [r7, #3]
 80167dc:	4611      	mov	r1, r2
 80167de:	4618      	mov	r0, r3
 80167e0:	f7fb faf1 	bl	8011dc6 <HAL_PCD_SetAddress>
 80167e4:	4603      	mov	r3, r0
 80167e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167e8:	7bfb      	ldrb	r3, [r7, #15]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f000 f898 	bl	8016920 <USBD_Get_USB_Status>
 80167f0:	4603      	mov	r3, r0
 80167f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3710      	adds	r7, #16
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80167fe:	b580      	push	{r7, lr}
 8016800:	b086      	sub	sp, #24
 8016802:	af00      	add	r7, sp, #0
 8016804:	60f8      	str	r0, [r7, #12]
 8016806:	607a      	str	r2, [r7, #4]
 8016808:	603b      	str	r3, [r7, #0]
 801680a:	460b      	mov	r3, r1
 801680c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016812:	2300      	movs	r3, #0
 8016814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801681c:	7af9      	ldrb	r1, [r7, #11]
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	f7fb fba8 	bl	8011f76 <HAL_PCD_EP_Transmit>
 8016826:	4603      	mov	r3, r0
 8016828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801682a:	7dfb      	ldrb	r3, [r7, #23]
 801682c:	4618      	mov	r0, r3
 801682e:	f000 f877 	bl	8016920 <USBD_Get_USB_Status>
 8016832:	4603      	mov	r3, r0
 8016834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016836:	7dbb      	ldrb	r3, [r7, #22]
}
 8016838:	4618      	mov	r0, r3
 801683a:	3718      	adds	r7, #24
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b086      	sub	sp, #24
 8016844:	af00      	add	r7, sp, #0
 8016846:	60f8      	str	r0, [r7, #12]
 8016848:	607a      	str	r2, [r7, #4]
 801684a:	603b      	str	r3, [r7, #0]
 801684c:	460b      	mov	r3, r1
 801684e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016850:	2300      	movs	r3, #0
 8016852:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016854:	2300      	movs	r3, #0
 8016856:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801685e:	7af9      	ldrb	r1, [r7, #11]
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	f7fb fb3c 	bl	8011ee0 <HAL_PCD_EP_Receive>
 8016868:	4603      	mov	r3, r0
 801686a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801686c:	7dfb      	ldrb	r3, [r7, #23]
 801686e:	4618      	mov	r0, r3
 8016870:	f000 f856 	bl	8016920 <USBD_Get_USB_Status>
 8016874:	4603      	mov	r3, r0
 8016876:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016878:	7dbb      	ldrb	r3, [r7, #22]
}
 801687a:	4618      	mov	r0, r3
 801687c:	3718      	adds	r7, #24
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
	...

08016884 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	460b      	mov	r3, r1
 801688e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016890:	78fb      	ldrb	r3, [r7, #3]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d002      	beq.n	801689c <HAL_PCDEx_LPM_Callback+0x18>
 8016896:	2b01      	cmp	r3, #1
 8016898:	d01f      	beq.n	80168da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801689a:	e03b      	b.n	8016914 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6a1b      	ldr	r3, [r3, #32]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d007      	beq.n	80168b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80168a4:	f7f9 fe70 	bl	8010588 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80168a8:	4b1c      	ldr	r3, [pc, #112]	; (801691c <HAL_PCDEx_LPM_Callback+0x98>)
 80168aa:	691b      	ldr	r3, [r3, #16]
 80168ac:	4a1b      	ldr	r2, [pc, #108]	; (801691c <HAL_PCDEx_LPM_Callback+0x98>)
 80168ae:	f023 0306 	bic.w	r3, r3, #6
 80168b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	6812      	ldr	r2, [r2, #0]
 80168c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80168c6:	f023 0301 	bic.w	r3, r3, #1
 80168ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7fe fe8f 	bl	80155f6 <USBD_LL_Resume>
    break;
 80168d8:	e01c      	b.n	8016914 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	687a      	ldr	r2, [r7, #4]
 80168e6:	6812      	ldr	r2, [r2, #0]
 80168e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80168ec:	f043 0301 	orr.w	r3, r3, #1
 80168f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7fe fe66 	bl	80155ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6a1b      	ldr	r3, [r3, #32]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d005      	beq.n	8016912 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016906:	4b05      	ldr	r3, [pc, #20]	; (801691c <HAL_PCDEx_LPM_Callback+0x98>)
 8016908:	691b      	ldr	r3, [r3, #16]
 801690a:	4a04      	ldr	r2, [pc, #16]	; (801691c <HAL_PCDEx_LPM_Callback+0x98>)
 801690c:	f043 0306 	orr.w	r3, r3, #6
 8016910:	6113      	str	r3, [r2, #16]
    break;
 8016912:	bf00      	nop
}
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}
 801691c:	e000ed00 	.word	0xe000ed00

08016920 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016920:	b480      	push	{r7}
 8016922:	b085      	sub	sp, #20
 8016924:	af00      	add	r7, sp, #0
 8016926:	4603      	mov	r3, r0
 8016928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801692e:	79fb      	ldrb	r3, [r7, #7]
 8016930:	2b03      	cmp	r3, #3
 8016932:	d817      	bhi.n	8016964 <USBD_Get_USB_Status+0x44>
 8016934:	a201      	add	r2, pc, #4	; (adr r2, 801693c <USBD_Get_USB_Status+0x1c>)
 8016936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801693a:	bf00      	nop
 801693c:	0801694d 	.word	0x0801694d
 8016940:	08016953 	.word	0x08016953
 8016944:	08016959 	.word	0x08016959
 8016948:	0801695f 	.word	0x0801695f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801694c:	2300      	movs	r3, #0
 801694e:	73fb      	strb	r3, [r7, #15]
    break;
 8016950:	e00b      	b.n	801696a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016952:	2303      	movs	r3, #3
 8016954:	73fb      	strb	r3, [r7, #15]
    break;
 8016956:	e008      	b.n	801696a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016958:	2301      	movs	r3, #1
 801695a:	73fb      	strb	r3, [r7, #15]
    break;
 801695c:	e005      	b.n	801696a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801695e:	2303      	movs	r3, #3
 8016960:	73fb      	strb	r3, [r7, #15]
    break;
 8016962:	e002      	b.n	801696a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016964:	2303      	movs	r3, #3
 8016966:	73fb      	strb	r3, [r7, #15]
    break;
 8016968:	bf00      	nop
  }
  return usb_status;
 801696a:	7bfb      	ldrb	r3, [r7, #15]
}
 801696c:	4618      	mov	r0, r3
 801696e:	3714      	adds	r7, #20
 8016970:	46bd      	mov	sp, r7
 8016972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016976:	4770      	bx	lr

08016978 <__libc_init_array>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	4d0d      	ldr	r5, [pc, #52]	; (80169b0 <__libc_init_array+0x38>)
 801697c:	4c0d      	ldr	r4, [pc, #52]	; (80169b4 <__libc_init_array+0x3c>)
 801697e:	1b64      	subs	r4, r4, r5
 8016980:	10a4      	asrs	r4, r4, #2
 8016982:	2600      	movs	r6, #0
 8016984:	42a6      	cmp	r6, r4
 8016986:	d109      	bne.n	801699c <__libc_init_array+0x24>
 8016988:	4d0b      	ldr	r5, [pc, #44]	; (80169b8 <__libc_init_array+0x40>)
 801698a:	4c0c      	ldr	r4, [pc, #48]	; (80169bc <__libc_init_array+0x44>)
 801698c:	f000 f820 	bl	80169d0 <_init>
 8016990:	1b64      	subs	r4, r4, r5
 8016992:	10a4      	asrs	r4, r4, #2
 8016994:	2600      	movs	r6, #0
 8016996:	42a6      	cmp	r6, r4
 8016998:	d105      	bne.n	80169a6 <__libc_init_array+0x2e>
 801699a:	bd70      	pop	{r4, r5, r6, pc}
 801699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80169a0:	4798      	blx	r3
 80169a2:	3601      	adds	r6, #1
 80169a4:	e7ee      	b.n	8016984 <__libc_init_array+0xc>
 80169a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169aa:	4798      	blx	r3
 80169ac:	3601      	adds	r6, #1
 80169ae:	e7f2      	b.n	8016996 <__libc_init_array+0x1e>
 80169b0:	08016a08 	.word	0x08016a08
 80169b4:	08016a08 	.word	0x08016a08
 80169b8:	08016a08 	.word	0x08016a08
 80169bc:	08016a0c 	.word	0x08016a0c

080169c0 <memset>:
 80169c0:	4402      	add	r2, r0
 80169c2:	4603      	mov	r3, r0
 80169c4:	4293      	cmp	r3, r2
 80169c6:	d100      	bne.n	80169ca <memset+0xa>
 80169c8:	4770      	bx	lr
 80169ca:	f803 1b01 	strb.w	r1, [r3], #1
 80169ce:	e7f9      	b.n	80169c4 <memset+0x4>

080169d0 <_init>:
 80169d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169d2:	bf00      	nop
 80169d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169d6:	bc08      	pop	{r3}
 80169d8:	469e      	mov	lr, r3
 80169da:	4770      	bx	lr

080169dc <_fini>:
 80169dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169de:	bf00      	nop
 80169e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169e2:	bc08      	pop	{r3}
 80169e4:	469e      	mov	lr, r3
 80169e6:	4770      	bx	lr
